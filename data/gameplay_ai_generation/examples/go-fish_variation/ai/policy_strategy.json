{
    "game_description": "## Go Fish: Misdirection Edition - Refined Game Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards are face down at the center of the table; the number of remaining cards is known, but not their identities.\n- **Books Collected:** All completed sets of four cards of the same rank are visible to all players.\n- **Turn Information:** Current player and sequence visible to all players.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Revealed Books:** Sets of four cards collected by each player.\n  - **Turn Actions:** Requests made and cards drawn or exchanged by players.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to the player.\n  \n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2}.\n- **Suit:** Irrelevant in this game. \n- **Special Abilities:** None directly, but ranks are part of strategic misdirection.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with only rank considerations.\n\n#### **Initial Dealing:**\n- **2-3 Players:** Each player receives 7 cards.\n- **4-5 Players:** Each player receives 5 cards.\n- Remaining cards form the stock pile at the center.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Request a Card Rank:**\n   - Ask any opponent for a specific card rank.\n   - **Misdirection Allowed:** Players can request any rank, regardless of whether they possess it or not, introducing a strategic element of bluffing.\n2. **Receive Cards if Available:**\n   - The opponent must hand over all cards of the requested rank. The requester's turn continues.\n3. **Draw from Stock:**\n   - If the opponent doesn't have the cards, the requester draws one card from the stock pile.\n4. **Reveal a Book:**\n   - Show and remove four of a kind from their hand, declaring a collected book.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player selects an opponent and requests a rank.\n2. **If Rank Exists with Opponent:**\n   - Cards of that rank are handed over to the requester. The requester's turn continues regardless of prior card possession.\n3. **If Rank Not with Opponent:**\n   - Opponent says \"Go Fish.\" The requester draws the top card from the stock pile. If the drawn card completes a book, it can be immediately revealed.\n   - **Psychological and Strategic Element:** Opponents might be tricked into assuming player hands based on their requests, impacting future decisions.\n4. **Book Declaration:**\n   - Whenever four of a kind is collected, it is shown to all and recorded.\n\n#### **Winning Conditions:**\n- The game concludes when all thirteen books are formed.\n- The player with the most books wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Intentional Misdirection:** Players can strategically request ranks they do not hold, potentially misleading opponents into erroneous conclusions or actions.\n- **Continuation of Turn:** Acquisition of requested cards, regardless of initial possession, grants an additional request.\n- **Impact of Strategy:** Players need to weigh the risk of misleading others versus revealing true card needs.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Current and all prior book declarations.\n- Total cards in each player\u2019s hand remain private.\n- Turn actions and any transfers of cards.\n\n#### **Hidden Information:**\n- Exact contents of opponents' hands are unknown.\n- The remaining stock pile content.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Only the number of books collected matters.\n- Highest number of books collected determines the winner, illustrating a balance between skillful misdirection and effective collection. \n\nThis refined version emphasizes the integration of strategic misdirection while clarifying the mechanic's impact on turn continuation and psychological gameplay. It highlights the changes from the traditional Go Fish rules to ensure the new strategic depth is understood and engaging.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"is_over\": false, \"facedown_cards\": {\"stock_size\": 27}, \"faceup_cards\": {\"books_collected\": {\"0\": [], \"1\": [], \"2\": [], \"3\": []}, \"turn_actions\": [{\"requester\": 0, \"target\": 2, \"rank\": \"J\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 1, \"target\": 0, \"rank\": \"7\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 2, \"target\": 0, \"rank\": \"8\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 3, \"target\": 2, \"rank\": \"5\", \"result\": \"success\", \"count\": 2}, {\"requester\": 3, \"target\": 1, \"rank\": \"K\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 0, \"target\": 3, \"rank\": \"A\", \"result\": \"fail\", \"count\": 0}]}}, \"players\": [{\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"3\", \"id\": 50}, {\"rank\": \"A\", \"id\": 26}, {\"rank\": \"4\", \"id\": 10}, {\"rank\": \"8\", \"id\": 45}, {\"rank\": \"10\", \"id\": 4}, {\"rank\": \"Q\", \"id\": 15}]}}, {\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, \"msg\": \"Player 1 decides to: request-(target_player: 0, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 1 requests 7 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '7' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, \"msg\": \"Player 2 decides to: request-(target_player: 0, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 2 requests 8 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '8' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 35}, \"msg\": \"Player 3 decides to: request-(target_player: 2, rank: 5)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests 5 from Player 2.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gives 2 '5' card(s) to Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"K\"}, \"id\": 14}, \"msg\": \"Player 3 decides to: request-(target_player: 1, rank: K)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests K from Player 1.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 has no 'K' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, \"msg\": \"Player 0 decides to: request-(target_player: 3, rank: A)\"}, {\"type\": \"info\", \"msg\": \"Player 0 requests A from Player 3.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 has no 'A' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"A\"}, \"id\": 0}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"K\"}, \"id\": 1}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"Q\"}, \"id\": 2}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"J\"}, \"id\": 3}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"10\"}, \"id\": 4}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"9\"}, \"id\": 5}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"6\"}, \"id\": 8}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"5\"}, \"id\": 9}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"4\"}, \"id\": 10}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"3\"}, \"id\": 11}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"2\"}, \"id\": 12}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"A\"}, \"id\": 13}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"K\"}, \"id\": 14}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"Q\"}, \"id\": 15}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"J\"}, \"id\": 16}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"10\"}, \"id\": 17}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"9\"}, \"id\": 18}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"8\"}, \"id\": 19}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"7\"}, \"id\": 20}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"6\"}, \"id\": 21}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 22}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"4\"}, \"id\": 23}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"3\"}, \"id\": 24}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"2\"}, \"id\": 25}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"K\"}, \"id\": 27}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"Q\"}, \"id\": 28}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"J\"}, \"id\": 29}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"10\"}, \"id\": 30}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"9\"}, \"id\": 31}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"8\"}, \"id\": 32}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"7\"}, \"id\": 33}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"6\"}, \"id\": 34}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"5\"}, \"id\": 35}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"4\"}, \"id\": 36}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"3\"}, \"id\": 37}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"2\"}, \"id\": 38}]}\n\nExplanation: \n{\"common\": \"This section contains game-wide common information that is shared among all players.\", \"common.num_players\": \"The total number of players in the game, in this case, 4.\", \"common.current_player\": \"The ID of the player whose turn it currently is, here it is player 1.\", \"common.is_over\": \"A boolean value indicating whether the game is over. In this state, it is false.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stockpile, currently 27.\", \"common.faceup_cards.books_collected\": \"A dictionary where keys are player IDs and values are lists of ranks for which each player has collected a book of 4 cards.\", \"common.faceup_cards.turn_actions\": \"A list of actions taken during turns, describing requests made by players, including the requester, target player, requested rank, result of the request, and count of transferred cards, if any.\", \"players\": \"This section contains information specific to each player.\", \"players[].public.revealed_books\": \"A list of ranks for which the player has revealed books.\", \"players[].public.current_player\": \"A boolean indicating whether the player is the current player.\", \"players[].private.hand\": \"A list of dictionaries representing the cards in the player's hand, each with a rank and unique ID.\", \"recent_history\": \"A sequential list of recent actions and events that have occurred in the game, including player actions, informational messages, and turn-end markers.\", \"recent_history[].type\": \"The type of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of the player associated with the action, if applicable.\", \"recent_history[].action\": \"For actions, this provides the details of the action including type and arguments.\", \"recent_history[].msg\": \"Human-readable description of the event or action.\", \"recent_history[].role\": \"Currently null, potentially indicating a placeholder for message role (e.g., player or system).\", \"legal_actions\": \"A list of dictionaries where each dictionary describes a legal action the current player can take. Each action includes arguments for the target player and the rank being requested.\", \"legal_actions[].action\": \"The type of action, always 'request' in this case.\", \"legal_actions[].args.target_player\": \"The ID of the player being targeted by the request.\", \"legal_actions[].args.rank\": \"The rank of the card being requested.\", \"legal_actions[].id\": \"A unique identifier for the action.\"}",
    "policy_list": [
        "**Calculated Misdirection**\nRequest card ranks that you do not possess, but that may be suspected to be held by opponents, based on previous actions.",
        "**Memory Utilization**\nKeep track of all revealed books and card exchanges to deduce likely distributions of remaining cards.",
        "**Aggressive Book Completion**\nFocus on completing books rapidly by frequently requesting cards or drawing from the stock to maximize book declarations.",
        "**Adapting to Opponent Patterns**\nObserve and adapt to patterns in opponents\u2019 requests and responses to anticipate their strategies and potential holdings."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def calculate_probable_ranks(player_id, recent_history):\n        # Count requests and successes in recent history for a player\n        request_counts = {}\n        for entry in recent_history:\n            if entry[\"type\"] == \"action\" and entry[\"player_id\"] == player_id:\n                rank = entry[\"action\"][\"args\"][\"rank\"]\n                if rank in request_counts:\n                    request_counts[rank][0] += 1\n                else:\n                    request_counts[rank] = [1, 0]\n            elif entry[\"type\"] == \"info\" and \"gives\" in entry[\"msg\"]:\n                requester = int(entry[\"msg\"].split(\" \")[1])\n                rank = entry[\"msg\"].split(\"'\")[1]\n                if requester == player_id and rank in request_counts:\n                    request_counts[rank][1] += 1\n\n        # Calculate a 'confidence' score for each rank based on request to success ratio\n        rank_confidence = {}\n        for rank, counts in request_counts.items():\n            total_requests, successes = counts\n            # Confidence is higher if the rank was successfully requested often\n            rank_confidence[rank] = successes / total_requests if total_requests > 0 else 0\n\n        return rank_confidence\n\n    def action_value_based_on_confidence(action, rank_confidence):\n        requested_rank = action[\"args\"][\"rank\"]\n        value = rank_confidence.get(requested_rank, 0)\n        return value\n\n    # Extract necessary data\n    current_player = state[\"common\"][\"current_player\"]\n    recent_history = state.get(\"recent_history\", [])\n    legal_actions = state.get(\"legal_actions\", [])\n\n    # Get confidence levels for all the ranks based on the recent history\n    rank_confidence = calculate_probable_ranks(current_player, recent_history)\n\n    # Assess the potential success of the given action based on calculated probabilities\n    action_value = action_value_based_on_confidence(action, rank_confidence)\n\n    # Consider stock size and number of books as additional factors for estimating winning probability\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n    books_collected = len(state[\"players\"][current_player][\"public\"][\"revealed_books\"])\n    total_books_possible = 13\n\n    # Lower stock size and higher books increase the winning probability\n    stock_factor = 1 - (stock_size / 52)\n    book_filled_factor = books_collected / total_books_possible\n\n    # Compute the final reward as a weighted sum\n    result_score = 0.4 * action_value + 0.3 * stock_factor + 0.3 * book_filled_factor\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n    \n    num_players = state['common']['num_players']\n    current_player = state['common']['current_player']\n    stock_size = state['common']['facedown_cards']['stock_size']\n    books_collected = state['common']['faceup_cards']['books_collected']\n    previous_actions = state['common']['faceup_cards']['turn_actions']\n    hand = state['players'][current_player]['private']['hand']\n    legal_actions = state['legal_actions']\n    \n    # Extract action details\n    target_player = action['args']['target_player']\n    requested_rank = action['args']['rank']\n    \n    # Count the number of books collected by the current player\n    current_player_books = len(books_collected[str(current_player)])\n\n    # Check if requested rank is in hand\n    rank_in_hand = any(card['rank'] == requested_rank for card in hand)\n    \n    # Check opponent's likelihood of having the rank based on previous actions\n    opponent_actions = [a for a in previous_actions if a['target'] == current_player and a['rank'] == requested_rank]\n    opponent_likelihood = max(0.1, 0.5 - 0.1 * len(opponent_actions))\n    \n    # Calculate the potential score\n    if rank_in_hand:\n        # If the rank is in the player's hand, they are likely to attempt book completion\n        potential_score = 0.7\n    else:\n        # Bluff strategy and stock draw probability\n        bluff_factor = 0.3\n        draw_probability = 1 / (stock_size + num_players - 1)\n        \n        # Dynamic score based on potential success in bluff or draw\n        potential_score = bluff_factor * opponent_likelihood + (1 - bluff_factor) * draw_probability\n\n    # Adjust score based on books collected advantage\n    book_advantage = current_player_books / (13 / num_players)\n    result_score = min(max(potential_score + book_advantage, 0), 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def check_book_potential(hand, requested_rank):\n        count = 0\n        for card in hand:\n            if card['rank'] == requested_rank:\n                count += 1\n        return count / 4\n    \n    def evaluate_action_contribution(action, player_hand):\n        requested_rank = action['args']['rank']\n        target_player = action['args']['target_player']\n        \n        # Check if requesting this rank has potential to complete a book\n        book_potential = check_book_potential(player_hand, requested_rank)\n        \n        # Factor considering number of books already collected by the requesting player\n        books_collected = len(state['common']['faceup_cards']['books_collected'][str(state['common']['current_player'])])\n        books_factor = books_collected / 13  # Total books possible in the game are 13\n        \n        # Consider opponent's apparent lack of the card based on recent history\n        opponent_has_previous_fails = 0\n        for action in state['common']['faceup_cards']['turn_actions']:\n            if action['target'] == target_player and action['rank'] == requested_rank and action['result'] == \"fail\":\n                opponent_has_previous_fails += 1\n        \n        # Factor based on stockpile size: more cards in stockpile, less chance opponent has that card\n        stock_fish_factor = state['common']['facedown_cards']['stock_size'] / 52\n        \n        # Combine factors to estimate win probability contribution for this move\n        score = (\n            0.5 * book_potential + \n            0.2 * books_factor + \n            0.1 * opponent_has_previous_fails +\n            0.2 * (1 - stock_fish_factor)\n        )\n        \n        # Ensure score is within 0 to 1\n        return max(0, min(1, score))\n    \n    # Retrieve the current player's hand\n    current_player_id = state['common']['current_player']\n    player_hand = state['players'][current_player_id]['private']['hand']\n    \n    # Evaluate the given action based on state and the player's strategy\n    result_score = evaluate_action_contribution(action, player_hand)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize variables for evaluation\n    current_player_id = state[\"common\"][\"current_player\"]\n    current_player_hand = state[\"players\"][current_player_id][\"private\"][\"hand\"]\n    current_player_books = state[\"players\"][current_player_id][\"public\"][\"revealed_books\"]\n    recent_history = state[\"recent_history\"]\n    \n    # Extract action details\n    target_player = action[\"args\"][\"target_player\"]\n    requested_rank = action[\"args\"][\"rank\"]\n    \n    # Calculate the likelihood of success\n    hand_ranks = {card[\"rank\"] for card in current_player_hand}\n    potential_books = set(current_player_books)\n    recent_requests = [entry for entry in recent_history if entry[\"type\"] == \"action\" and entry[\"player_id\"] == target_player]\n    \n    # Estimate based on current hand and known patterns\n    RANK_IMPORTANCE = 0.6\n    OPPONENT_PATTERNS = 0.3\n    POSITIONAL_ADVANTAGE = 0.1\n    \n    result_score = 0.0\n    \n    # Consider rank already in hand: priority to complete books\n    if requested_rank in hand_ranks:\n        result_score += RANK_IMPORTANCE\n    \n    # Check if previous successful requests involved this rank or player\n    for request in recent_requests:\n        if request[\"action\"][\"args\"][\"rank\"] == requested_rank and request[\"action\"][\"args\"][\"target_player\"] == current_player_id:\n            result_score += OPPONENT_PATTERNS\n    \n    # Positional advantage if low number of stockpile remains\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n    if stock_size < 10: # Low stock, more advantage to hold cards/complete books\n        result_score += POSITIONAL_ADVANTAGE\n    \n    # Normalize the score to be between 0 and 1\n    result_score = min(max(result_score, 0.0), 1.0)\n    return result_score\n"
    ]
}