{
    "game_description": "## Go Fish: Misdirection Edition - Refined Game Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards are face down at the center of the table; the number of remaining cards is known, but not their identities.\n- **Books Collected:** All completed sets of four cards of the same rank are visible to all players.\n- **Turn Information:** Current player and sequence visible to all players.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Revealed Books:** Sets of four cards collected by each player.\n  - **Turn Actions:** Requests made and cards drawn or exchanged by players.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to the player.\n  \n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2}.\n- **Suit:** Irrelevant in this game. \n- **Special Abilities:** None directly, but ranks are part of strategic misdirection.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with only rank considerations.\n\n#### **Initial Dealing:**\n- **2-3 Players:** Each player receives 7 cards.\n- **4-5 Players:** Each player receives 5 cards.\n- Remaining cards form the stock pile at the center.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Request a Card Rank:**\n   - Ask any opponent for a specific card rank.\n   - **Misdirection Allowed:** Players can request any rank, regardless of whether they possess it or not, introducing a strategic element of bluffing.\n2. **Receive Cards if Available:**\n   - The opponent must hand over all cards of the requested rank. The requester's turn continues.\n3. **Draw from Stock:**\n   - If the opponent doesn't have the cards, the requester draws one card from the stock pile.\n4. **Reveal a Book:**\n   - Show and remove four of a kind from their hand, declaring a collected book.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player selects an opponent and requests a rank.\n2. **If Rank Exists with Opponent:**\n   - Cards of that rank are handed over to the requester. The requester's turn continues regardless of prior card possession.\n3. **If Rank Not with Opponent:**\n   - Opponent says \"Go Fish.\" The requester draws the top card from the stock pile. If the drawn card completes a book, it can be immediately revealed.\n   - **Psychological and Strategic Element:** Opponents might be tricked into assuming player hands based on their requests, impacting future decisions.\n4. **Book Declaration:**\n   - Whenever four of a kind is collected, it is shown to all and recorded.\n\n#### **Winning Conditions:**\n- The game concludes when all thirteen books are formed.\n- The player with the most books wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Intentional Misdirection:** Players can strategically request ranks they do not hold, potentially misleading opponents into erroneous conclusions or actions.\n- **Continuation of Turn:** Acquisition of requested cards, regardless of initial possession, grants an additional request.\n- **Impact of Strategy:** Players need to weigh the risk of misleading others versus revealing true card needs.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Current and all prior book declarations.\n- Total cards in each player\u2019s hand remain private.\n- Turn actions and any transfers of cards.\n\n#### **Hidden Information:**\n- Exact contents of opponents' hands are unknown.\n- The remaining stock pile content.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Only the number of books collected matters.\n- Highest number of books collected determines the winner, illustrating a balance between skillful misdirection and effective collection. \n\nThis refined version emphasizes the integration of strategic misdirection while clarifying the mechanic's impact on turn continuation and psychological gameplay. It highlights the changes from the traditional Go Fish rules to ensure the new strategic depth is understood and engaging.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"is_over\": false, \"facedown_cards\": {\"stock_size\": 27}, \"faceup_cards\": {\"books_collected\": {\"0\": [], \"1\": [], \"2\": [], \"3\": []}, \"turn_actions\": [{\"requester\": 0, \"target\": 2, \"rank\": \"J\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 1, \"target\": 0, \"rank\": \"7\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 2, \"target\": 0, \"rank\": \"8\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 3, \"target\": 2, \"rank\": \"5\", \"result\": \"success\", \"count\": 2}, {\"requester\": 3, \"target\": 1, \"rank\": \"K\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 0, \"target\": 3, \"rank\": \"A\", \"result\": \"fail\", \"count\": 0}]}}, \"players\": [{\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"3\", \"id\": 50}, {\"rank\": \"A\", \"id\": 26}, {\"rank\": \"4\", \"id\": 10}, {\"rank\": \"8\", \"id\": 45}, {\"rank\": \"10\", \"id\": 4}, {\"rank\": \"Q\", \"id\": 15}]}}, {\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, \"msg\": \"Player 1 decides to: request-(target_player: 0, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 1 requests 7 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '7' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, \"msg\": \"Player 2 decides to: request-(target_player: 0, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 2 requests 8 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '8' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 35}, \"msg\": \"Player 3 decides to: request-(target_player: 2, rank: 5)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests 5 from Player 2.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gives 2 '5' card(s) to Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"K\"}, \"id\": 14}, \"msg\": \"Player 3 decides to: request-(target_player: 1, rank: K)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests K from Player 1.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 has no 'K' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, \"msg\": \"Player 0 decides to: request-(target_player: 3, rank: A)\"}, {\"type\": \"info\", \"msg\": \"Player 0 requests A from Player 3.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 has no 'A' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"A\"}, \"id\": 0}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"K\"}, \"id\": 1}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"Q\"}, \"id\": 2}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"J\"}, \"id\": 3}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"10\"}, \"id\": 4}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"9\"}, \"id\": 5}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"6\"}, \"id\": 8}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"5\"}, \"id\": 9}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"4\"}, \"id\": 10}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"3\"}, \"id\": 11}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"2\"}, \"id\": 12}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"A\"}, \"id\": 13}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"K\"}, \"id\": 14}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"Q\"}, \"id\": 15}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"J\"}, \"id\": 16}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"10\"}, \"id\": 17}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"9\"}, \"id\": 18}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"8\"}, \"id\": 19}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"7\"}, \"id\": 20}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"6\"}, \"id\": 21}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 22}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"4\"}, \"id\": 23}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"3\"}, \"id\": 24}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"2\"}, \"id\": 25}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"K\"}, \"id\": 27}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"Q\"}, \"id\": 28}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"J\"}, \"id\": 29}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"10\"}, \"id\": 30}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"9\"}, \"id\": 31}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"8\"}, \"id\": 32}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"7\"}, \"id\": 33}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"6\"}, \"id\": 34}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"5\"}, \"id\": 35}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"4\"}, \"id\": 36}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"3\"}, \"id\": 37}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"2\"}, \"id\": 38}]}\n\nExplanation: \n{\"common\": \"This section contains game-wide common information that is shared among all players.\", \"common.num_players\": \"The total number of players in the game, in this case, 4.\", \"common.current_player\": \"The ID of the player whose turn it currently is, here it is player 1.\", \"common.is_over\": \"A boolean value indicating whether the game is over. In this state, it is false.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stockpile, currently 27.\", \"common.faceup_cards.books_collected\": \"A dictionary where keys are player IDs and values are lists of ranks for which each player has collected a book of 4 cards.\", \"common.faceup_cards.turn_actions\": \"A list of actions taken during turns, describing requests made by players, including the requester, target player, requested rank, result of the request, and count of transferred cards, if any.\", \"players\": \"This section contains information specific to each player.\", \"players[].public.revealed_books\": \"A list of ranks for which the player has revealed books.\", \"players[].public.current_player\": \"A boolean indicating whether the player is the current player.\", \"players[].private.hand\": \"A list of dictionaries representing the cards in the player's hand, each with a rank and unique ID.\", \"recent_history\": \"A sequential list of recent actions and events that have occurred in the game, including player actions, informational messages, and turn-end markers.\", \"recent_history[].type\": \"The type of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of the player associated with the action, if applicable.\", \"recent_history[].action\": \"For actions, this provides the details of the action including type and arguments.\", \"recent_history[].msg\": \"Human-readable description of the event or action.\", \"recent_history[].role\": \"Currently null, potentially indicating a placeholder for message role (e.g., player or system).\", \"legal_actions\": \"A list of dictionaries where each dictionary describes a legal action the current player can take. Each action includes arguments for the target player and the rank being requested.\", \"legal_actions[].action\": \"The type of action, always 'request' in this case.\", \"legal_actions[].args.target_player\": \"The ID of the player being targeted by the request.\", \"legal_actions[].args.rank\": \"The rank of the card being requested.\", \"legal_actions[].id\": \"A unique identifier for the action.\"}",
    "policy_list": [
        "**Calculated Misdirection and Information Gathering**\nThis strategy involves a combination of bluffing and targeted requests to gather information and build books efficiently. Start with card ranks you have to attempt to complete books, but occasionally, request cards you do not have to sow confusion and gather more intel on where cards might be. Pay close attention to opponents' actions to deduce what they may be holding. Allocate requests based on maximizing potential gain and minimizing risk of giving away information. Always prioritize completing books to gain visible points and reduce your hand size strategically."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common variables\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n    \n    # Extract current player's information\n    player_hand = state[\"players\"][current_player][\"private\"][\"hand\"]\n    revealed_books = state[\"players\"][current_player][\"public\"][\"revealed_books\"]\n    \n    # Extract action variables\n    action_rank = action[\"args\"][\"rank\"]\n    target_player = action[\"args\"][\"target_player\"]\n    \n    # Calculate the number of cards of the requested rank in hand\n    num_in_hand = sum(1 for card in player_hand if card[\"rank\"] == action_rank)\n    \n    # Calculate basic parameters\n    max_possible_score = 13  # Max books possible\n    current_score = len(revealed_books)\n    \n    # Check opponents' history for clues about the rank\n    opponent_actions = state[\"common\"][\"faceup_cards\"][\"turn_actions\"]\n    opponent_requests = [act for act in opponent_actions if act['target'] == current_player]\n    rank_knowledge = any(act[\"rank\"] == action_rank and act[\"result\"] == \"success\" for act in opponent_requests)\n    \n    # Prioritize actions based on:\n    # - Trying to complete a book\n    # - Disguising intentions\n    \n    is_misdirection = num_in_hand == 0\n    potential_books_if_success = (num_in_hand + 1) // 4\n    \n    # Base score on book potential and stock size\n    score = (current_score + potential_books_if_success) / max_possible_score\n    \n    # Enhance score if it involves misdirection that gives insight\n    if is_misdirection:\n        score *= 0.8\n    \n    # Reduce score due to remaining unclaimed books potentially indicating incomplete information\n    unseen_books_ratio = (13 - len(state[\"common\"][\"faceup_cards\"][\"books_collected\"])) / 13\n    score *= unseen_books_ratio\n    \n    # Adjust score based on rank knowledge of opponents (if they know the player has requested earlier)\n    if rank_knowledge:\n        score *= 0.7\n\n    # Normalize final score between 0 and 1\n    result_score = max(0.0, min(1.0, score))\n    \n    return result_score\n"
    ]
}