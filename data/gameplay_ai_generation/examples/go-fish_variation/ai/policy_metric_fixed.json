{
    "game_description": "## Go Fish: Misdirection Edition - Refined Game Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards are face down at the center of the table; the number of remaining cards is known, but not their identities.\n- **Books Collected:** All completed sets of four cards of the same rank are visible to all players.\n- **Turn Information:** Current player and sequence visible to all players.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Revealed Books:** Sets of four cards collected by each player.\n  - **Turn Actions:** Requests made and cards drawn or exchanged by players.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to the player.\n  \n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2}.\n- **Suit:** Irrelevant in this game. \n- **Special Abilities:** None directly, but ranks are part of strategic misdirection.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with only rank considerations.\n\n#### **Initial Dealing:**\n- **2-3 Players:** Each player receives 7 cards.\n- **4-5 Players:** Each player receives 5 cards.\n- Remaining cards form the stock pile at the center.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Request a Card Rank:**\n   - Ask any opponent for a specific card rank.\n   - **Misdirection Allowed:** Players can request any rank, regardless of whether they possess it or not, introducing a strategic element of bluffing.\n2. **Receive Cards if Available:**\n   - The opponent must hand over all cards of the requested rank. The requester's turn continues.\n3. **Draw from Stock:**\n   - If the opponent doesn't have the cards, the requester draws one card from the stock pile.\n4. **Reveal a Book:**\n   - Show and remove four of a kind from their hand, declaring a collected book.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player selects an opponent and requests a rank.\n2. **If Rank Exists with Opponent:**\n   - Cards of that rank are handed over to the requester. The requester's turn continues regardless of prior card possession.\n3. **If Rank Not with Opponent:**\n   - Opponent says \"Go Fish.\" The requester draws the top card from the stock pile. If the drawn card completes a book, it can be immediately revealed.\n   - **Psychological and Strategic Element:** Opponents might be tricked into assuming player hands based on their requests, impacting future decisions.\n4. **Book Declaration:**\n   - Whenever four of a kind is collected, it is shown to all and recorded.\n\n#### **Winning Conditions:**\n- The game concludes when all thirteen books are formed.\n- The player with the most books wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Intentional Misdirection:** Players can strategically request ranks they do not hold, potentially misleading opponents into erroneous conclusions or actions.\n- **Continuation of Turn:** Acquisition of requested cards, regardless of initial possession, grants an additional request.\n- **Impact of Strategy:** Players need to weigh the risk of misleading others versus revealing true card needs.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Current and all prior book declarations.\n- Total cards in each player\u2019s hand remain private.\n- Turn actions and any transfers of cards.\n\n#### **Hidden Information:**\n- Exact contents of opponents' hands are unknown.\n- The remaining stock pile content.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Only the number of books collected matters.\n- Highest number of books collected determines the winner, illustrating a balance between skillful misdirection and effective collection. \n\nThis refined version emphasizes the integration of strategic misdirection while clarifying the mechanic's impact on turn continuation and psychological gameplay. It highlights the changes from the traditional Go Fish rules to ensure the new strategic depth is understood and engaging.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"is_over\": false, \"facedown_cards\": {\"stock_size\": 27}, \"faceup_cards\": {\"books_collected\": {\"0\": [], \"1\": [], \"2\": [], \"3\": []}, \"turn_actions\": [{\"requester\": 0, \"target\": 2, \"rank\": \"J\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 1, \"target\": 0, \"rank\": \"7\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 2, \"target\": 0, \"rank\": \"8\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 3, \"target\": 2, \"rank\": \"5\", \"result\": \"success\", \"count\": 2}, {\"requester\": 3, \"target\": 1, \"rank\": \"K\", \"result\": \"fail\", \"count\": 0}, {\"requester\": 0, \"target\": 3, \"rank\": \"A\", \"result\": \"fail\", \"count\": 0}]}}, \"players\": [{\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"3\", \"id\": 50}, {\"rank\": \"A\", \"id\": 26}, {\"rank\": \"4\", \"id\": 10}, {\"rank\": \"8\", \"id\": 45}, {\"rank\": \"10\", \"id\": 4}, {\"rank\": \"Q\", \"id\": 15}]}}, {\"public\": {\"revealed_books\": []}}, {\"public\": {\"revealed_books\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, \"msg\": \"Player 1 decides to: request-(target_player: 0, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 1 requests 7 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '7' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, \"msg\": \"Player 2 decides to: request-(target_player: 0, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 2 requests 8 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 has no '8' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 35}, \"msg\": \"Player 3 decides to: request-(target_player: 2, rank: 5)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests 5 from Player 2.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gives 2 '5' card(s) to Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"K\"}, \"id\": 14}, \"msg\": \"Player 3 decides to: request-(target_player: 1, rank: K)\"}, {\"type\": \"info\", \"msg\": \"Player 3 requests K from Player 1.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 has no 'K' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 draws a card from stock.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, \"msg\": \"Player 0 decides to: request-(target_player: 3, rank: A)\"}, {\"type\": \"info\", \"msg\": \"Player 0 requests A from Player 3.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 has no 'A' card. Go Fish!\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"A\"}, \"id\": 0}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"K\"}, \"id\": 1}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"Q\"}, \"id\": 2}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"J\"}, \"id\": 3}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"10\"}, \"id\": 4}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"9\"}, \"id\": 5}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"8\"}, \"id\": 6}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 7}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"6\"}, \"id\": 8}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"5\"}, \"id\": 9}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"4\"}, \"id\": 10}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"3\"}, \"id\": 11}, {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"2\"}, \"id\": 12}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"A\"}, \"id\": 13}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"K\"}, \"id\": 14}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"Q\"}, \"id\": 15}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"J\"}, \"id\": 16}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"10\"}, \"id\": 17}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"9\"}, \"id\": 18}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"8\"}, \"id\": 19}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"7\"}, \"id\": 20}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"6\"}, \"id\": 21}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"5\"}, \"id\": 22}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"4\"}, \"id\": 23}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"3\"}, \"id\": 24}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"2\"}, \"id\": 25}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"A\"}, \"id\": 26}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"K\"}, \"id\": 27}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"Q\"}, \"id\": 28}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"J\"}, \"id\": 29}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"10\"}, \"id\": 30}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"9\"}, \"id\": 31}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"8\"}, \"id\": 32}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"7\"}, \"id\": 33}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"6\"}, \"id\": 34}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"5\"}, \"id\": 35}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"4\"}, \"id\": 36}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"3\"}, \"id\": 37}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"2\"}, \"id\": 38}]}\n\nExplanation: \n{\"common\": \"This section contains game-wide common information that is shared among all players.\", \"common.num_players\": \"The total number of players in the game, in this case, 4.\", \"common.current_player\": \"The ID of the player whose turn it currently is, here it is player 1.\", \"common.is_over\": \"A boolean value indicating whether the game is over. In this state, it is false.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stockpile, currently 27.\", \"common.faceup_cards.books_collected\": \"A dictionary where keys are player IDs and values are lists of ranks for which each player has collected a book of 4 cards.\", \"common.faceup_cards.turn_actions\": \"A list of actions taken during turns, describing requests made by players, including the requester, target player, requested rank, result of the request, and count of transferred cards, if any.\", \"players\": \"This section contains information specific to each player.\", \"players[].public.revealed_books\": \"A list of ranks for which the player has revealed books.\", \"players[].public.current_player\": \"A boolean indicating whether the player is the current player.\", \"players[].private.hand\": \"A list of dictionaries representing the cards in the player's hand, each with a rank and unique ID.\", \"recent_history\": \"A sequential list of recent actions and events that have occurred in the game, including player actions, informational messages, and turn-end markers.\", \"recent_history[].type\": \"The type of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of the player associated with the action, if applicable.\", \"recent_history[].action\": \"For actions, this provides the details of the action including type and arguments.\", \"recent_history[].msg\": \"Human-readable description of the event or action.\", \"recent_history[].role\": \"Currently null, potentially indicating a placeholder for message role (e.g., player or system).\", \"legal_actions\": \"A list of dictionaries where each dictionary describes a legal action the current player can take. Each action includes arguments for the target player and the rank being requested.\", \"legal_actions[].action\": \"The type of action, always 'request' in this case.\", \"legal_actions[].args.target_player\": \"The ID of the player being targeted by the request.\", \"legal_actions[].args.rank\": \"The rank of the card being requested.\", \"legal_actions[].id\": \"A unique identifier for the action.\"}",
    "policy_list": [
        "**Expected Gain from Card Request**\nEstimate the likelihood of successfully receiving cards of the requested rank based on prior game actions and the current state of the player's hand. Higher probability increases the metric value, rewarding strategic requests.",
        "**Strategic Misdirection Value**\nMeasure the potential benefit of misleading opponents by requesting ranks not in the player's hand. Evaluate based on opponent behavior models and game history, aiming to influence opponents' perceptions effectively.",
        "**Stock Pile Dependency**\nQuantify the impact of relying on drawing from the stock pile. Lower dependency (fewer necessary draws) on the stock pile is favorable as it decreases randomness in play, highlighting strategic advantage.",
        "**Book Completion Potential**\nAssess the proximity to completing books with available cards and identified opportunities. This should account for the number of cards needed and the known dispositions of opponents' hands through observation."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Estimate the expected gain from a card request in the Go Fish game.\n\n    :param state: A dictionary representing the current state of the game.\n    :param action: A dictionary representing a planned action with the structure:\n                   {\"action\": \"request\", \"args\": {\"target_player\": int, \"rank\": str}, \"id\": int}\n    :return: A float between 0 and 1 representing the probability of winning the game.\n    \"\"\"\n    \n    # Extract relevant information from the state\n    current_player_id = state[\"common\"][\"current_player\"]\n    num_players = state[\"common\"][\"num_players\"]\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n    books_collected = state[\"common\"][\"faceup_cards\"][\"books_collected\"]\n    turn_actions = state[\"common\"][\"faceup_cards\"][\"turn_actions\"]\n    player_hand = {card['rank'] for card in state['players'][current_player_id]['private']['hand']}\n\n    # Get details of the proposed action\n    target_player = action[\"args\"][\"target_player\"]\n    requested_rank = action[\"args\"][\"rank\"]\n\n    # Initialize scoring components\n    rank_in_hand_score = 0.0\n    past_request_success_score = 0.0\n    potential_misdirection_score = 0.0\n    collected_books_score = 0.0\n    stock_factor_score = 0.0\n\n    # Scoring based on if the rank is in the player's hand\n    if requested_rank in player_hand:\n        rank_in_hand_score = 0.3  # Confidence as they hold the requested rank\n\n    # Analyze past success requesting this rank\n    past_successful_requests = [\n        action for action in turn_actions\n        if action[\"requester\"] == current_player_id and\n        action[\"rank\"] == requested_rank and\n        action[\"result\"] == \"success\"\n    ]\n    if past_successful_requests:\n        past_request_success_score = 0.2 + len(past_successful_requests) * 0.1\n    else:\n        past_failures = [\n            action for action in turn_actions\n            if action[\"requester\"] == current_player_id and\n            action[\"rank\"] == requested_rank and\n            action[\"result\"] == \"fail\"\n        ]\n        past_request_success_score -= len(past_failures) * 0.1\n\n    # Potential misdirection benefit\n    potential_misdirection_score = 0.1 / (num_players - 1)  # Dilution by dividing across opponents\n\n    # Benefit from collected books\n    num_books_collected_by_current_player = len(books_collected[current_player_id])\n    collected_books_score = num_books_collected_by_current_player * 0.05\n\n    # Stockpile factor - less impact by endgame approaches\n    stock_factor_score = (1.0 - (stock_size / 52.0)) * 0.1\n\n    # Calculate the total score\n    result_score = rank_in_hand_score + past_request_success_score + \\\n                   potential_misdirection_score + collected_books_score + stock_factor_score\n\n    # Ensure score stays within [0, 1]\n    result_score = min(1.0, max(0.0, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary state information\n    current_player_id = state['common']['current_player']\n    player_hand = {card['rank'] for card in state['players'][current_player_id]['private']['hand']}\n    recent_actions = state.get('recent_history', [])  # Use empty list if 'recent_history' is not in state\n    legal_actions = state['legal_actions']\n    stock_size = state['common']['facedown_cards']['stock_size']\n    \n    # Extract action details\n    target_player = action['args']['target_player']\n    requested_rank = action['args']['rank']\n    \n    # Initialize score with a base strategy\n    result_score = 0.5  # A neutral baseline score\n    \n    # Factor 1: Misdirection incentive\n    # If requested rank is not in hand, it could be used for misdirection\n    if requested_rank not in player_hand:\n        result_score += 0.1\n    \n    # Factor 2: Historical success rate against target player\n    successful_requests = 0\n    total_requests = 0\n    for past_action in recent_actions:\n        if past_action.get('type') == 'action' and past_action['action'].get('action') == 'request':\n            if (past_action['action']['args']['target_player'] == target_player and\n                past_action['action']['args']['rank'] == requested_rank):\n                total_requests += 1\n                if past_action['id'] in [a['id'] for a in legal_actions]:\n                    result = past_action['action'].get('result', None)\n                    if result == 'success':\n                        successful_requests += 1\n\n    # Calculate the success rate of specific requests to the target player\n    if total_requests > 0:\n        success_rate = successful_requests / total_requests\n        result_score += 0.4 * success_rate\n    \n    # Factor 3: Deck and books state - balancing knowns and unknowns\n    unknown_card_factor = stock_size / 52  # Reflect uncertainty from the stock size\n    \n    result_score *= unknown_card_factor\n    \n    # Ensure the score remains within the bounds [0, 1]\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common and player-specific data\n    common = state['common']\n    players = state['players']\n    history = state.get('recent_history', [])\n    stock_size = common['facedown_cards']['stock_size']\n    \n    current_player_id = common['current_player']\n    current_player = players[current_player_id]\n    \n    # Initialize scoring variables\n    success_ratio = 0.0\n    stock_dependency = 0.0\n\n    # Calculate success ratio from history\n    successful_requests = 0\n    total_requests = 0\n    for hist in history:\n        if hist.get(\"type\") == \"action\" and hist[\"player_id\"] == current_player_id:\n            total_requests += 1\n            action_id = hist[\"action\"][\"id\"]\n            # Check if associated successful info is available\n            info_msg = next((act for act in history if act.get(\"type\") == \"info\"\n                             and \"gives\" in act[\"msg\"] and act[\"reference_action_id\"] == action_id), None)\n            if info_msg:\n                successful_requests += 1\n\n    if total_requests > 0:\n        success_ratio = successful_requests / total_requests\n    else:\n        success_ratio = 0.5  # Default success ratio if no requests made yet\n\n    # Consider stock dependency\n    if stock_size > 0:\n        stock_dependency = len(current_player['private']['hand']) / (52 - stock_size)\n    else:\n        stock_dependency = 0\n    \n    # Calculate resulting score\n    result_score = (success_ratio * 0.8) + ((1 - stock_dependency) * 0.2)\n\n    # Normalize the result_score to be between 0 and 1\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def count_needed_for_book(hand, rank):\n        return 4 - sum(1 for card in hand if card['rank'] == rank)\n\n    def evaluate_proximity_to_books(player_hand):\n        rank_counts = {}\n        for card in player_hand:\n            if card['rank'] not in rank_counts:\n                rank_counts[card['rank']] = 0\n            rank_counts[card['rank']] += 1\n        return rank_counts\n\n    def assess_turn_success_probability(action, history, player_id):\n        # Assess probability of target having the requested rank based on past interactions\n        requested_rank = action['args']['rank']\n        target_player = action['args']['target_player']\n        for entry in reversed(history):\n            if entry['requester'] == target_player and entry['rank'] == requested_rank:\n                # If the target has recently asked for this rank, they might have some cards or need it\n                return 0.6\n            elif entry['requester'] == player_id and entry['target'] == target_player and entry['rank'] == requested_rank:\n                # If we have recently asked and failed with this target, adjust downwards\n                return 0.2\n        return 0.4  # Neutral base probability if there's no significant historical interaction data\n\n    def adjust_for_known_books(player_books, known_books, players_count):\n        # Fewer available ranks reduce future book possibilities\n        max_possible_books = 13  # Total ranks (A, K, Q, J, ...9, 8, 7, 6, 5, 4, 3, 2)\n        remaining_books = max_possible_books - sum(len(books) for books in known_books.values())\n\n        return len(player_books) / players_count + (remaining_books / max_possible_books)\n\n    common = state['common']\n    players = state['players']\n    recent_history = common['faceup_cards']['turn_actions']\n    current_player = common['current_player']\n    stock_size = common['facedown_cards']['stock_size']\n    \n    # Get current player's hand and books\n    player_hand = players[current_player]['private']['hand']\n    player_books = players[current_player]['public']['revealed_books']\n    known_books = common['faceup_cards']['books_collected']\n\n    # Evaluate the current hand for potential books\n    rank_counts = evaluate_proximity_to_books(player_hand)\n    requested_rank = action['args']['rank']\n    cards_needed_for_requested_rank = count_needed_for_book(player_hand, requested_rank)\n\n    # Calculate potential for book completion\n    if requested_rank in rank_counts:\n        book_potential = 1.0 - (cards_needed_for_requested_rank / 4.0)\n    else:\n        book_potential = 0.0\n\n    # Assess probability of success for the current action\n    action_success_prob = assess_turn_success_probability(action, recent_history, current_player)\n\n    # Combine chances, weighing more towards potential new books\n    base_probability = book_potential * action_success_prob\n\n    # Adjust based on overall known book progress and competition\n    competitiveness_adjustment = adjust_for_known_books(player_books, known_books, common['num_players'])\n\n    # Calculate final score\n    result_score = 0.6 * base_probability + 0.4 * competitiveness_adjustment\n\n    # Ensure the score is between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n"
    ]
}