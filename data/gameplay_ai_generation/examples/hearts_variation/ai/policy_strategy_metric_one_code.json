{
    "game_description": "# Hearts of Time Game System Ruleset (Refined)\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Trick History:** Sequence of played cards in each trick, visible to all players.\n- **Current Leader:** Player who won the last trick, visible to all players.\n- **Turn Information:** Current player and actions taken during the turn.\n- **Player Order:** Logical order of play, visible to all players.\n\n#### **Player-Specific Information:**\n- **Public**:\n  - **Scores:** Current interference (disturbance scores) known at all times.\n  - **Trick Wins:** Number of tricks each player has won.\n- **Private**:\n  - **Player Hand:** Cards held by the player.\n  - **Temporal Suit Shift Status:** Whether the player has used their shift ability.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** From 2 to Ace.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Cards:**\n  - **Queen of Spades:** 13 points of disturbance.\n  - **Hearts:** Each incurs 1 point of disturbance.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck divided into four suits.\n\n#### **Initial Dealing:**\n- **4 Players:** Each player receives 13 cards.\n- Other player counts require deck adjustment by removing low-ranking cards, maintaining suit balance.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Lead a Trick:**\n   - Play any card from their hand.\n   - Pre-requisite: Must follow suit, unless void in that suit.\n2. **Follow a Trick:**\n   - Play a card matching the led suit, if possible.\n   - Else, play any card.\n3. **Declare Temporal Suit Shift:**\n   - Announce the shift of rule for a trick to establish a temporary trump suit. This can be declared before playing any card during a player's turn.\n   - Pre-requisite: Can only be used once per game per player.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player with the 2 of Clubs starts the first trick.\n2. Players take turns in clockwise order, leading with the suit following rules.\n3. Each trick consists of:\n   - Playing cards in the order of player turns.\n   - Using Temporal Suit Shift if strategically advantageous. When declared, the player's chosen suit acts as trump for that entire trick.\n4. The winner of a trick leads the next trick.\n5. Play continues until all cards have been played.\n\n#### **Winning Conditions:**\n- Game ends when a player reaches a preset disturbance threshold (commonly 100 points).\n- Player with the lowest disturbance score wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **No Hearts or Queen of Spades First Trick:** During the first trick, players must avoid playing hearts or the Queen of Spades unless they have no alternative.\n- **Shooting the Moon:** Capturing all Hearts and Queen of Spades reduces disturbance to zero for that round, increasing opponents' scores by 26 points.\n- **Temporal Strategy:** Deciding when to use Temporal Suit Shift is critical to altering trick outcomes. The temporary trump suit impacts only one trick and reverts after its resolution.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Cards in their own hand.\n- Cards played in tricks.\n- Scores of each player.\n- Temporal Suit Shift use and declared trump suit.\n\n#### **Hidden Information:**\n- Cards in opponents\u2019 hands.\n\n---\n\n### 8. **Payoffs**\n\n##### **Endgame Scoring:**\n- A point of disturbance equals 1 for each Heart.\n- Queen of Spades is worth 13 disturbance points.\n- Shooting the Moon results in zero points for the round, with opponents' scores increased.\n\n##### **Winning Player\u2019s Reward:**\n- Having the lowest disturbance score leads to victory when the game concludes.\n\nWith these refinements, the \"Hearts of Time\" game provides clarity on the use and impact of Temporal Suit Shift, maintaining the intrigue and strategy native to Hearts, while clearly outlining the new rules. Enjoy your journey through the mystical realm as you guide your temporal path among the \"Hearts of Time.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"current_leader\": null, \"is_over\": false, \"trick_history\": [], \"current_trick\": [{\"player\": 3, \"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"6\", \"suit\": \"clubs\"}}], \"temporary_trump\": \"hearts\", \"won_tricks\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"disturbance_scores\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"temporal_shift_status\": {\"0\": true, \"1\": true, \"2\": true, \"3\": true}, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}], \"temporal_shift_used\": true}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 1 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 2.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: declare_shift-(suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declared a temporal suit shift to clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 3 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"6\"}, \"id\": 4}, \"msg\": \"Player 0 decides to: play_card-(suit: clubs, rank: 6)\"}, {\"type\": \"info\", \"msg\": \"Player 0 played 6-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 1.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"3\"}, \"id\": 0}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"5\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing shared information about the game, accessible to all players.\", \"common.num_players\": \"The total number of players participating in the game, which is 4 in this case.\", \"common.current_player\": \"The ID of the player who is currently taking their turn, set to Player 1.\", \"common.current_leader\": \"The ID of the player who led the current trick or will lead the next trick, initially null.\", \"common.is_over\": \"A boolean indicating whether the game has ended, currently set to false.\", \"common.trick_history\": \"A list tracking the history of completed tricks, initially empty in this state.\", \"common.current_trick\": \"A list representing the cards currently played in this trick with player IDs and their corresponding cards.\", \"common.temporary_trump\": \"The suit declared as the temporary trump for the current trick, set to 'hearts'.\", \"common.won_tricks\": \"A dictionary counting the number of tricks won by each player, all set to 0 initially.\", \"common.disturbance_scores\": \"A dictionary tracking the disturbance scores for each player, all starting at 0.\", \"common.temporal_shift_status\": \"A dictionary indicating whether each player has used their ability to declare a temporary trump, all marked as true.\", \"common.facedown_cards\": \"A dictionary containing the remaining cards in the deck, currently showing a deck size of 0.\", \"players\": \"A list of dictionaries where each entry contains information specific to an individual player, including both public and private fields.\", \"players[].public\": \"Publicly visible information for a player, including scores and trick wins.\", \"players[].private\": \"Information only visible to the individual player, including their hand and the temporal shift usage status.\", \"recent_history\": \"A list recording recent actions taken during the game, each entry indicates who performed an action, what action it was, and any remarks.\", \"legal_actions\": \"A list of dictionaries representing the actions the current player can legally perform, each with an 'action' type and potential 'args'.\"}",
    "policy_list": [
        "**Hand Disturbance Potential**\nThe total potential disturbance points in the AI player's hand, calculated by counting hearts as 1 point each and the Queen of Spades as 13 points. This metric evaluates the immediate risk associated with the cards currently held by the player.\n**Suit Control Factor**\nA measure of how many cards of each suit the AI player holds, indicating the player's ability to control the flow of play within a suit. This helps in deciding when to safely play or lead a particular suit without risking high disturbance points.\n**Temporal Suit Shift Opportunity**\nAn assessment based on the current game state to determine the strategic benefit of declaring a Temporal Suit Shift. This includes considering the player's hand strength in various suits, opponents' potential cards, and the timing within the game.\n**Trick Winning Probability**\nThe likelihood of winning the current trick based on the player's cards, the cards already played, and the dynamics of the current trick (e.g., current lead card and suit). This probability helps the AI player decide on aggressive versus defensive play styles.\n**Safe Start**\nLead with low non-Heart, non-Queen of Spades when possible, to avoid capturing points in early plays.\n**Temporal Suit Shift Timing**\nEfficiently use the Temporal Suit Shift when in possession of a dominant hand but in a non-dominant suit, maximizing chance to take control of the trick.\n**Shooting the Moon Strategy**\nAttempt to gather all Hearts and the Queen of Spades if early plays show an easy path to guarantee collecting all, thereby flipping the disturbance points.\n**Controlled Disturbance**\nManage a threshold of disturbance by conceding smaller value cards strategically to opponents."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def hand_disturbance_potential(hand):\n        disturbance_points = sum(1 for card in hand if card['suit'] == 'hearts')  # 1 point per heart\n        disturbance_points += sum(13 for card in hand if card['rank'] == 'Q' and card['suit'] == 'spades')  # 13 points for Queen of Spades\n        return disturbance_points\n    \n    def suit_control_factor(hand):\n        suits = {'hearts': 0, 'diamonds': 0, 'clubs': 0, 'spades': 0}\n        for card in hand:\n            suits[card['suit']] += 1\n        return suits\n    \n    def trick_winning_probability(current_trick, hand, trump_suit):\n        # Simplified estimation based on high cards and trump cards in hand\n        leading_card = max(current_trick, key=lambda x: x['card']['rank']) if current_trick else None\n        suit_lead = leading_card['card']['suit'] if leading_card else None\n\n        # High-ranked cards in the leading suit or trump suit increase probability\n        high_card_modifier = 0.0\n        for card in hand:\n            if card['suit'] == suit_lead and card['rank'] in ['10', 'J', 'Q', 'K', 'A']:\n                high_card_modifier += 0.05\n            if card['suit'] == trump_suit and card['rank'] in ['10', 'J', 'Q', 'K', 'A']:\n                high_card_modifier += 0.1\n                \n        if leading_card and (leading_card['card']['suit'] == trump_suit):\n            high_card_modifier += 0.2\n\n        return high_card_modifier\n    \n    def evaluate_action(state, action):\n        # Extract relevant information\n        common = state['common']\n        current_trick = common['current_trick']\n        trump_suit = common['temporary_trump']\n        current_player_idx = common['current_player']\n        player_info = state['players'][current_player_idx]['private']\n        hand = player_info['hand']\n        \n        # Basic scoring: lower disturbance better, more suit control and timing of the action\n        disturbance = hand_disturbance_potential(hand)\n        suit_control = suit_control_factor(hand)\n        trick_prob = trick_winning_probability(current_trick, hand, trump_suit)\n\n        if action['action'] == 'declare_shift':\n            if player_info['temporal_shift_used']:\n                return 0.1  # Shift used already, low reward\n            # Check advantage of declaring a Temporal Suit Shift\n            chosen_suit = action['args']['suit']\n            suit_strength = suit_control[chosen_suit] / len(hand)\n            return min(1.0, max(0.2, 0.5 + suit_strength))  # Evaluate your hand strength in declared trump suit\n\n        if action['action'] == 'play_card':\n            card_played = action['args']\n            if card_played['suit'] == 'hearts' or (card_played['rank'] == 'Q' and card_played['suit'] == 'spades'):\n                return 0.0  # Playing high disturbance card early; high risk\n\n            # Scaled by how safe the play is and if it protects you from high disturbance\n            safe_play_score = (14 - disturbance) / 14  # Normalize: lower disturbance is better\n            \n            return min(1.0, max(0.1, safe_play_score + trick_prob))\n        \n        return 0.0\n\n    result_score = evaluate_action(state, action)\n    return result_score\n"
    ]
}