{
    "game_description": "# Hearts of Time Game System Ruleset (Refined)\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Trick History:** Sequence of played cards in each trick, visible to all players.\n- **Current Leader:** Player who won the last trick, visible to all players.\n- **Turn Information:** Current player and actions taken during the turn.\n- **Player Order:** Logical order of play, visible to all players.\n\n#### **Player-Specific Information:**\n- **Public**:\n  - **Scores:** Current interference (disturbance scores) known at all times.\n  - **Trick Wins:** Number of tricks each player has won.\n- **Private**:\n  - **Player Hand:** Cards held by the player.\n  - **Temporal Suit Shift Status:** Whether the player has used their shift ability.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** From 2 to Ace.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Cards:**\n  - **Queen of Spades:** 13 points of disturbance.\n  - **Hearts:** Each incurs 1 point of disturbance.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck divided into four suits.\n\n#### **Initial Dealing:**\n- **4 Players:** Each player receives 13 cards.\n- Other player counts require deck adjustment by removing low-ranking cards, maintaining suit balance.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Lead a Trick:**\n   - Play any card from their hand.\n   - Pre-requisite: Must follow suit, unless void in that suit.\n2. **Follow a Trick:**\n   - Play a card matching the led suit, if possible.\n   - Else, play any card.\n3. **Declare Temporal Suit Shift:**\n   - Announce the shift of rule for a trick to establish a temporary trump suit. This can be declared before playing any card during a player's turn.\n   - Pre-requisite: Can only be used once per game per player.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player with the 2 of Clubs starts the first trick.\n2. Players take turns in clockwise order, leading with the suit following rules.\n3. Each trick consists of:\n   - Playing cards in the order of player turns.\n   - Using Temporal Suit Shift if strategically advantageous. When declared, the player's chosen suit acts as trump for that entire trick.\n4. The winner of a trick leads the next trick.\n5. Play continues until all cards have been played.\n\n#### **Winning Conditions:**\n- Game ends when a player reaches a preset disturbance threshold (commonly 100 points).\n- Player with the lowest disturbance score wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **No Hearts or Queen of Spades First Trick:** During the first trick, players must avoid playing hearts or the Queen of Spades unless they have no alternative.\n- **Shooting the Moon:** Capturing all Hearts and Queen of Spades reduces disturbance to zero for that round, increasing opponents' scores by 26 points.\n- **Temporal Strategy:** Deciding when to use Temporal Suit Shift is critical to altering trick outcomes. The temporary trump suit impacts only one trick and reverts after its resolution.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Cards in their own hand.\n- Cards played in tricks.\n- Scores of each player.\n- Temporal Suit Shift use and declared trump suit.\n\n#### **Hidden Information:**\n- Cards in opponents\u2019 hands.\n\n---\n\n### 8. **Payoffs**\n\n##### **Endgame Scoring:**\n- A point of disturbance equals 1 for each Heart.\n- Queen of Spades is worth 13 disturbance points.\n- Shooting the Moon results in zero points for the round, with opponents' scores increased.\n\n##### **Winning Player\u2019s Reward:**\n- Having the lowest disturbance score leads to victory when the game concludes.\n\nWith these refinements, the \"Hearts of Time\" game provides clarity on the use and impact of Temporal Suit Shift, maintaining the intrigue and strategy native to Hearts, while clearly outlining the new rules. Enjoy your journey through the mystical realm as you guide your temporal path among the \"Hearts of Time.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"current_leader\": null, \"is_over\": false, \"trick_history\": [], \"current_trick\": [{\"player\": 3, \"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"6\", \"suit\": \"clubs\"}}], \"temporary_trump\": \"hearts\", \"won_tricks\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"disturbance_scores\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"temporal_shift_status\": {\"0\": true, \"1\": true, \"2\": true, \"3\": true}, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}], \"temporal_shift_used\": true}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 1 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 2.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: declare_shift-(suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declared a temporal suit shift to clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 3 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"6\"}, \"id\": 4}, \"msg\": \"Player 0 decides to: play_card-(suit: clubs, rank: 6)\"}, {\"type\": \"info\", \"msg\": \"Player 0 played 6-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 1.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"3\"}, \"id\": 0}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"5\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing shared information about the game, accessible to all players.\", \"common.num_players\": \"The total number of players participating in the game, which is 4 in this case.\", \"common.current_player\": \"The ID of the player who is currently taking their turn, set to Player 1.\", \"common.current_leader\": \"The ID of the player who led the current trick or will lead the next trick, initially null.\", \"common.is_over\": \"A boolean indicating whether the game has ended, currently set to false.\", \"common.trick_history\": \"A list tracking the history of completed tricks, initially empty in this state.\", \"common.current_trick\": \"A list representing the cards currently played in this trick with player IDs and their corresponding cards.\", \"common.temporary_trump\": \"The suit declared as the temporary trump for the current trick, set to 'hearts'.\", \"common.won_tricks\": \"A dictionary counting the number of tricks won by each player, all set to 0 initially.\", \"common.disturbance_scores\": \"A dictionary tracking the disturbance scores for each player, all starting at 0.\", \"common.temporal_shift_status\": \"A dictionary indicating whether each player has used their ability to declare a temporary trump, all marked as true.\", \"common.facedown_cards\": \"A dictionary containing the remaining cards in the deck, currently showing a deck size of 0.\", \"players\": \"A list of dictionaries where each entry contains information specific to an individual player, including both public and private fields.\", \"players[].public\": \"Publicly visible information for a player, including scores and trick wins.\", \"players[].private\": \"Information only visible to the individual player, including their hand and the temporal shift usage status.\", \"recent_history\": \"A list recording recent actions taken during the game, each entry indicates who performed an action, what action it was, and any remarks.\", \"legal_actions\": \"A list of dictionaries representing the actions the current player can legally perform, each with an 'action' type and potential 'args'.\"}",
    "policy_list": [
        "**Safe Start with Contextual Adjustments**\nThe 'Safe Start with Contextual Adjustments' strategy advises the AI to open with low non-Heart, non-Queen of Spades cards initially. It conditions this strategy upon evaluating the 'Hand Disturbance Potential'\u2014prioritizing plays that minimize immediate risk. When deciding what card to lead, the AI should also appraise its 'Suit Control Factor', choosing suits it can control effectively or in which opponents are likely weak. The AI should only lead higher cards if it sees a viable 'Trick Winning Probability' that minimizes risk of receiving undesirable cards. Moreover, the AI should continuously assess the viability of 'Temporal Suit Shift Opportunity', ensuring that any declaration is based on tangible advantages such as strong suit presence or strategic need to redistribute card control within a trick. Through these evaluations, the AI will adapt Safe Start dynamically, avoiding critical pitfalls while exploiting opportunities.",
        "**Refined Temporal Suit Shift Strategy**\nThe refined strategy involves declaring a Temporal Suit Shift when the player has a high Hand Disturbance Potential and needs to control a trick in a non-leading suit where the player holds the majority of cards (high Suit Control Factor). Specifically, critical moments to declare the shift are when: 1) the player is likely to accumulate significant disturbance without intervention, 2) there's an opportunity to offload high disturbance cards safely using the temporary trump, and 3) the timing benefits the player by reshaping the trick dynamics to their advantage, amplifying the likelihood of taking control in pivotal or late game stages. The strategy requires careful assessment of Suit Control Factor and Trick Winning Probability for dynamic decision-making each round.",
        "**Shooting the Moon Strategy**\nTo refine the 'Shooting the Moon Strategy,' we identify 'key cards' as the Queen of Spades and any high Hearts cards. The strategy should assess opponents' likelihood of holding back these cards, perhaps by tracking the number of lower-ranked hearts and spades that appear as play progresses. For the AI player, a high 'Hand Disturbance Potential' at the start of the game suggests a potential for Shooting the Moon, while a high 'Suit Control Factor,' particularly in non-heart suits, implies stronger control over trick leading and following, creating opportunities to avoid leading with hearts or spades unnecessarily. Thus, the strategy should be conditioned on a combination of reaching a specific threshold in 'Hand Disturbance Potential' (e.g., having at least 8 Hearts and the Queen of Spades) and strong 'Suit Control Factor' (e.g., holding the most cards in at least two different non-hearts suits) to actively pursue Shooting the Moon. If these conditions are not met early in the game, the player should pivot to minimizing disturbance points by playing defensively and avoiding high-risk leads.",
        "**Refined Strategy: Controlled Disturbance**\nThe refined 'Controlled Disturbance' strategy involves conceding tricks where the total disturbance accumulation for the player will remain lower than the collective disturbance that could be forced or anticipated in upcoming plays. The AI should use the Hand Disturbance Potential metric to evaluate the amount of risk posed by cards in hand and aim to rid higher risk cards (e.g., Queen of Spades) when losing is unavoidable and does not escalate disturbance significantly. When deciding whether to contest or concede a trick, the Trick Winning Probability should guide the AI on playing aggressively or defensively, with a preference for defensive plays that result in minimal point gains by the player. The Temporal Suit Shift Opportunity metric is essential for identifying rounds where declaring a temporary trump suit could allow manipulation of trick outcomes\u2014either to offload a high-risk card or to control the flow by forcing opponents' hands. For example, if the AI holds an unfavorable number of hearts, leading with alternate suits or using a temporal shift can disrupt opponents' attempts to pool more disturbance on the AI player. Ultimately, the goal is to maintain a disturbance score below thresholds while exploiting suit control and card distribution to resume control when necessary."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information for computation\n    num_players = state['common']['num_players']\n    current_player_id = state['common']['current_player']\n    current_trick = state['common']['current_trick']\n    temporary_trump = state['common']['temporary_trump']\n    disturbance_scores = state['common']['disturbance_scores']\n    temporal_shift_status = state['common']['temporal_shift_status']\n    \n    player_hand = state['players'][current_player_id]['private']['hand']\n    player_disturbance_score = disturbance_scores[str(current_player_id)]\n    all_disturbances = list(disturbance_scores.values())\n    \n    card_to_play = action['args']\n    \n    # Initial reward is inversely related to the player's disturbance score and directly to lowest disturbance\n    max_disturbance_score = 100\n    min_disturbance_score = min(all_disturbances)\n    \n    base_reward = (max_disturbance_score - player_disturbance_score) / max_disturbance_score\n    lowest_disturbance_bonus = 0.1 * (player_disturbance_score == min_disturbance_score)\n    \n    # Assess 'Hand Disturbance Potential' to avoid Hearts and Queen of Spades\n    non_detrimental_cards = [card for card in player_hand if (card['suit'] != 'hearts' and \n                                                             not (card['suit'] == 'spades' and card['rank'] == 'queen'))]\n    disturbance_protection = len(non_detrimental_cards) / len(player_hand) if player_hand else 0\n    \n    # Estimate 'Suit Control Factor' \n    lead_suits = {card['suit'] for card in current_trick} if current_trick else set()\n    suit_control = sum(1 for card in player_hand if card['suit'] not in lead_suits) / len(player_hand)\n    \n    # If 'Temporal Suit Shift' is available, check strategic advantage\n    shift_bonus = 0.0\n    if not temporal_shift_status[str(current_player_id)]:\n        favorable_suits = [card['suit'] for card in player_hand\n                           if player_hand.count(card['suit']) > len(player_hand) // num_players]\n        if temporary_trump in favorable_suits:\n            shift_bonus = 0.2\n    \n    # Card action is more favorable if it doesn't incur special card penalty unless it's the player's advantage\n    action_card_penalty = 0.0\n    if card_to_play['suit'] == 'hearts':\n        action_card_penalty -= 0.1\n    elif card_to_play['suit'] == 'spades' and card_to_play['rank'] == 'queen':\n        action_card_penalty -= 0.2\n    \n    # Combine all these factors into a final score\n    result_score = base_reward + lowest_disturbance_bonus + disturbance_protection + suit_control + shift_bonus + action_card_penalty\n    result_score = max(0, min(result_score, 1)) # Ensure the score is capped between 0 and 1\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    result_score = 0.0\n\n    current_player_index = state[\"common\"][\"current_player\"]\n    player_data = state[\"players\"][current_player_index]\n    player_hand = player_data[\"private\"][\"hand\"]\n    disturbance_scores = state[\"common\"][\"disturbance_scores\"]\n    current_trick = state[\"common\"][\"current_trick\"]\n    disturbance_before_action = disturbance_scores[str(current_player_index)]\n    \n    # Evaluate action's potential\n    if action[\"action\"] == \"play_card\":\n        card_to_play = action[\"args\"]\n        \n        # Suit control factor: higher for larger number of remaining cards in that suit\n        suit_control_factor = sum(1 for card in player_hand if card[\"suit\"] == card_to_play[\"suit\"])\n\n        # Check if the action can potentially win a trick or avoid disturbance\n        trick_play_value = 0\n        if current_trick:\n            lead_suit = current_trick[0][\"card\"][\"suit\"]\n            playable_points = (card_to_play[\"suit\"] == lead_suit) \\\n                                and card_to_play == max([c for p in player_hand for c in current_trick if p == lead_suit], key=lambda x: x['rank'])\n            win_influence_factor = 1 if playable_points else 0\n        else:\n            win_influence_factor = 0\n        \n        # Account for potential disturbances\n        potential_disturbance = 0\n        if card_to_play[\"suit\"] == \"hearts\":\n            potential_disturbance += 1\n        if card_to_play[\"suit\"] == \"spades\" and card_to_play[\"rank\"] == \"queen\":\n            potential_disturbance += 13\n        \n        # Calculate disturbance change ratio\n        if (potential_disturbance + disturbance_before_action) > 0:\n            disturbance_ratio = 1 / (1 + potential_disturbance + disturbance_before_action)\n        else:\n            disturbance_ratio = 1.0\n        \n        # Heuristic blend of assessment factors\n        result_score = (0.4 * disturbance_ratio) + (0.3 * suit_control_factor / len(player_hand)) + (0.3 * win_influence_factor)\n\n    elif action[\"action\"] == \"declare_shift\":\n        # If player declares temporal suit shift, evaluate this potential strategic gain\n        declared_suit = action[\"args\"][\"suit\"]\n        \n        # Check how much control in declared trump suit\n        suit_control_factor = sum(1 for card in player_hand if card[\"suit\"] == declared_suit)\n        \n        # Consider disturbance and control gain\n        if not player_data[\"private\"][\"temporal_shift_used\"]:\n            disturbance_ratio = 1 / (1 + disturbance_before_action)\n            suit_shift_benefit = 0.6\n        else:\n            suit_shift_benefit = 0.0\n        \n        result_score = (0.4 * disturbance_ratio) + (0.6 * suit_shift_benefit)\n\n    # Ensure result scale between 0 and 1\n    result_score = min(max(result_score, 0), 1)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common and player-specific information\n    common_info = state['common']\n    current_player_id = common_info['current_player']\n    current_player_info = state['players'][current_player_id]\n    player_hand = current_player_info['private']['hand']\n    legal_actions = state['legal_actions']\n    \n    # Initialize score components\n    hand_disturbance_potential = 0\n    suit_control_factor = 0\n\n    # Analyze player hand for disturbance potential\n    hearts_count = 0\n    high_hearts = 0\n    queen_of_spades = False\n    suit_counts = {'clubs': 0, 'diamonds': 0, 'hearts': 0, 'spades': 0}\n\n    for card in player_hand:\n        rank, suit = card['rank'], card['suit']\n        suit_counts[suit] += 1\n        if suit == 'hearts':\n            hearts_count += 1\n            if rank in ['10', 'J', 'Q', 'K', 'A']:\n                high_hearts += 1\n        elif suit == 'spades' and rank == 'Q':\n            queen_of_spades = True\n    \n    # Hand disturbance potential calculation\n    if hearts_count >= 8 and queen_of_spades:\n        hand_disturbance_potential = 0.8  # High potential to shoot the moon\n\n    # Calculate suit control factor\n    if suit_counts['hearts'] == max(suit_counts.values()):\n        suit_control_factor = max(suit_counts.values()) / len(player_hand)\n\n    # Factor recent disturbance scores\n    player_disturbance_score = common_info['disturbance_scores'][str(current_player_id)]\n\n    # Calculate chance of winning and normalize score\n    potential_score = hand_disturbance_potential + (0.2 * suit_control_factor)\n    disturbance_factor = max(0, 1 - player_disturbance_score / 100)\n\n    result_score = min(1, potential_score * disturbance_factor)\n    \n    # Adjust based on legal actions\n    if action not in legal_actions:\n        result_score *= 0.5  # penalize illegal action, though should not happen\n\n    return result_score\n\n",
        "\ndef score(state: dict, action: str) -> float:\n    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n\n    def card_value(card):\n        if card['suit'] == 'hearts':\n            return 1  # 1 point disturbance for any heart\n        if card['rank'] == 'queen' and card['suit'] == 'spades':\n            return 13  # 13 points disturbance for Queen of Spades\n        return 0  # no disturbance for other cards\n\n    def disturbance_potential(hand):\n        return sum(card_value(card) for card in hand)\n\n    # Extract key state-related values\n    current_player_hand = state['players'][1]['private']['hand']\n    hand_disturbance = disturbance_potential(current_player_hand)\n    \n    # Extracting action details\n    if action['action'] == 'play_card':\n        action_card = action['args']\n    else:\n        return 0.5  # Neutral value\n\n    action_value = ranks.index(action_card['rank'])\n    led_suit = state['common']['current_trick'][0]['card']['suit'] if state['common']['current_trick'] else action_card['suit']\n\n    higher_cards = sum((card['suit'] == led_suit and ranks.index(card['rank']) > action_value)\n                       for card in current_player_hand)\n    opponents = state['common']['num_players'] - 1\n\n    if higher_cards == 0:\n        trick_winning_probability = 1  # Guaranteed win or no higher in hand\n    else:\n        trick_winning_probability = 1 - higher_cards / len(ranks)\n\n    # Determine effect of the action considering disturbance potential\n    disturbance_factor = 1 - hand_disturbance / (hand_disturbance + 15 + card_value(action_card))\n\n    # Putting it all together\n    DISTURBANCE_WEIGHT = 0.7\n    TRICK_WINNING_WEIGHT = 0.3\n    result_score = (DISTURBANCE_WEIGHT * disturbance_factor) + (TRICK_WINNING_WEIGHT * trick_winning_probability)\n\n    return result_score\n"
    ]
}