{
    "game_description": "# Hearts of Time Game System Ruleset (Refined)\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Trick History:** Sequence of played cards in each trick, visible to all players.\n- **Current Leader:** Player who won the last trick, visible to all players.\n- **Turn Information:** Current player and actions taken during the turn.\n- **Player Order:** Logical order of play, visible to all players.\n\n#### **Player-Specific Information:**\n- **Public**:\n  - **Scores:** Current interference (disturbance scores) known at all times.\n  - **Trick Wins:** Number of tricks each player has won.\n- **Private**:\n  - **Player Hand:** Cards held by the player.\n  - **Temporal Suit Shift Status:** Whether the player has used their shift ability.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** From 2 to Ace.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Cards:**\n  - **Queen of Spades:** 13 points of disturbance.\n  - **Hearts:** Each incurs 1 point of disturbance.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck divided into four suits.\n\n#### **Initial Dealing:**\n- **4 Players:** Each player receives 13 cards.\n- Other player counts require deck adjustment by removing low-ranking cards, maintaining suit balance.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Lead a Trick:**\n   - Play any card from their hand.\n   - Pre-requisite: Must follow suit, unless void in that suit.\n2. **Follow a Trick:**\n   - Play a card matching the led suit, if possible.\n   - Else, play any card.\n3. **Declare Temporal Suit Shift:**\n   - Announce the shift of rule for a trick to establish a temporary trump suit. This can be declared before playing any card during a player's turn.\n   - Pre-requisite: Can only be used once per game per player.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player with the 2 of Clubs starts the first trick.\n2. Players take turns in clockwise order, leading with the suit following rules.\n3. Each trick consists of:\n   - Playing cards in the order of player turns.\n   - Using Temporal Suit Shift if strategically advantageous. When declared, the player's chosen suit acts as trump for that entire trick.\n4. The winner of a trick leads the next trick.\n5. Play continues until all cards have been played.\n\n#### **Winning Conditions:**\n- Game ends when a player reaches a preset disturbance threshold (commonly 100 points).\n- Player with the lowest disturbance score wins.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **No Hearts or Queen of Spades First Trick:** During the first trick, players must avoid playing hearts or the Queen of Spades unless they have no alternative.\n- **Shooting the Moon:** Capturing all Hearts and Queen of Spades reduces disturbance to zero for that round, increasing opponents' scores by 26 points.\n- **Temporal Strategy:** Deciding when to use Temporal Suit Shift is critical to altering trick outcomes. The temporary trump suit impacts only one trick and reverts after its resolution.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Cards in their own hand.\n- Cards played in tricks.\n- Scores of each player.\n- Temporal Suit Shift use and declared trump suit.\n\n#### **Hidden Information:**\n- Cards in opponents\u2019 hands.\n\n---\n\n### 8. **Payoffs**\n\n##### **Endgame Scoring:**\n- A point of disturbance equals 1 for each Heart.\n- Queen of Spades is worth 13 disturbance points.\n- Shooting the Moon results in zero points for the round, with opponents' scores increased.\n\n##### **Winning Player\u2019s Reward:**\n- Having the lowest disturbance score leads to victory when the game concludes.\n\nWith these refinements, the \"Hearts of Time\" game provides clarity on the use and impact of Temporal Suit Shift, maintaining the intrigue and strategy native to Hearts, while clearly outlining the new rules. Enjoy your journey through the mystical realm as you guide your temporal path among the \"Hearts of Time.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 1, \"current_leader\": null, \"is_over\": false, \"trick_history\": [], \"current_trick\": [{\"player\": 3, \"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"6\", \"suit\": \"clubs\"}}], \"temporary_trump\": \"hearts\", \"won_tricks\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"disturbance_scores\": {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0}, \"temporal_shift_status\": {\"0\": true, \"1\": true, \"2\": true, \"3\": true}, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}], \"temporal_shift_used\": true}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}, {\"public\": {\"scores\": 0, \"trick_wins\": 0}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 1 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 2.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: declare_shift-(suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declared a temporal suit shift to clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_shift\", \"args\": {\"suit\": \"hearts\"}, \"id\": 0}, \"msg\": \"Player 3 decides to: declare_shift-(suit: hearts)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declared a temporal suit shift to hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"6\"}, \"id\": 4}, \"msg\": \"Player 0 decides to: play_card-(suit: clubs, rank: 6)\"}, {\"type\": \"info\", \"msg\": \"Player 0 played 6-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 1.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"3\"}, \"id\": 0}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play_card\", \"args\": {\"suit\": \"clubs\", \"rank\": \"5\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing shared information about the game, accessible to all players.\", \"common.num_players\": \"The total number of players participating in the game, which is 4 in this case.\", \"common.current_player\": \"The ID of the player who is currently taking their turn, set to Player 1.\", \"common.current_leader\": \"The ID of the player who led the current trick or will lead the next trick, initially null.\", \"common.is_over\": \"A boolean indicating whether the game has ended, currently set to false.\", \"common.trick_history\": \"A list tracking the history of completed tricks, initially empty in this state.\", \"common.current_trick\": \"A list representing the cards currently played in this trick with player IDs and their corresponding cards.\", \"common.temporary_trump\": \"The suit declared as the temporary trump for the current trick, set to 'hearts'.\", \"common.won_tricks\": \"A dictionary counting the number of tricks won by each player, all set to 0 initially.\", \"common.disturbance_scores\": \"A dictionary tracking the disturbance scores for each player, all starting at 0.\", \"common.temporal_shift_status\": \"A dictionary indicating whether each player has used their ability to declare a temporary trump, all marked as true.\", \"common.facedown_cards\": \"A dictionary containing the remaining cards in the deck, currently showing a deck size of 0.\", \"players\": \"A list of dictionaries where each entry contains information specific to an individual player, including both public and private fields.\", \"players[].public\": \"Publicly visible information for a player, including scores and trick wins.\", \"players[].private\": \"Information only visible to the individual player, including their hand and the temporal shift usage status.\", \"recent_history\": \"A list recording recent actions taken during the game, each entry indicates who performed an action, what action it was, and any remarks.\", \"legal_actions\": \"A list of dictionaries representing the actions the current player can legally perform, each with an 'action' type and potential 'args'.\"}",
    "policy_list": [
        "**Safe Start**\nLead with low non-Heart, non-Queen of Spades when possible, to avoid capturing points in early plays.",
        "**Temporal Suit Shift Timing**\nEfficiently use the Temporal Suit Shift when in possession of a dominant hand but in a non-dominant suit, maximizing chance to take control of the trick.",
        "**Shooting the Moon Strategy**\nAttempt to gather all Hearts and the Queen of Spades if early plays show an easy path to guarantee collecting all, thereby flipping the disturbance points.",
        "**Controlled Disturbance**\nManage a threshold of disturbance by conceding smaller value cards strategically to opponents."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract useful information from the state\n    current_player_id = state[\"common\"][\"current_player\"]\n    players = state[\"players\"]\n    current_player = players[current_player_id]\n    current_hand = current_player['private']['hand']\n    scores = state[\"common\"][\"disturbance_scores\"]\n    legal_actions = state[\"legal_actions\"]\n    \n    # Basic heuristics\n    base_reward = 0.5  # Start with a neutral odds of winning\n\n    # Increase reward for low disturbance score\n    max_disturbance_allowed = 100\n    disturbance_score = scores[current_player_id]  # Corrected this line\n    base_reward += (max_disturbance_allowed - disturbance_score) / (2 * max_disturbance_allowed)\n\n    # Evaluate the specific action being scored\n    action_type = action[\"action\"]\n\n    if action_type == \"play_card\":\n        # Evaluate based on the card being played\n        card = action[\"args\"]\n        card_rank = card[\"rank\"]\n        card_suit = card[\"suit\"]\n\n        # Safe Start: Prefer low non-heart, non-Queen of Spades cards\n        if card_suit != \"hearts\" and not (card_suit == \"spades\" and card_rank == \"Q\"):\n            base_reward += 0.1  # Increase reward for safer cards\n\n        # Evaluate based on current trick status and leads\n        current_trick = state[\"common\"][\"current_trick\"]\n        if current_trick:\n            leading_suit = current_trick[0]['card']['suit']\n            if card_suit == leading_suit:\n                # Bleeding points when following the led suit\n                base_reward += 0.05\n            else:\n                # Offloading a point card strategically\n                if card_suit == 'hearts' or (card_suit == 'spades' and card_rank == 'Q'):\n                    base_reward -= 0.1\n\n    elif action_type == \"declare_shift\":\n        # Temporal Suit Shift Logic\n        shift_suit = action[\"args\"][\"suit\"]\n        if state[\"common\"][\"temporary_trump\"] == shift_suit:\n            base_reward -= 0.05  # Decrease if we are not shifting advantageously\n        elif len(current_hand) > 7:\n            # Favor temporal shifts when more cards remain for strategic impact\n            base_reward += 0.05\n\n    # Ensure the base_reward is within the range [0, 1]\n    result_score = max(0, min(1, base_reward))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize base score\n    result_score = 0.5  # Neutral starting point\n\n    # Extract relevant data from state\n    current_player_id = int(state['common']['current_player'])  # Ensure the player ID is an integer\n    player_hand = state['players'][current_player_id]['private']['hand']\n    disturbance_scores = state['common']['disturbance_scores']\n\n    # Check the current disturbance score of the player\n    player_disturbance_score = disturbance_scores[current_player_id]  # Use int key for disturbance_scores\n\n    # Adjust score based on current disturbance score\n    if player_disturbance_score < min(disturbance_scores.values()):\n        result_score += 0.1  # Favorable position, less disturbance\n\n    # Analyzing the potential impact of Temporal Suit Shift if using that action\n    if action['action'] == 'declare_shift':\n        if not state['players'][current_player_id]['private']['temporal_shift_used']:\n            # Evaluate if the declared suit shift aligns with player's strongest suit\n            temp_trump_suit = action['args']['suit']\n            strong_suit_count = sum(1 for card in player_hand if card['suit'] == temp_trump_suit)\n            \n            # Boost score if more cards are in the declared trump suit\n            result_score += 0.15 if strong_suit_count > 3 else 0.05\n\n    # Check if action is to play a card\n    elif action['action'] == 'play_card':\n        card_suit = action['args']['suit']\n        card_rank = action['args']['rank']\n\n        # Modify score based on the significance of the card\n        if card_suit == 'hearts':\n            result_score -= 0.1  # Playing a heart likely adds disturbance\n        elif card_suit == 'spades' and card_rank == 'Q':\n            result_score -= 0.3  # Playing Queen of Spades is risky\n        else:\n            # High ranked cards in non-heart suits may be advantageous\n            high_ranks = set(['J', 'Q', 'K', 'A'])\n            rank_value = {'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n            if card_rank in high_ranks or (card_rank.isdigit() and int(card_rank) > 10):\n                result_score += 0.05\n\n    # Normalize the score to maintain continuity\n    result_score = max(0, min(1, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract relevant information from the game state\n    current_player_id = state['common']['current_player']\n    player_hand = state['players'][current_player_id]['private']['hand']\n    disturbance_scores = state['common']['disturbance_scores']\n    legal_actions = state['legal_actions']\n\n    # Assigning variables for important cards and counts\n    hearts_in_hand = sum(1 for card in player_hand if card['suit'] == 'hearts')\n    queen_of_spades_in_hand = any(card['rank'] == 'queen' and card['suit'] == 'spades' for card in player_hand)\n    total_hearts = 13\n    shooting_moon_score = 0\n\n    # Start calculating the value\n    if queen_of_spades_in_hand:\n        shooting_moon_score += 0.4  # Queen of Spades is critical in shooting the moon\n    shooting_moon_score += (hearts_in_hand / total_hearts) * 0.4  # Hearts count towards shooting the moon\n\n    # Additional modifier based on other players' disturbance scores\n    other_players_high_scores = sum(1 for score in disturbance_scores.values() if score >= 50)\n    shooting_moon_adjustment = (other_players_high_scores / (state['common']['num_players'] - 1)) * 0.2\n\n    # Consider the action being taken\n    action_type = action.get('action')\n    action_card = action.get('args', {}).get('suit'), action.get('args', {}).get('rank')\n\n    # Determine action impact on likelihood\n    if action_type == \"play_card\":\n        # If playing a heart or the Queen of Spades, enhance the chances for shooting the moon\n        if action_card[1] == 'queen' and action_card[0] == 'spades':\n            shooting_moon_score += 0.1\n        elif action_card[0] == 'hearts':\n            shooting_moon_score += 0.05\n\n    # Adjust final score to fit probability range\n    result_score = min(max(shooting_moon_score + shooting_moon_adjustment, 0), 1)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Utility function to compute the card value points\n    def card_value(card):\n        if card['suit'] == 'hearts':\n            return 1\n        elif card['rank'] == 'queen' and card['suit'] == 'spades':\n            return 13\n        return 0\n\n    # Extract necessary information from state\n    disturbance_scores = state['common']['disturbance_scores']\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['private']['hand']\n    legal_actions = state['legal_actions']\n    num_players = state['common']['num_players']\n\n    # Initial probability is neutral\n    prob = 0.5\n\n    # Disturbance score impact\n    my_disturbance = disturbance_scores[current_player]  # Use integer index\n    if my_disturbance == 0:\n        prob += 0.1  # Low disturbance is favorable\n    else:\n        prob -= 0.1 * (my_disturbance / 100)  # Higher disturbance lowers probability\n\n    # Evaluate the action in terms of disturbance\n    for act in legal_actions:\n        if act == action:\n            if action['action'] == 'play_card':\n                card = act['args']\n                prob -= 0.05 * card_value(card)  # Playing cards that cause disturbance reduces the score\n\n    # Consider current trick context\n    current_trick = state['common']['current_trick']\n    if current_trick:\n        lead_suit = current_trick[0]['card']['suit']\n        if action['action'] == 'play_card':\n            if action['args']['suit'] != lead_suit and any(card['suit'] == lead_suit for card in player_hand):\n                prob -= 0.1  # Penalize if not following suit when possible\n\n    # Make adjustments based on temporal suit shift usage\n    if state['common']['temporal_shift_status'][current_player]:  # Use integer index\n        prob += 0.05  # If shift feature has been used, we assume it's been advantageous\n\n    # Normalize the probability to stay within [0, 1]\n    result_score = min(1.0, max(0.0, prob))\n\n    return result_score\n"
    ]
}