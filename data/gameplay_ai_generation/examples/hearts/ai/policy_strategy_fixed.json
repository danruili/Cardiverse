{
    "game_description": "Many trick-taking games are not directly related to Bridge or Whist. Perhaps the foremost one is Hearts, which is truly one of the greatest card games ever devised for four players, each playing individually.\n\n### The Pack\n\nThe standard 52-card pack is used.\n\nShop Bicycle Hearts Playing Cards\n\n### Object of the Game\n\nTo be the player with the lowest score at the end of the game. When one player hits the agreed-upon score or higher, the game ends; and the player with the lowest score wins.\n\n### Card Values/scoring\n\nAt the end of each hand, players count the number of hearts they have taken as well as the queen of spades, if applicable. Hearts count as one point each and the queen counts 13 points.\n\nEach heart - 1 point\n\nThe Q - 13 points\n\nThe aggregate total of all scores for each hand must be a multiple of 26.\n\nThe game is usually played to 100 points (some play to 50).\n\nWhen a player takes all 13 hearts and the queen of spades in one hand, instead of losing 26 points, that player scores zero and each of his opponents score an additional 26 points.\n\n### The Deal\n\nDeal the cards one at a time, face down, clockwise. In a four-player game, each is dealt 13 cards; in a three-player game, the 2 of diamonds should be removed, and each player gets 17 cards; in a five-player game, the 2 of clubs should be removed so that each player will get 10 cards.\n\n### The Play\n\nThe player holding the 2 of clubs after the pass makes the opening lead. If the 2 has been removed for the three handed game, then the 3 of clubs is led.\n\nEach player must follow suit if possible. If a player is void of the suit led, a card of any other suit may be discarded. However, if a player has no clubs when the first trick is led, a heart or the queen of spades cannot be discarded. The highest card of the suit led wins a trick and the winner of that trick leads next. There is no trump suit.\n\nThe winner of the trick collects it and places it face down. Hearts may not be led until a heart or the queen of spades has been discarded. The queen does not have to be discarded at the first opportunity.\n\nThe queen can be led at any time.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": 1, \"winner\": null, \"is_over\": false, \"scores\": [0, 0, 0, 0], \"hearts_broken\": false, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"current_trick\": [{\"player\": 0, \"card\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}}, {\"player\": 1, \"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}], \"trick_history\": [[{\"player\": 3, \"card\": {\"rank\": \"2\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"9\", \"suit\": \"clubs\"}}, {\"player\": 1, \"card\": {\"rank\": \"8\", \"suit\": \"clubs\"}}, {\"player\": 2, \"card\": {\"rank\": \"3\", \"suit\": \"clubs\"}}]]}}, \"players\": [{\"public\": {\"tricks_won_count\": 1}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}]}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 12}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(rank: 3, suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 3-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick and will lead the next.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}, \"id\": 8}, \"msg\": \"Player 0 decides to: play-(rank: Q, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays Q-diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"diamonds\"}, \"id\": 2}, \"msg\": \"Player 1 decides to: play-(rank: 3, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 3-diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"rank\": \"2\", \"suit\": \"diamonds\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"rank\": \"K\", \"suit\": \"diamonds\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"rank\": \"5\", \"suit\": \"diamonds\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing information shared among all players about the state of the game.\", \"common.num_players\": \"The number of players in the game (integer).\", \"common.current_player\": \"The player who is to play next, represented as an integer index (0-based) identifying the player.\", \"common.direction\": \"The direction of play, 1 typically indicates clockwise (positive direction) (integer).\", \"common.winner\": \"The player who won the game (None indicates no winner yet) (nullable integer).\", \"common.is_over\": \"A boolean indicating if the game is over (true if yes, false if no).\", \"common.scores\": \"A list of integers representing the scores of each player in the game, indexed by player.\", \"common.hearts_broken\": \"A boolean indicating if hearts have been broken (true if yes, false if no).\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck (integer).\", \"common.faceup_cards.current_trick\": \"A list representing the current trick, detailing which players have played what cards, each entry is a dictionary with 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"common.faceup_cards.trick_history\": \"A list of lists showing the history of all completed tricks, each trick shown as a list of dictionaries, where each dictionary contains 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"players\": \"A list containing individual dictionaries for each player, indexed by player number (0-based).\", \"players[].public.tricks_won_count\": \"The number of tricks won by this player (integer).\", \"players[].facedown_cards.hand_size\": \"The number of cards remaining in this player's hand (integer).\", \"players[].faceup_cards.collected_cards\": \"A list of cards (each a dictionary with 'rank' and 'suit') that this player has won in previous tricks.\", \"players[2].public.current_player\": \"Boolean to indicate if this player is the current player (true if yes, only for the player whose turn it is).\", \"players[2].facedown_cards.hand\": \"A list of dictionaries, each containing 'rank' and 'suit', representing the cards currently in this player's hand. Only shown for the current player.\", \"recent_history\": \"A list of dictionaries logging the recent actions and events in the game, detailing actions by player ID and messages.\", \"recent_history[].type\": \"The type of entry in the history log. It can be 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of a player associated with an action or turn end event (integer).\", \"recent_history[].action\": \"A dictionary detailing an action taken by a player; includes the action type and the arguments ('rank' and 'suit') of the card played.\", \"recent_history[].msg\": \"A descriptive string message detailing the particular event or state change.\", \"recent_history[].role\": \"The role of the message, usually null unless specified differently.\", \"legal_actions\": \"A list of allowable actions for the current player; each action is a dictionary containing 'action' type and 'args', which further details the 'rank' and 'suit' of the card that can be played.\"}",
    "policy_list": [
        "**Avoid Taking Points**\nFocus on avoiding winning tricks that contain hearts or the queen of spades. Play low cards of a suit whenever possible, especially when hearts or the queen of spades are likely to be played by opponents.",
        "**Shoot the Moon**\nAttempt to win all the hearts and the queen of spades in a single hand. This involves carefully tracking which cards have been played and ensuring you can win the remaining high-point cards.",
        "**Pass High Cards Strategically**\nDuring the passing phase, pass high cards that are not well-supported by lower cards in the same suit. This reduces the risk of winning unwanted tricks when following suit.",
        "**Lead Strong Suits Late in the Game**\nConserve your strongest suit for later when hearts have been broken and strategic plays are necessary. This allows you to control the flow of the game and potentially bleed opponents of their beneficial cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Unpack necessary information from the game state\n    common = state[\"common\"]\n    current_player_index = common[\"current_player\"]\n    hearts_broken = common[\"hearts_broken\"]\n    \n    current_trick = common[\"faceup_cards\"][\"current_trick\"]\n    current_trick_suit = current_trick[0][\"card\"][\"suit\"] if current_trick else None\n\n    players = state[\"players\"]\n    current_player_hand = players[current_player_index][\"facedown_cards\"][\"hand\"]\n    current_player_collected_cards = players[current_player_index][\"faceup_cards\"][\"collected_cards\"]\n\n    # Unpack the planned action\n    action_suit = action[\"args\"][\"suit\"]\n    action_rank = action[\"args\"][\"rank\"]\n\n    # Calculate risk of the action\n    risk_score = 0\n    \n    # Check if the current trick contains risky cards (hearts or queen of spades)\n    trick_contains_risk = any(card[\"card\"][\"suit\"] == \"hearts\" or\n                              (card[\"card\"][\"rank\"] == \"Q\" and card[\"card\"][\"suit\"] == \"spades\")\n                              for card in current_trick)\n    \n    # Avoid winning a trick with high risk\n    if trick_contains_risk:\n        # Check if playing this card will likely avoid winning the trick\n        # Lower the card is in the lead suit, less likely to win the trick\n        if action_suit == current_trick_suit:\n            # Ensure the rank is found within valid ranks \n            available_ranks = \"23456789TJQKA\"\n            if action_rank in available_ranks:\n                risk_score += (13 - available_ranks.index(action_rank)) / 13.0\n            else:\n                # If for any reason the rank is not recognized, consider it high risk\n                risk_score += 1\n        else:\n            # If not following suit, risk of winning trick by being void in a safe suit is minimal\n            risk_score += 0\n\n    # Check if playing this card breaks hearts\n    if not hearts_broken and action_suit == \"hearts\":\n        # Breaking hearts is generally risky\n        risk_score += 0.5\n\n    # Consider the overall hand strength (lower is often better)\n    high_cards = [\"A\", \"K\", \"Q\", \"J\"]\n    high_card_penalty = sum(1 for card in current_player_hand if card[\"rank\"] in high_cards) / len(current_player_hand)\n    risk_score += high_card_penalty\n\n    # Normalize the score between 0 and 1, with 0 being high risk and 1 being low risk\n    result_score = max(1.0 - risk_score, 0)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_id = state['common']['current_player']\n    current_player_data = state['players'][current_player_id]\n    current_hand = current_player_data['facedown_cards']['hand']\n    \n    base_score = 0.5\n    \n    num_hearts = sum(1 for card in current_hand if card['suit'] == 'hearts')\n    has_queen_of_spades = any(card for card in current_hand if card['rank'] == 'Q' and card['suit'] == 'spades')\n    \n    if has_queen_of_spades:\n        base_score += 0.1\n    \n    if num_hearts >= 5:\n        base_score += 0.05\n    \n    def has_high_risk_of_failure(current_hand, current_trick, hearts_broken):\n        queen_spades = any(card for card in current_hand if card['rank'] == 'Q' and card['suit'] == 'spades')\n        high_hearts = [card for card in current_hand if card['suit'] == 'hearts' and card['rank'] in {'J', 'Q', 'K', 'A'}]\n        high_risk = queen_spades and not hearts_broken and action['args']['suit'] == 'hearts'\n        return len(high_hearts) > 3 or high_risk\n    \n    current_trick = state['common']['faceup_cards']['current_trick']\n    hearts_broken = state['common']['hearts_broken']\n    \n    if has_high_risk_of_failure(current_hand, current_trick, hearts_broken):\n        base_score -= 0.15\n    \n    if action['args']['suit'] == 'hearts' and not hearts_broken:\n        base_score -= 0.1\n\n    result_score = max(0.0, min(1.0, base_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Unpack the state and action details\n    common = state['common']\n    players = state['players']\n    current_player_info = players[common['current_player']]\n    action_card_rank = action['args']['rank']\n    action_card_suit = action['args']['suit']\n    \n    # Initialize the score\n    result_score = 0.0\n    \n    # Calculate score component based on current player's hand\n    hand = current_player_info['facedown_cards']['hand']\n    high_cards = ['J', 'Q', 'K', 'A']\n    high_card_present = any(card['rank'] in high_cards for card in hand)\n    \n    # High cards have potential risk, but strategic passing can mitigate it\n    if high_card_present:\n        if action_card_rank in high_cards:\n            result_score += 0.1  # Passing a high card could improve position\n    else:\n        result_score += 0.05  # A balanced hand with fewer high cards is less risky\n\n    # Include scores factor: lower scores at this point are better\n    current_score = common['scores'][common['current_player']]\n    result_score += (1 - current_score/100)  # Normalize with respect to typical game end condition\n    \n    # Factor in whether hearts have been broken; if not, passing hearts is safer\n    if not common['hearts_broken'] and action_card_suit == 'hearts':\n        result_score -= 0.1  # Penalty for passing hearts prematurely\n    \n    # Consider trick history and hearts broken status\n    if any(('Q' in card['rank'] and card['suit'] == 'spades') for card in current_player_info['faceup_cards']['collected_cards']):\n        result_score -= 0.3  # Penalty for already having the Queen of Spades\n    \n    # Normalizing the score to be between 0 and 1\n    result_score = max(0.0, min(result_score, 1.0))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Unpacking relevant information from the game state\n    current_player_index = state['common']['current_player']\n    scores = state['common']['scores']\n    hearts_broken = state['common']['hearts_broken']\n    legal_actions = state['legal_actions']\n    player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    \n    action_card = action['args'] # The card of the current action\n    action_rank, action_suit = action_card['rank'], action_card['suit']\n\n    # Factor 1: Current scores\n    max_score = max(scores)\n    # Normalizing scores (lower score means better position)\n    normalized_scores = [1 / (s + 1) for s in scores]  # +1 to avoid division by zero\n    score_factor = normalized_scores[current_player_index]\n    \n    # Factor 2: Hearts Broken\n    hearts_broken_factor = 1 if hearts_broken else 0.5  # Higher value if hearts are broken\n    \n    # Factor 3: Leading Strong Suffix Late (Strategic Retention)\n    action_is_strong_late = False\n    if hearts_broken:\n        high_ranks = {'K', 'Q', 'J', 'A'}\n        # Check if the action card is high rank and its suit has more cards in hand\n        cards_of_same_suit = [card for card in player_hand if card['suit'] == action_suit]\n        action_is_strong_late = action_rank in high_ranks and len(cards_of_same_suit) > 1\n    \n    strong_suit_factor = 1 if action_is_strong_late else 0.5\n\n    # Composite result score calculation\n    # We consider factors contributed to an estimated probability that this action helps the player maintain a lower score\n    result_score = 0.5 * score_factor + 0.3 * hearts_broken_factor + 0.2 * strong_suit_factor\n    \n    # Clamp the result_score to between 0 and 1\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n"
    ]
}