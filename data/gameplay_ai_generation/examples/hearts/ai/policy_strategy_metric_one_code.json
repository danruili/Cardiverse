{
    "game_description": "Many trick-taking games are not directly related to Bridge or Whist. Perhaps the foremost one is Hearts, which is truly one of the greatest card games ever devised for four players, each playing individually.\n\n### The Pack\n\nThe standard 52-card pack is used.\n\nShop Bicycle Hearts Playing Cards\n\n### Object of the Game\n\nTo be the player with the lowest score at the end of the game. When one player hits the agreed-upon score or higher, the game ends; and the player with the lowest score wins.\n\n### Card Values/scoring\n\nAt the end of each hand, players count the number of hearts they have taken as well as the queen of spades, if applicable. Hearts count as one point each and the queen counts 13 points.\n\nEach heart - 1 point\n\nThe Q - 13 points\n\nThe aggregate total of all scores for each hand must be a multiple of 26.\n\nThe game is usually played to 100 points (some play to 50).\n\nWhen a player takes all 13 hearts and the queen of spades in one hand, instead of losing 26 points, that player scores zero and each of his opponents score an additional 26 points.\n\n### The Deal\n\nDeal the cards one at a time, face down, clockwise. In a four-player game, each is dealt 13 cards; in a three-player game, the 2 of diamonds should be removed, and each player gets 17 cards; in a five-player game, the 2 of clubs should be removed so that each player will get 10 cards.\n\n### The Play\n\nThe player holding the 2 of clubs after the pass makes the opening lead. If the 2 has been removed for the three handed game, then the 3 of clubs is led.\n\nEach player must follow suit if possible. If a player is void of the suit led, a card of any other suit may be discarded. However, if a player has no clubs when the first trick is led, a heart or the queen of spades cannot be discarded. The highest card of the suit led wins a trick and the winner of that trick leads next. There is no trump suit.\n\nThe winner of the trick collects it and places it face down. Hearts may not be led until a heart or the queen of spades has been discarded. The queen does not have to be discarded at the first opportunity.\n\nThe queen can be led at any time.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": 1, \"winner\": null, \"is_over\": false, \"scores\": [0, 0, 0, 0], \"hearts_broken\": false, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"current_trick\": [{\"player\": 0, \"card\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}}, {\"player\": 1, \"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}], \"trick_history\": [[{\"player\": 3, \"card\": {\"rank\": \"2\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"9\", \"suit\": \"clubs\"}}, {\"player\": 1, \"card\": {\"rank\": \"8\", \"suit\": \"clubs\"}}, {\"player\": 2, \"card\": {\"rank\": \"3\", \"suit\": \"clubs\"}}]]}}, \"players\": [{\"public\": {\"tricks_won_count\": 1}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}]}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 12}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(rank: 3, suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 3-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick and will lead the next.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}, \"id\": 8}, \"msg\": \"Player 0 decides to: play-(rank: Q, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays Q-diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"diamonds\"}, \"id\": 2}, \"msg\": \"Player 1 decides to: play-(rank: 3, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 3-diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"rank\": \"2\", \"suit\": \"diamonds\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"rank\": \"K\", \"suit\": \"diamonds\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"rank\": \"5\", \"suit\": \"diamonds\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing information shared among all players about the state of the game.\", \"common.num_players\": \"The number of players in the game (integer).\", \"common.current_player\": \"The player who is to play next, represented as an integer index (0-based) identifying the player.\", \"common.direction\": \"The direction of play, 1 typically indicates clockwise (positive direction) (integer).\", \"common.winner\": \"The player who won the game (None indicates no winner yet) (nullable integer).\", \"common.is_over\": \"A boolean indicating if the game is over (true if yes, false if no).\", \"common.scores\": \"A list of integers representing the scores of each player in the game, indexed by player.\", \"common.hearts_broken\": \"A boolean indicating if hearts have been broken (true if yes, false if no).\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck (integer).\", \"common.faceup_cards.current_trick\": \"A list representing the current trick, detailing which players have played what cards, each entry is a dictionary with 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"common.faceup_cards.trick_history\": \"A list of lists showing the history of all completed tricks, each trick shown as a list of dictionaries, where each dictionary contains 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"players\": \"A list containing individual dictionaries for each player, indexed by player number (0-based).\", \"players[].public.tricks_won_count\": \"The number of tricks won by this player (integer).\", \"players[].facedown_cards.hand_size\": \"The number of cards remaining in this player's hand (integer).\", \"players[].faceup_cards.collected_cards\": \"A list of cards (each a dictionary with 'rank' and 'suit') that this player has won in previous tricks.\", \"players[2].public.current_player\": \"Boolean to indicate if this player is the current player (true if yes, only for the player whose turn it is).\", \"players[2].facedown_cards.hand\": \"A list of dictionaries, each containing 'rank' and 'suit', representing the cards currently in this player's hand. Only shown for the current player.\", \"recent_history\": \"A list of dictionaries logging the recent actions and events in the game, detailing actions by player ID and messages.\", \"recent_history[].type\": \"The type of entry in the history log. It can be 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of a player associated with an action or turn end event (integer).\", \"recent_history[].action\": \"A dictionary detailing an action taken by a player; includes the action type and the arguments ('rank' and 'suit') of the card played.\", \"recent_history[].msg\": \"A descriptive string message detailing the particular event or state change.\", \"recent_history[].role\": \"The role of the message, usually null unless specified differently.\", \"legal_actions\": \"A list of allowable actions for the current player; each action is a dictionary containing 'action' type and 'args', which further details the 'rank' and 'suit' of the card that can be played.\"}",
    "policy_list": [
        "**Risk of Taking Heart**\nThis metric assesses the potential risk of collecting a heart card in a trick based on the current game state. It considers the likelihood of opponents playing hearts or the queen of spades and the player's ability to follow or avoid these suits.\n**Potential for Shooting the Moon**\nThis metric measures the potential for a player to collect all heart cards and the queen of spades ('shooting the moon'). It evaluates the player's current hand, the cards already played, and the remaining cards to estimate the feasibility of achieving this state.\n**Control of the Lead**\nThis metric evaluates the strategic advantage of controlling the lead in the current hand. It considers the player's ability to dictate the suit of play and force opponents into disadvantageous plays based on known game history and remaining cards.\n**Suit Shortage**\nThis metric assesses the player's shortage in each suit, indicating liability to void in a suit. A higher shortage may allow strategic discard opportunities or a safe disposition when lacking the leading suit, affecting both immediate and strategic actions.\n**Avoid Taking Points**\nFocus on avoiding winning tricks that contain hearts or the queen of spades. Play low cards of a suit whenever possible, especially when hearts or the queen of spades are likely to be played by opponents.\n**Shoot the Moon**\nAttempt to win all the hearts and the queen of spades in a single hand. This involves carefully tracking which cards have been played and ensuring you can win the remaining high-point cards.\n**Pass High Cards Strategically**\nDuring the passing phase, pass high cards that are not well-supported by lower cards in the same suit. This reduces the risk of winning unwanted tricks when following suit.\n**Lead Strong Suits Late in the Game**\nConserve your strongest suit for later when hearts have been broken and strategic plays are necessary. This allows you to control the flow of the game and potentially bleed opponents of their beneficial cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_index = common[\"current_player\"]\n    current_player_hand = players[current_player_index][\"facedown_cards\"][\"hand\"]\n\n    # Extract the action's card to evaluate\n    card_action = action[\"args\"]\n\n    # Initialize metrics for calculating the score\n    risk_of_taking_heart = 0.0\n    potential_for_shooting_moon = 0.0\n    control_of_lead = 0.0\n    suit_shortage = 0.0\n    avoid_taking_points = 0.0\n\n    # Evaluate Risk of Taking Heart\n    # If the card action is likely a trick taker and trick contains hearts or queen of spades\n    current_trick = common[\"faceup_cards\"][\"current_trick\"]\n    if card_action[\"suit\"] == \"hearts\" or (card_action[\"rank\"] == \"Q\" and card_action[\"suit\"] == \"spades\"):\n        risk_of_taking_heart = 1.0\n    elif any(card[\"card\"][\"suit\"] == \"hearts\" for card in current_trick):\n        risk_of_taking_heart = 0.7\n\n    # Evaluate Potential for Shooting the Moon\n    collected_hearts = [card for card in players[current_player_index][\"faceup_cards\"][\"collected_cards\"] if card[\"suit\"] == \"hearts\"]\n    has_queen_spades = any(card[\"rank\"] == \"Q\" and card[\"suit\"] == \"spades\" for card in current_player_hand)\n    remaining_hearts = len([card for card in current_player_hand if card[\"suit\"] == \"hearts\"])\n\n    if len(collected_hearts) + remaining_hearts == 13 and has_queen_spades:\n        potential_for_shooting_moon = 1.0\n\n    # Evaluate Control of the Lead\n    if len(current_trick) == 0 or all(card[\"suit\"] != card_action[\"suit\"] for card in (c[\"card\"] for c in current_trick)):\n        control_of_lead = 1.0\n\n    # Evaluate Suit Shortage\n    suits = [\"hearts\", \"spades\", \"diamonds\", \"clubs\"]\n    suit_counts = {suit: 0 for suit in suits}\n    for card in current_player_hand:\n        suit_counts[card[\"suit\"]] += 1\n    suit_shortage = min(suit_counts.values()) / len(current_player_hand)\n\n    # Evaluate Avoid Taking Points\n    low_ranks = [\"2\", \"3\", \"4\", \"5\"]\n    if card_action[\"rank\"] in low_ranks:\n        avoid_taking_points = 1.0\n\n    # Calculate the reward value\n    result_score = (\n        (1 - risk_of_taking_heart) * 0.2 +\n        potential_for_shooting_moon * 0.4 +\n        control_of_lead * 0.2 +\n        suit_shortage * 0.1 +\n        avoid_taking_points * 0.1\n    )\n\n    # Return a score as a normalized value between 0 and 1\n    return max(0.0, min(1.0, result_score))\n"
    ]
}