{
    "game_description": "Many trick-taking games are not directly related to Bridge or Whist. Perhaps the foremost one is Hearts, which is truly one of the greatest card games ever devised for four players, each playing individually.\n\n### The Pack\n\nThe standard 52-card pack is used.\n\nShop Bicycle Hearts Playing Cards\n\n### Object of the Game\n\nTo be the player with the lowest score at the end of the game. When one player hits the agreed-upon score or higher, the game ends; and the player with the lowest score wins.\n\n### Card Values/scoring\n\nAt the end of each hand, players count the number of hearts they have taken as well as the queen of spades, if applicable. Hearts count as one point each and the queen counts 13 points.\n\nEach heart - 1 point\n\nThe Q - 13 points\n\nThe aggregate total of all scores for each hand must be a multiple of 26.\n\nThe game is usually played to 100 points (some play to 50).\n\nWhen a player takes all 13 hearts and the queen of spades in one hand, instead of losing 26 points, that player scores zero and each of his opponents score an additional 26 points.\n\n### The Deal\n\nDeal the cards one at a time, face down, clockwise. In a four-player game, each is dealt 13 cards; in a three-player game, the 2 of diamonds should be removed, and each player gets 17 cards; in a five-player game, the 2 of clubs should be removed so that each player will get 10 cards.\n\n### The Play\n\nThe player holding the 2 of clubs after the pass makes the opening lead. If the 2 has been removed for the three handed game, then the 3 of clubs is led.\n\nEach player must follow suit if possible. If a player is void of the suit led, a card of any other suit may be discarded. However, if a player has no clubs when the first trick is led, a heart or the queen of spades cannot be discarded. The highest card of the suit led wins a trick and the winner of that trick leads next. There is no trump suit.\n\nThe winner of the trick collects it and places it face down. Hearts may not be led until a heart or the queen of spades has been discarded. The queen does not have to be discarded at the first opportunity.\n\nThe queen can be led at any time.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": 1, \"winner\": null, \"is_over\": false, \"scores\": [0, 0, 0, 0], \"hearts_broken\": false, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"current_trick\": [{\"player\": 0, \"card\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}}, {\"player\": 1, \"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}], \"trick_history\": [[{\"player\": 3, \"card\": {\"rank\": \"2\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"9\", \"suit\": \"clubs\"}}, {\"player\": 1, \"card\": {\"rank\": \"8\", \"suit\": \"clubs\"}}, {\"player\": 2, \"card\": {\"rank\": \"3\", \"suit\": \"clubs\"}}]]}}, \"players\": [{\"public\": {\"tricks_won_count\": 1}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}]}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 12}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(rank: 3, suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 3-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick and will lead the next.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}, \"id\": 8}, \"msg\": \"Player 0 decides to: play-(rank: Q, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays Q-diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"diamonds\"}, \"id\": 2}, \"msg\": \"Player 1 decides to: play-(rank: 3, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 3-diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"rank\": \"2\", \"suit\": \"diamonds\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"rank\": \"K\", \"suit\": \"diamonds\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"rank\": \"5\", \"suit\": \"diamonds\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing information shared among all players about the state of the game.\", \"common.num_players\": \"The number of players in the game (integer).\", \"common.current_player\": \"The player who is to play next, represented as an integer index (0-based) identifying the player.\", \"common.direction\": \"The direction of play, 1 typically indicates clockwise (positive direction) (integer).\", \"common.winner\": \"The player who won the game (None indicates no winner yet) (nullable integer).\", \"common.is_over\": \"A boolean indicating if the game is over (true if yes, false if no).\", \"common.scores\": \"A list of integers representing the scores of each player in the game, indexed by player.\", \"common.hearts_broken\": \"A boolean indicating if hearts have been broken (true if yes, false if no).\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck (integer).\", \"common.faceup_cards.current_trick\": \"A list representing the current trick, detailing which players have played what cards, each entry is a dictionary with 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"common.faceup_cards.trick_history\": \"A list of lists showing the history of all completed tricks, each trick shown as a list of dictionaries, where each dictionary contains 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"players\": \"A list containing individual dictionaries for each player, indexed by player number (0-based).\", \"players[].public.tricks_won_count\": \"The number of tricks won by this player (integer).\", \"players[].facedown_cards.hand_size\": \"The number of cards remaining in this player's hand (integer).\", \"players[].faceup_cards.collected_cards\": \"A list of cards (each a dictionary with 'rank' and 'suit') that this player has won in previous tricks.\", \"players[2].public.current_player\": \"Boolean to indicate if this player is the current player (true if yes, only for the player whose turn it is).\", \"players[2].facedown_cards.hand\": \"A list of dictionaries, each containing 'rank' and 'suit', representing the cards currently in this player's hand. Only shown for the current player.\", \"recent_history\": \"A list of dictionaries logging the recent actions and events in the game, detailing actions by player ID and messages.\", \"recent_history[].type\": \"The type of entry in the history log. It can be 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of a player associated with an action or turn end event (integer).\", \"recent_history[].action\": \"A dictionary detailing an action taken by a player; includes the action type and the arguments ('rank' and 'suit') of the card played.\", \"recent_history[].msg\": \"A descriptive string message detailing the particular event or state change.\", \"recent_history[].role\": \"The role of the message, usually null unless specified differently.\", \"legal_actions\": \"A list of allowable actions for the current player; each action is a dictionary containing 'action' type and 'args', which further details the 'rank' and 'suit' of the card that can be played.\"}",
    "policy_list": [
        "**Early Game Defense and Control**\nFocus on playing lower value cards during the early rounds to avoid winning tricks that might contain penalty cards such as hearts or the queen of spades. Prioritize voiding yourself of a suit if possible to gain more control over which cards to play when void. If voiding isn't possible, try to maintain control by following suit with the lowest card, reducing the chance of winning undesirable tricks."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player_hand = state[\"players\"][current_player_index][\"facedown_cards\"][\"hand\"]\n    current_trick = state[\"common\"][\"faceup_cards\"][\"current_trick\"]\n    hearts_broken = state[\"common\"][\"hearts_broken\"]\n    scores = state[\"common\"][\"scores\"]\n    \n    # Map ranks to values for comparison\n    rank_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                  '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n    \n    # Calculate current total score for the player\n    player_score = scores[current_player_index]\n\n    # Evaluate the proposed action\n    card_to_play = action[\"args\"]\n    card_rank = rank_order[card_to_play[\"rank\"]]\n    card_suit = card_to_play[\"suit\"]\n\n    # Determine if the action follows the current trick's suit\n    if current_trick:\n        lead_card = current_trick[0][\"card\"]\n        lead_suit = lead_card[\"suit\"]\n        follows_suit = card_suit == lead_suit\n    else:\n        follows_suit = False\n\n    # Calculate how many penalty points the player has collected so far\n    collected_cards = state[\"players\"][current_player_index][\"faceup_cards\"][\"collected_cards\"]\n    penalty_points = sum(1 for card in collected_cards if card[\"suit\"] == \"hearts\") + \\\n                     sum(13 for card in collected_cards if card[\"rank\"] == \"Q\" and card[\"suit\"] == \"spades\")\n\n    # Calculate score based on the current state and the proposed action\n    score = 1.0  # Start with a perfect score\n    if not follows_suit:\n        # If player decides to void a suit or discard penalty card early, encourage slightly\n        score -= 0.1 * penalty_points / 26\n    if penalty_points > 0:\n        # Penalize accumulated penalty points\n        score *= (1 - penalty_points / 26)\n    if card_suit == \"hearts\" or (card_rank == rank_order[\"Q\"] and card_suit == \"spades\"):\n        # Discourage playing penalty cards unless strategically valid (could be shooting the moon)\n        score -= 0.2\n\n    # Ensure scores are within bounds\n    result_score = max(0, min(1, score))\n    return result_score\n"
    ]
}