{
    "game_description": "Many trick-taking games are not directly related to Bridge or Whist. Perhaps the foremost one is Hearts, which is truly one of the greatest card games ever devised for four players, each playing individually.\n\n### The Pack\n\nThe standard 52-card pack is used.\n\nShop Bicycle Hearts Playing Cards\n\n### Object of the Game\n\nTo be the player with the lowest score at the end of the game. When one player hits the agreed-upon score or higher, the game ends; and the player with the lowest score wins.\n\n### Card Values/scoring\n\nAt the end of each hand, players count the number of hearts they have taken as well as the queen of spades, if applicable. Hearts count as one point each and the queen counts 13 points.\n\nEach heart - 1 point\n\nThe Q - 13 points\n\nThe aggregate total of all scores for each hand must be a multiple of 26.\n\nThe game is usually played to 100 points (some play to 50).\n\nWhen a player takes all 13 hearts and the queen of spades in one hand, instead of losing 26 points, that player scores zero and each of his opponents score an additional 26 points.\n\n### The Deal\n\nDeal the cards one at a time, face down, clockwise. In a four-player game, each is dealt 13 cards; in a three-player game, the 2 of diamonds should be removed, and each player gets 17 cards; in a five-player game, the 2 of clubs should be removed so that each player will get 10 cards.\n\n### The Play\n\nThe player holding the 2 of clubs after the pass makes the opening lead. If the 2 has been removed for the three handed game, then the 3 of clubs is led.\n\nEach player must follow suit if possible. If a player is void of the suit led, a card of any other suit may be discarded. However, if a player has no clubs when the first trick is led, a heart or the queen of spades cannot be discarded. The highest card of the suit led wins a trick and the winner of that trick leads next. There is no trump suit.\n\nThe winner of the trick collects it and places it face down. Hearts may not be led until a heart or the queen of spades has been discarded. The queen does not have to be discarded at the first opportunity.\n\nThe queen can be led at any time.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": 1, \"winner\": null, \"is_over\": false, \"scores\": [0, 0, 0, 0], \"hearts_broken\": false, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"current_trick\": [{\"player\": 0, \"card\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}}, {\"player\": 1, \"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}], \"trick_history\": [[{\"player\": 3, \"card\": {\"rank\": \"2\", \"suit\": \"clubs\"}}, {\"player\": 0, \"card\": {\"rank\": \"9\", \"suit\": \"clubs\"}}, {\"player\": 1, \"card\": {\"rank\": \"8\", \"suit\": \"clubs\"}}, {\"player\": 2, \"card\": {\"rank\": \"3\", \"suit\": \"clubs\"}}]]}}, \"players\": [{\"public\": {\"tricks_won_count\": 1}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}]}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 11}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"tricks_won_count\": 0}, \"facedown_cards\": {\"hand_size\": 12}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"clubs\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(rank: 3, suit: clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 3-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick and will lead the next.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"Q\", \"suit\": \"diamonds\"}, \"id\": 8}, \"msg\": \"Player 0 decides to: play-(rank: Q, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays Q-diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"rank\": \"3\", \"suit\": \"diamonds\"}, \"id\": 2}, \"msg\": \"Player 1 decides to: play-(rank: 3, suit: diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 3-diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"rank\": \"2\", \"suit\": \"diamonds\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"rank\": \"K\", \"suit\": \"diamonds\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"rank\": \"5\", \"suit\": \"diamonds\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing information shared among all players about the state of the game.\", \"common.num_players\": \"The number of players in the game (integer).\", \"common.current_player\": \"The player who is to play next, represented as an integer index (0-based) identifying the player.\", \"common.direction\": \"The direction of play, 1 typically indicates clockwise (positive direction) (integer).\", \"common.winner\": \"The player who won the game (None indicates no winner yet) (nullable integer).\", \"common.is_over\": \"A boolean indicating if the game is over (true if yes, false if no).\", \"common.scores\": \"A list of integers representing the scores of each player in the game, indexed by player.\", \"common.hearts_broken\": \"A boolean indicating if hearts have been broken (true if yes, false if no).\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck (integer).\", \"common.faceup_cards.current_trick\": \"A list representing the current trick, detailing which players have played what cards, each entry is a dictionary with 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"common.faceup_cards.trick_history\": \"A list of lists showing the history of all completed tricks, each trick shown as a list of dictionaries, where each dictionary contains 'player' (integer) and 'card' (dictionary with 'rank' and 'suit').\", \"players\": \"A list containing individual dictionaries for each player, indexed by player number (0-based).\", \"players[].public.tricks_won_count\": \"The number of tricks won by this player (integer).\", \"players[].facedown_cards.hand_size\": \"The number of cards remaining in this player's hand (integer).\", \"players[].faceup_cards.collected_cards\": \"A list of cards (each a dictionary with 'rank' and 'suit') that this player has won in previous tricks.\", \"players[2].public.current_player\": \"Boolean to indicate if this player is the current player (true if yes, only for the player whose turn it is).\", \"players[2].facedown_cards.hand\": \"A list of dictionaries, each containing 'rank' and 'suit', representing the cards currently in this player's hand. Only shown for the current player.\", \"recent_history\": \"A list of dictionaries logging the recent actions and events in the game, detailing actions by player ID and messages.\", \"recent_history[].type\": \"The type of entry in the history log. It can be 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The ID of a player associated with an action or turn end event (integer).\", \"recent_history[].action\": \"A dictionary detailing an action taken by a player; includes the action type and the arguments ('rank' and 'suit') of the card played.\", \"recent_history[].msg\": \"A descriptive string message detailing the particular event or state change.\", \"recent_history[].role\": \"The role of the message, usually null unless specified differently.\", \"legal_actions\": \"A list of allowable actions for the current player; each action is a dictionary containing 'action' type and 'args', which further details the 'rank' and 'suit' of the card that can be played.\"}",
    "policy_list": [
        "**Refined Strategy for Avoiding Points**\nTo implement the refined strategy effectively, the player should continuously evaluate the Risk of Taking Heart metric. If the risk is high, focus on discarding higher cards of other suits when void in the leading suit, and avoid playing into opponents\u2019 strengths. To prevent taking the Queen of Spades, track the play history and anticipate likely occurrences. If conditions appear favorable and the Potential for Shooting the Moon is surprisingly possible, consider temporarily collecting hearts or the queen to capitalize on this rare strategic opportunity. Additionally, monitor Suit Shortage to create opportunities for controlled disposals that avoid penalty points, and use Control of the Lead wisely to steer gameplay away from unfavorable suit situations by forcing opponents into difficult plays.",
        "**Shoot the Moon Strategy Refined**\nTo successfully shoot the moon, ensure that you have a strong initial hand, preferably with high-ranking cards in each suit, particularly in hearts and spades. Monitor the 'Potential for Shooting the Moon' metric closely by considering whether you can collect all hearts and the queen based on the game state. Be mindful of the 'Control of the Lead' metric; gaining lead control early may allow you to set the pace and dictate the action. Under 'Suit Shortage', exploit suits where you are strong and opponents are likely weak, helping capture necessary tricks. A critical moment to act is notably when no hearts or the queen have been played, suggesting safely leveraging your strong cards while angling to collect hearts later. If opposition makes collecting all penalty cards impossible, abort the moonshot promptly\u2014lower the 'Risk of Taking Heart' by playing safer strategies to avoid high-value tricks.",
        "**Pass High Cards Strategically**\nTo effectively 'Pass High Cards Strategically,' ensure that high cards are passed from suits where they are not supported by many low cards. Consider the current game state: focus on suits where having high cards would result in unwanted trick wins. When the risk of taking hearts or the queen of spades is significant, pass high cards from those suits. If shooting the moon is possible, adjust your strategy to retain high cards. Additionally, consider your control over the lead; if you're likely to lead, passing high cards helps avoid risky tricks. Finally, use your suit shortage to your advantage, and pass high cards from suits where you aren't close to voiding, as voiding provides more discarding opportunities.",
        "**Refined Strong Suits Strategy**\nRefinement of the strategy involves firstly defining 'late in the game' as when a majority of hearts have already been played and the queen of spades has either been played or is likely to be played soon. Strategic plays become necessary when the Risk of Taking Heart is low for the player and high for opponents, providing a favorable scenario. The strategy conditions on: (1) 'Risk of Taking Heart' being low for the AI player, meaning few hearts or the queen remain with opponents. (2) 'Control of the Lead' metric is high for the AI, allowing it to dictate the choice of suit to play strategically. (3) Observation that opponents are likely to hold high-value cards or penalty cards from remaining play history. Under these states, the player should lead their strongest suits to maximize control over the game and influence opponents negatively by forcing them to play high or unfavorable cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Unpack the state and action\n    common = state['common']\n    current_player_id = common['current_player']\n    players = state['players']\n    current_player = players[current_player_id]\n    hand = current_player['facedown_cards']['hand']\n    legal_actions = state['legal_actions']\n\n    # Strategy considerations\n    # Calculate risk of taking hearts based on number of hearts in hand\n    hearts_in_hand = [card for card in hand if card['suit'] == 'hearts']\n    risk_heart = len(hearts_in_hand) / len(hand)\n\n    # Calculate suit shortage based on total suits available\n    suits_in_hand = set(card['suit'] for card in hand)\n    suit_shortage = 4 - len(suits_in_hand)  # There are 4 suits total\n\n    # Control of lead based on hand control with dangerous cards\n    control_of_lead = 0\n    if common['faceup_cards']['current_trick'] == []:  # Player can lead\n        dangerous_cards = [card for card in hand if (card['rank'] == 'Q' and card['suit'] == 'spades')]\n        control_of_lead = len(dangerous_cards) / len(hand)\n\n    # Potential to shoot the moon if conditions seem possible\n    shooting_moon = 0.25 if any(card['suit'] == 'hearts' or (card['rank'] == 'Q' and card['suit'] == 'spades') for card in hand) else 0\n\n    # Assume current action is selecting one of the legal actions\n    action_card = action['args']  # Use 'args' to access the card played\n    action_suit = action_card['suit']\n\n    # Estimate score using heuristic weights\n    risk_weight = 0.3 * risk_heart + 0.3 * suit_shortage + 0.2 * control_of_lead + 0.2 * shooting_moon\n\n    # Determine estimated probability of winning based on risk\n    result_score = float(1 - risk_weight)\n\n    # Keep result in range [0, 1]\n    result_score = max(0.0, min(result_score, 1.0))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary variables from the state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    hearts_broken = state[\"common\"][\"hearts_broken\"]\n    scores = state[\"common\"][\"scores\"]\n    \n    # Get the current player details\n    player = state[\"players\"][current_player]\n    hand = player[\"facedown_cards\"][\"hand\"]\n    tricks_won = player[\"public\"][\"tricks_won_count\"]\n    collected_cards = player[\"faceup_cards\"][\"collected_cards\"]\n\n    # Calculate the number of hearts and the Queen of Spades in collected cards\n    hearts_count = sum(1 for card in collected_cards if card['suit'] == 'hearts')\n    queen_of_spades = any(card['rank'] == 'Q' and card['suit'] == 'spades' for card in collected_cards)\n    \n    # Initialize base score\n    base_score = 1 - (scores[current_player] / 100)\n    \n    # Adjust base score based on potential to \"Shoot the Moon\"\n    potential_to_shoot_moon = 0\n    if queen_of_spades:\n        potential_to_shoot_moon -= 0.1  # Negative impact if Queen of Spades is already collected\n    if hearts_count > 0:\n        potential_to_shoot_moon -= 0.05 * hearts_count  # Negative impact for each heart collected\n\n    # Adjustments based on action\n    played_rank = action['args']['rank']\n    played_suit = action['args']['suit']\n\n    # Favor actions with high cards if Shooting the Moon seems plausible\n    if not hearts_broken and len(hand) > 10:  # Early in the game, focus on collecting tricks\n        if played_suit == 'hearts' or (played_suit == 'spades' and played_rank == 'Q'):\n            potential_to_shoot_moon += 0.1\n        \n    # Consolidate adjustments and ensure final score is within bounds\n    result_score = base_score + potential_to_shoot_moon\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n\n",
        "\ndef score(state: dict, action: str) -> float:\n    import numpy as np\n    \n    def get_card_value(card):\n        if card['suit'] == 'hearts':\n            return 1\n        elif card['rank'] == 'Q' and card['suit'] == 'spades':\n            return 13\n        return 0\n    \n    def calculate_max_loss(hand):\n        return sum(get_card_value(card) for card in hand)\n    \n    def estimate_future_score(hearts_broken, current_trick):\n        # Estimate based on cards already in play\n        score = 0\n        for play in current_trick:\n            score += get_card_value(play['card'])\n        return score\n    \n    current_player_index = state['common']['current_player']\n    current_player_state = state['players'][current_player_index]\n    hand = current_player_state['facedown_cards']['hand']\n    \n    # Current potential maximum penalty that player is holding\n    max_loss = calculate_max_loss(hand)\n    \n    # Current trick analysis\n    current_trick = state['common']['faceup_cards']['current_trick']\n    score_for_current_trick = estimate_future_score(state['common']['hearts_broken'], current_trick)\n    \n    # Calculate current risk\n    opponent_scores = [score for i, score in enumerate(state['common']['scores']) if i != current_player_index]\n    current_score = state['common']['scores'][current_player_index]\n    \n    # Simple probability heuristic: risk management based on potential card penalty\n    potential_penalty = (max_loss + score_for_current_trick) / 26.0\n    score_to_win = max(opponent_scores) - current_score\n    \n    reward = (1 - potential_penalty) * (1 - score_to_win / 100.0)\n    \n    # Ensure reward is within 0 to 1\n    result_score = max(0, min(1, reward))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Utility function to convert rank to value for comparison\n    def rank_to_value(rank):\n        if rank.isdigit():\n            return int(rank)\n        else:\n            return {'J': 11, 'Q': 12, 'K': 13, 'A': 14}[rank]\n\n    # Risk of taking heart or queen\n    player_hand = state['players'][state['common']['current_player']]['facedown_cards']['hand']\n    current_trick = state['common']['faceup_cards']['current_trick']\n    hearts_in_hand = sum(1 for card in player_hand if card['suit'] == 'hearts')\n    queen_of_spades_in_hand = any(card['rank'] == 'Q' and card['suit'] == 'spades' for card in player_hand)\n    \n    hearts_in_play = sum(1 for card in current_trick if card['card']['suit'] == 'hearts')\n    queen_in_play = any(card['card']['rank'] == 'Q' and card['card']['suit'] == 'spades' for card in current_trick)\n    \n    hearts_in_opponents = 13 - hearts_in_play - hearts_in_hand\n    \n    queen_in_opponents = not queen_of_spades_in_hand if not queen_in_play else False\n    \n    risk_factor = (1 - hearts_in_opponents / 13) * (0.5 if queen_in_opponents else 1)\n    \n    # Control of lead\n    trick_history = state['common']['faceup_cards']['trick_history']\n    wins_by_player = [0] * state['common']['num_players']\n    for trick in trick_history:\n        winner = max(trick, key=lambda x: (x['card']['suit'], rank_to_value(x['card']['rank'])))['player']\n        wins_by_player[winner] += 1\n    \n    lead_control = wins_by_player[state['common']['current_player']] / (sum(wins_by_player) or 1)\n    lead_factor = lead_control\n    \n    # Potential penalty risk\n    collected_cards = [card for player in state['players'] for card in player['faceup_cards']['collected_cards']]\n    high_value_cards = [('Q', 'spades')] + [(str(rank), 'hearts') if rank <= 10 else (rank, 'hearts') for rank in range(2, 15)]\n    remaining_high_value_cards = [card for card in high_value_cards if card not in [(c['rank'], c['suit']) for c in collected_cards]]\n    \n    potential_penalty = sum(1 for card in remaining_high_value_cards if card in [(c['rank'], c['suit']) for c in player_hand])\n    penalty_factor = 1 - (potential_penalty / len(remaining_high_value_cards))\n    \n    # Calculate probability score\n    result_score = min(max(risk_factor * lead_factor * penalty_factor, 0), 1)\n    \n    return result_score\n"
    ]
}