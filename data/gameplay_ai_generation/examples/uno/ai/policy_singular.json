{
    "game_description": "**Setup**\n\n1.  **Players:** The game is for 2 to 6 players. Player 0 is the first player to start the game.\n2.  **The Deal:** Each player is dealt **7 cards**.\n3.  **The Piles:** The remaining cards are placed face-down to form the **Draw Pile**. The very top card of the Draw Pile is flipped over and placed face-up next to it to start the **Discard Pile**.\n4.  **First Card's Effect:** The first flipped card's effect is applied immediately at the start of the game:\n    * **Reverse:** The direction of play is reversed. The player to Player 0's right (Player 5 in a 6-player game) goes first.\n    * **Skip:** Player 0's first turn is skipped. The player next in the sequence goes first.\n    * **Draw 2:** Player 0 must draw 2 cards, and their turn is skipped.\n    * **Wild/Wild Draw 4:** A Wild card cannot be the first card. If one is flipped, it is shuffled back into the deck and a new card is drawn.\n\n**How to Play**\n\n1.  **The Objective:** Be the first player to get rid of all the cards in your hand.\n\n2.  **Taking Your Turn:** On your turn, you must match the card on top of the Discard Pile by playing a card from your hand with either the same **color**, **number**, or **action symbol**.\n    * For example, if the top card is a blue '7', you can play any blue card or any color '7' card. You could also play a special action card like a blue 'Skip' or a blue 'Draw 2'.\n\n3.  **Drawing a Card:** If you do not have a card that matches the one on the Discard Pile, you must draw one card from the Draw Pile. **This ends your turn.** You cannot play the card you just drew until your next turn.\n\n4.  **Special Cards:**\n    * **Skip:** The next player in the turn order loses their turn.\n    * **Reverse:** The direction of play reverses. If play was moving left, it now moves right, and vice-versa.\n    * **Draw 2:** The next player must draw 2 cards and loses their turn.\n    * **Wild:** The player who plays this card can change the active color to any of the four colors (red, green, blue, or yellow).\n    * **Wild Draw 4:** This card allows you to change the active color. Additionally, the next player must draw 4 cards and loses their turn.\n        * **Important Rule:** You can only play a **Wild Draw 4** card if you **do not have any other cards in your hand that match the color** of the card on the Discard Pile. You may still play it if you have cards of the same number/symbol but a different color.\n\n**Winning the Game & Scoring**\n\n1.  **Winning:** The game round ends as soon as one player plays their last card. That player is the winner of the round.\n\n2.  **Scoring:** Once a player wins, the other players receive penalty points based on the cards left in their hands:\n    * **Number Cards (0-9):** Face value (e.g., a '7' is worth 7 points)\n    * **Draw 2, Reverse, Skip:** 20 points each\n    * **Wild, Wild Draw 4:** 50 points each\n    The winner of the round receives 0 points.\n\n**Additional Rules**\n\n* **Empty Draw Pile:** If the Draw Pile ever runs out of cards, the Discard Pile (except for the very top card) is shuffled and turned over to become the new Draw Pile.\n",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": -1, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 75}, \"faceup_cards\": {\"played_cards\": [{\"color\": \"green\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"black\", \"trait\": \"wild_draw_4\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"0\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"skip\", \"type\": \"action\"}, {\"color\": \"black\", \"trait\": \"wild\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}], \"target_card\": {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}}}, \"players\": [{\"public\": {}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 10}, \"faceup_cards\": {}}, {\"public\": {\"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"color\": \"red\", \"trait\": \"reverse\", \"type\": \"action\"}, {\"color\": \"green\", \"trait\": \"4\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"blue\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"9\", \"type\": \"number\"}]}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays yellow-2-number.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 4}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_idx: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays yellow-reverse-action.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A dictionary containing non-player-related information about the game state.\", \"num_players\": \"The total number of players participating in the game.\", \"current_player\": \"The index of the player whose turn it currently is.\", \"direction\": \"The current direction of play. 1 indicates clockwise, and -1 indicates counter-clockwise.\", \"winner\": \"The index of the player who has won the game, if the game is over. Otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"facedown_cards\": \"A dictionary containing information about cards that are not visible to players.\", \"deck_size\": \"The number of cards remaining in the draw deck.\", \"faceup_cards\": \"A dictionary containing information about cards that have been played or are otherwise visible.\", \"played_cards\": \"A list of dictionaries, each representing a card that has been played. Each card dictionary includes fields such as 'color', 'trait', and 'type'.\", \"target_card\": \"The current card at the top of the played pile that the players must match on their turn.\", \"players\": \"A list of dictionaries, each representing a player's state in the game.\", \"public\": \"A dictionary containing public information about the player, excluding card-related fields.\", \"private\": \"A dictionary containing private information about the player, which is not visible to other players.\", \"facedown_cards:hand_size\": \"The number of cards held by a player. This is visible to all players.\", \"facedown_cards:hand\": \"A list of dictionaries, each representing a card in the current player's hand. This is only visible to the current player.\", \"recent_history\": \"A list of recent actions and events in the game, described as a series of dictionaries with details such as action type, player ID, and messages.\", \"legal_actions\": \"A list of dictionaries representing the possible actions the current player can take. Each dictionary includes the action type and any necessary arguments.\"}",
    "policy_list": [
        "**Optimal Card Play**\nFocus on playing high-value cards or cards with powerful effects (such as Wilds or Draw 2) early in the game when there are opportunities. Reserve Wild Draw 4 cards when possible for situations where you can guarantee its effectiveness. Utilize color matching opportunistically to manage hand diversity, and play number-matching cards to keep a balanced hand. Know when to strategically draw a card to optimize future turns"
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def evaluate_hand_size(current_hand_size, other_hand_sizes):\n        total_other_cards = sum(other_hand_sizes)\n        reward = 1 - (current_hand_size / (total_other_cards + current_hand_size))\n        return reward\n\n    def evaluate_card_play(target_card, played_card):\n        score = 0.5\n        if played_card['type'] == 'wild_draw_4':\n            score = 0.9\n        elif played_card['type'] == 'draw_2':\n            score = 0.8\n        elif played_card['type'] == 'skip' or played_card['type'] == 'reverse':\n            score = 0.7\n        elif played_card['color'] == target_card['color'] or played_card['trait'] == target_card['trait']:\n            score = 0.6\n        return score\n\n    def evaluate_legal_options(legal_actions_count):\n        return 0.1 * legal_actions_count\n\n    current_player_id = state['common']['current_player']\n    current_hand = state['players'][current_player_id]['facedown_cards']['hand']\n    current_hand_size = len(current_hand)\n\n    other_hand_sizes = [p['facedown_cards']['hand_size'] for i, p in enumerate(state['players']) if i != current_player_id]\n\n    # Main evaluation logic\n    hand_size_score = evaluate_hand_size(current_hand_size, other_hand_sizes)\n\n    played_card_idx = action['args']['card_idx']\n    played_card = current_hand[played_card_idx]\n    target_card = state['common']['faceup_cards']['target_card']\n\n    card_play_score = evaluate_card_play(target_card, played_card)\n\n    legal_actions_score = evaluate_legal_options(len(state['legal_actions']))\n\n    # Combine all scores into a weighted average for final score\n    result_score = 0.5 * hand_size_score + 0.3 * card_play_score + 0.2 * legal_actions_score\n    return result_score\n"
    ]
}