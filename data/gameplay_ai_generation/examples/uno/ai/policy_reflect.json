{
    "game_description": "**Setup**\n\n1.  **Players:** The game is for 2 to 6 players. Player 0 is the first player to start the game.\n2.  **The Deal:** Each player is dealt **7 cards**.\n3.  **The Piles:** The remaining cards are placed face-down to form the **Draw Pile**. The very top card of the Draw Pile is flipped over and placed face-up next to it to start the **Discard Pile**.\n4.  **First Card's Effect:** The first flipped card's effect is applied immediately at the start of the game:\n    * **Reverse:** The direction of play is reversed. The player to Player 0's right (Player 5 in a 6-player game) goes first.\n    * **Skip:** Player 0's first turn is skipped. The player next in the sequence goes first.\n    * **Draw 2:** Player 0 must draw 2 cards, and their turn is skipped.\n    * **Wild/Wild Draw 4:** A Wild card cannot be the first card. If one is flipped, it is shuffled back into the deck and a new card is drawn.\n\n**How to Play**\n\n1.  **The Objective:** Be the first player to get rid of all the cards in your hand.\n\n2.  **Taking Your Turn:** On your turn, you must match the card on top of the Discard Pile by playing a card from your hand with either the same **color**, **number**, or **action symbol**.\n    * For example, if the top card is a blue '7', you can play any blue card or any color '7' card. You could also play a special action card like a blue 'Skip' or a blue 'Draw 2'.\n\n3.  **Drawing a Card:** If you do not have a card that matches the one on the Discard Pile, you must draw one card from the Draw Pile. **This ends your turn.** You cannot play the card you just drew until your next turn.\n\n4.  **Special Cards:**\n    * **Skip:** The next player in the turn order loses their turn.\n    * **Reverse:** The direction of play reverses. If play was moving left, it now moves right, and vice-versa.\n    * **Draw 2:** The next player must draw 2 cards and loses their turn.\n    * **Wild:** The player who plays this card can change the active color to any of the four colors (red, green, blue, or yellow).\n    * **Wild Draw 4:** This card allows you to change the active color. Additionally, the next player must draw 4 cards and loses their turn.\n        * **Important Rule:** You can only play a **Wild Draw 4** card if you **do not have any other cards in your hand that match the color** of the card on the Discard Pile. You may still play it if you have cards of the same number/symbol but a different color.\n\n**Winning the Game & Scoring**\n\n1.  **Winning:** The game round ends as soon as one player plays their last card. That player is the winner of the round.\n\n2.  **Scoring:** Once a player wins, the other players receive penalty points based on the cards left in their hands:\n    * **Number Cards (0-9):** Face value (e.g., a '7' is worth 7 points)\n    * **Draw 2, Reverse, Skip:** 20 points each\n    * **Wild, Wild Draw 4:** 50 points each\n    The winner of the round receives 0 points.\n\n**Additional Rules**\n\n* **Empty Draw Pile:** If the Draw Pile ever runs out of cards, the Discard Pile (except for the very top card) is shuffled and turned over to become the new Draw Pile.\n",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": -1, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 75}, \"faceup_cards\": {\"played_cards\": [{\"color\": \"green\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"black\", \"trait\": \"wild_draw_4\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"0\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"skip\", \"type\": \"action\"}, {\"color\": \"black\", \"trait\": \"wild\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}], \"target_card\": {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}}}, \"players\": [{\"public\": {}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 10}, \"faceup_cards\": {}}, {\"public\": {\"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"color\": \"red\", \"trait\": \"reverse\", \"type\": \"action\"}, {\"color\": \"green\", \"trait\": \"4\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"blue\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"9\", \"type\": \"number\"}]}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays yellow-2-number.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 4}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_idx: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays yellow-reverse-action.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A dictionary containing non-player-related information about the game state.\", \"num_players\": \"The total number of players participating in the game.\", \"current_player\": \"The index of the player whose turn it currently is.\", \"direction\": \"The current direction of play. 1 indicates clockwise, and -1 indicates counter-clockwise.\", \"winner\": \"The index of the player who has won the game, if the game is over. Otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"facedown_cards\": \"A dictionary containing information about cards that are not visible to players.\", \"deck_size\": \"The number of cards remaining in the draw deck.\", \"faceup_cards\": \"A dictionary containing information about cards that have been played or are otherwise visible.\", \"played_cards\": \"A list of dictionaries, each representing a card that has been played. Each card dictionary includes fields such as 'color', 'trait', and 'type'.\", \"target_card\": \"The current card at the top of the played pile that the players must match on their turn.\", \"players\": \"A list of dictionaries, each representing a player's state in the game.\", \"public\": \"A dictionary containing public information about the player, excluding card-related fields.\", \"private\": \"A dictionary containing private information about the player, which is not visible to other players.\", \"facedown_cards:hand_size\": \"The number of cards held by a player. This is visible to all players.\", \"facedown_cards:hand\": \"A list of dictionaries, each representing a card in the current player's hand. This is only visible to the current player.\", \"recent_history\": \"A list of recent actions and events in the game, described as a series of dictionaries with details such as action type, player ID, and messages.\", \"legal_actions\": \"A list of dictionaries representing the possible actions the current player can take. Each dictionary includes the action type and any necessary arguments.\"}",
    "policy_list": [
        "**Balanced Color Play**\nMaintain a balance of colors in your hand to maximize flexibility and adaptability across changing game conditions. When having a low Hand Advantage, prioritize playing cards that prevent you from losing your diverse setup. In the midpoint of the game, focus on playing cards that maintain a high Playable Card Ratio and retain action cards primarily for critical transition points like change in direction or to counter an opponent's aggressive play. When colors are limited in your hand, use Wild cards strategically to maintain the optimal balance. Aim for a dynamic game that leverages both your color and action card potential to maintain the competitive edge.",
        "**Refined Action Card Utilization**\nTo effectively implement this strategy in gameplay, several conditions based on game state metrics should be considered: \n1. **Hand Advantage**: If you notice your hand size is significantly greater than opponents', prioritize playing action cards like Skip or Draw 2 to prevent opponents from shedding their cards quickly. Conversely, if your hand size is smaller, consider conserving these cards for future defensive plays.\n\n2. **Playable Card Ratio**: A low ratio indicates limited play options. Use Reverse or Wild cards to alter gameplay flow and potentially relieve pressure from your hand. When a high ratio exists, maintain pressure by leveraging Draw 2 or Skip cards to disrupt opponents while you continue to lower your card count.\n\n3. **Action Card Potential**: If you have multiple action cards, actively rotate through cards to maintain control. Use them to either speed up reducing your hand size or counteract threats by others when they have fewer cards.\n\n4. **Color Dominance**: With a hand dominated by one color, play Wild and Wild Draw 4 cards to set or maintain your dominant color. Use Skip and Draw 2 cards strategically to prevent others from breaking your flow, specifically when you have multiple cards of the set color to play consecutively.\n\nThrough these refined tactics, the AI can effectively impair opponents' progress, protect its standing in the game, and retain control over its strategic position, adapting to ever-changing dynamics as the game progresses.",
        "**Endgame Focus Redefined**\nThe strategy can be refined by emphasizing the game state conditions and metrics that should influence the decision to retain or play Wild and action cards. Critical moments are when the AI's Hand Advantage is significant\u2014meaning it has fewer cards than others, and when its Playable Card Ratio is high, indicating a favorable position to end the game quickly. Additionally, monitoring the Action Card Potential metric is crucial; having a sufficient number of action cards can help dictate the rounds' flow in your favor. In terms of game state conditions, prioritize keeping at least one Wild or action card if you are down to your final 2-3 cards. These cards should be played strategically when an opponent has equal or fewer cards than you, posing a direct threat to win. This refined strategy enables the AI to maintain flexibility while proactively controlling or disrupting opponents' opportunities to win.",
        "**Opponent Observation**\nOpponent Observation can be refined by incorporating metrics such as Hand Advantage and Color Dominance. Key moments to apply pressure include when opponents have recently drawn cards, indicating they lack matching colors or numbers. Analyzing Playable Card Ratio helps determine when to seize control of the game by forcing color shifts or action cards that disrupt opponent flow. A critical moment is when an opponent repeatedly skips playing or is frequently forced to draw, indicating they have a mismatched color that can be exploited by playing a Wild card and changing the color. Adjust the strategy based on observation, maintaining a balance between aggressive and defensive play in response to inferred weaknesses."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n    \n    current_player = state['common']['current_player']\n    hand = state['players'][current_player]['facedown_cards']['hand']\n    target_card = state['common']['faceup_cards']['target_card']\n\n    # Count color distribution in the player's hand\n    color_count = {'red': 0, 'green': 0, 'blue': 0, 'yellow': 0, 'black': 0}\n    for card in hand:\n        color_count[card['color']] += 1\n\n    # Calculate the proportion of each color in hand\n    hand_size = len(hand)\n    color_proportion = {color: count / hand_size for color, count in color_count.items()}\n\n    # Determine the type of action and its potential impact\n    if action['action'] == 'play':\n        card_to_play = hand[action['args']['card_idx']]\n        card_color = card_to_play['color']\n        card_trait = card_to_play['trait']\n        \n        # Calculate color balance factor\n        ideal_distribution = np.array([0.25, 0.25, 0.25, 0.25, 0])\n        actual_distribution = np.array([color_proportion[c] for c in ['red', 'green', 'blue', 'yellow', 'black']])\n        current_color_balance = np.abs(actual_distribution - ideal_distribution).sum() / 2\n        color_balance_factor = (color_proportion[card_color] + 1) / (1 + hand_size)\n        \n        # Determine if playing the card is strategically beneficial\n        beneficial_play = 0\n        if card_color == target_card['color'] or card_trait == target_card['trait'] or card_to_play['type'] == 'wild':\n            beneficial_play = 1\n        \n        # Calculate action power based on type of card\n        action_power = 0\n        if card_trait in {'reverse', 'skip', 'draw_2', 'wild_draw_4'}:\n            action_power = 0.3\n        if card_trait in {'wild', 'wild_draw_4'}:\n            action_power = 0.5\n        \n        # Adjust the score by current strategy (Balanced Color Play)\n        result_score = beneficial_play * (0.5 * action_power + 0.5 * color_balance_factor - current_color_balance)\n        \n    else:\n        # Default score when no play can be made\n        result_score = 0.1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from the game state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    direction = state[\"common\"][\"direction\"]\n    target_card = state[\"common\"][\"faceup_cards\"][\"target_card\"]\n    current_player_hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n    hand_size = len(current_player_hand)\n\n    # Calculate game metrics\n    opponent_hand_sizes = [\n        player[\"facedown_cards\"][\"hand_size\"] \n        for idx, player in enumerate(state[\"players\"]) \n        if idx != current_player\n    ]\n    \n    # Metric 1: Hand Advantage\n    average_opponent_hand_size = sum(opponent_hand_sizes) / len(opponent_hand_sizes)\n    hand_advantage = average_opponent_hand_size - hand_size\n    hand_advantage_score = max(0, min(1, 0.5 + hand_advantage / 10.0))\n\n    # Metric 2: Playable Card Ratio\n    playable_cards = [\n        card for card in current_player_hand \n        if card[\"color\"] == target_card[\"color\"] or \n           card[\"trait\"] == target_card[\"trait\"] or \n           card[\"type\"] == \"wild\"\n    ]\n    playable_ratio = len(playable_cards) / hand_size if hand_size > 0 else 0\n    playable_card_ratio_score = playable_ratio\n\n    # Metric 3: Action Card Potential\n    action_cards = [card for card in current_player_hand if card[\"type\"] == \"action\" or card[\"type\"] == \"wild\"]\n    action_card_potential_score = min(1, len(action_cards) / max(1, average_opponent_hand_size))\n\n    # Metric 4: Color Dominance\n    color_counts = {}\n    for card in current_player_hand:\n        if card[\"color\"] != \"black\":  # Ignore wild cards for color dominance\n            color_counts[card[\"color\"]] = color_counts.get(card[\"color\"], 0) + 1\n    dominant_color_count = max(color_counts.values(), default=0)\n    color_dominance_score = dominant_color_count / hand_size if hand_size > 0 else 0\n\n    # Weighted sum of metrics to create a final score\n    weights = [0.25, 0.25, 0.25, 0.25]  # Assigning equal weights for simplicity\n    result_score = (\n        weights[0] * hand_advantage_score +\n        weights[1] * playable_card_ratio_score +\n        weights[2] * action_card_potential_score +\n        weights[3] * color_dominance_score\n    )\n\n    return min(1, max(0, result_score))\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Retrieve the common game state information\n    common = state[\"common\"]\n    num_players = common[\"num_players\"]\n    current_player = common[\"current_player\"]\n    is_over = common[\"is_over\"]\n    direction = common[\"direction\"]\n    deck_size = common[\"facedown_cards\"][\"deck_size\"]\n    target_card = common[\"faceup_cards\"][\"target_card\"]\n\n    # Retrieve the current player's information\n    player_state = state[\"players\"][current_player]\n    hand = player_state[\"facedown_cards\"][\"hand\"]\n    hand_size = len(hand)\n\n    # Calculate Hand Advantage\n    min_hand_size = min(player[\"facedown_cards\"][\"hand_size\"] for player in state[\"players\"])\n    hand_advantage = min_hand_size / hand_size if hand_size > 0 else 1\n\n    # Calculate Playable Card Ratio\n    playable_cards = [card for card in hand if card[\"color\"] == target_card[\"color\"] or \n                      card[\"trait\"] == target_card[\"trait\"] or card[\"type\"] == \"wild\"]\n    playable_card_ratio = len(playable_cards) / hand_size if hand_size > 0 else 0\n\n    # Calculate Action Card Potential\n    action_cards = [card for card in hand if card[\"type\"] == \"action\" or card[\"type\"] == \"wild\"]\n    action_card_potential = len(action_cards) / hand_size if hand_size > 0 else 0\n\n    # Important strategy checks - endgame focus\n    endgame_focus = int(hand_size <= 3)\n\n    # Assess potential threats from other players\n    opponent_threat = sum(1 for player in state[\"players\"] \n                          if player[\"facedown_cards\"][\"hand_size\"] <= hand_size and player[\"public\"].get(\"current_player\", False) is False)\n\n    # Reward Calculation\n    # Base weight for different strategies\n    weights = {\n        \"hand_advantage\": 0.3,\n        \"playable_card_ratio\": 0.3,\n        \"action_card_potential\": 0.2,\n        \"endgame_focus\": 0.1,\n        \"opponent_threat\": 0.1,\n    }\n\n    # Calculate reward using a weighted sum of the relevant factors\n    result_score = (\n        weights[\"hand_advantage\"] * hand_advantage +\n        weights[\"playable_card_ratio\"] * playable_card_ratio +\n        weights[\"action_card_potential\"] * action_card_potential * endgame_focus -\n        weights[\"opponent_threat\"] * opponent_threat\n    )\n\n    # Cap the result_score to be within 0 and 1\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant data from the state\n    common_info = state[\"common\"]\n    current_player_info = state[\"players\"][common_info[\"current_player\"]]\n    legal_actions = state[\"legal_actions\"]\n    current_player_hand = current_player_info[\"facedown_cards\"][\"hand\"]\n    deck_size = common_info[\"facedown_cards\"][\"deck_size\"]\n\n    # Number of remaining cards in current player's hand\n    current_hand_size = len(current_player_hand)\n    \n    # Check if the current action is allowed\n    if action not in legal_actions:\n        return 0.0\n    \n    # Evaluate if the action leads to a winning move (playing last card)\n    if current_hand_size == 1 and action[\"action\"] == \"play\":\n        return 1.0\n    \n    # Evaluate hand advantage and possible strategies\n    card_to_play = current_player_hand[action[\"args\"][\"card_idx\"]]\n    target_card = common_info[\"faceup_cards\"][\"target_card\"]\n    \n    # Assess the played card impact\n    color_advantage = 1 if card_to_play[\"color\"] == target_card[\"color\"] else 0\n    type_advantage = 1 if card_to_play[\"type\"] == target_card[\"type\"] else 0\n    hand_advantage = (1 - current_hand_size / sum(player[\"facedown_cards\"][\"hand_size\"] for player in state[\"players\"]))\n    \n    # Evaluate the effect of special cards (wild, draw2, etc.)\n    special_card_content = {\"skip\": 0.3, \"reverse\": 0.3, \"draw_2\": 0.4, \"wild\": 0.5, \"wild_draw_4\": 0.5}\n    action_type_advantage = special_card_content.get(card_to_play[\"trait\"], 0)\n    \n    # Calculate base score\n    base_score = 0.2 * color_advantage + 0.2 * type_advantage + 0.2 * action_type_advantage + 0.4 * hand_advantage\n    \n    # Modify score based on opponent observations\n    opponent_draw_rate = sum(1 for event in state[\"recent_history\"] if \"draw\" in event[\"msg\"]) / len(state[\"recent_history\"])\n    high_draw_pressure = 0.1 if opponent_draw_rate > 0.3 else 0.0\n    score_adjustment = high_draw_pressure\n    \n    # Consider color distribution if using a Wild\n    if card_to_play[\"type\"] == \"wild\":\n        max_color_count = max(sum(1 for card in current_player_hand if card[\"color\"] == color or card[\"color\"] == \"black\") for color in [\"red\", \"green\", \"blue\", \"yellow\"])\n        color_dominance = max_color_count / current_hand_size\n        score_adjustment += 0.15 * color_dominance\n    \n    # Final result score\n    result_score = min(1.0, max(0.0, base_score + score_adjustment))\n    return result_score\n"
    ]
}