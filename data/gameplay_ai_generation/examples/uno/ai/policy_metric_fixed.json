{
    "game_description": "**Setup**\n\n1.  **Players:** The game is for 2 to 6 players. Player 0 is the first player to start the game.\n2.  **The Deal:** Each player is dealt **7 cards**.\n3.  **The Piles:** The remaining cards are placed face-down to form the **Draw Pile**. The very top card of the Draw Pile is flipped over and placed face-up next to it to start the **Discard Pile**.\n4.  **First Card's Effect:** The first flipped card's effect is applied immediately at the start of the game:\n    * **Reverse:** The direction of play is reversed. The player to Player 0's right (Player 5 in a 6-player game) goes first.\n    * **Skip:** Player 0's first turn is skipped. The player next in the sequence goes first.\n    * **Draw 2:** Player 0 must draw 2 cards, and their turn is skipped.\n    * **Wild/Wild Draw 4:** A Wild card cannot be the first card. If one is flipped, it is shuffled back into the deck and a new card is drawn.\n\n**How to Play**\n\n1.  **The Objective:** Be the first player to get rid of all the cards in your hand.\n\n2.  **Taking Your Turn:** On your turn, you must match the card on top of the Discard Pile by playing a card from your hand with either the same **color**, **number**, or **action symbol**.\n    * For example, if the top card is a blue '7', you can play any blue card or any color '7' card. You could also play a special action card like a blue 'Skip' or a blue 'Draw 2'.\n\n3.  **Drawing a Card:** If you do not have a card that matches the one on the Discard Pile, you must draw one card from the Draw Pile. **This ends your turn.** You cannot play the card you just drew until your next turn.\n\n4.  **Special Cards:**\n    * **Skip:** The next player in the turn order loses their turn.\n    * **Reverse:** The direction of play reverses. If play was moving left, it now moves right, and vice-versa.\n    * **Draw 2:** The next player must draw 2 cards and loses their turn.\n    * **Wild:** The player who plays this card can change the active color to any of the four colors (red, green, blue, or yellow).\n    * **Wild Draw 4:** This card allows you to change the active color. Additionally, the next player must draw 4 cards and loses their turn.\n        * **Important Rule:** You can only play a **Wild Draw 4** card if you **do not have any other cards in your hand that match the color** of the card on the Discard Pile. You may still play it if you have cards of the same number/symbol but a different color.\n\n**Winning the Game & Scoring**\n\n1.  **Winning:** The game round ends as soon as one player plays their last card. That player is the winner of the round.\n\n2.  **Scoring:** Once a player wins, the other players receive penalty points based on the cards left in their hands:\n    * **Number Cards (0-9):** Face value (e.g., a '7' is worth 7 points)\n    * **Draw 2, Reverse, Skip:** 20 points each\n    * **Wild, Wild Draw 4:** 50 points each\n    The winner of the round receives 0 points.\n\n**Additional Rules**\n\n* **Empty Draw Pile:** If the Draw Pile ever runs out of cards, the Discard Pile (except for the very top card) is shuffled and turned over to become the new Draw Pile.\n",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"direction\": -1, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 75}, \"faceup_cards\": {\"played_cards\": [{\"color\": \"green\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"black\", \"trait\": \"wild_draw_4\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"0\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"skip\", \"type\": \"action\"}, {\"color\": \"black\", \"trait\": \"wild\", \"type\": \"wild\"}, {\"color\": \"yellow\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}], \"target_card\": {\"color\": \"yellow\", \"trait\": \"reverse\", \"type\": \"action\"}}}, \"players\": [{\"public\": {}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 10}, \"faceup_cards\": {}}, {\"public\": {\"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"color\": \"red\", \"trait\": \"reverse\", \"type\": \"action\"}, {\"color\": \"green\", \"trait\": \"4\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"2\", \"type\": \"number\"}, {\"color\": \"blue\", \"trait\": \"3\", \"type\": \"number\"}, {\"color\": \"red\", \"trait\": \"9\", \"type\": \"number\"}]}, \"faceup_cards\": {}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays yellow-2-number.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 4}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_idx: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays yellow-reverse-action.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A dictionary containing non-player-related information about the game state.\", \"num_players\": \"The total number of players participating in the game.\", \"current_player\": \"The index of the player whose turn it currently is.\", \"direction\": \"The current direction of play. 1 indicates clockwise, and -1 indicates counter-clockwise.\", \"winner\": \"The index of the player who has won the game, if the game is over. Otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"facedown_cards\": \"A dictionary containing information about cards that are not visible to players.\", \"deck_size\": \"The number of cards remaining in the draw deck.\", \"faceup_cards\": \"A dictionary containing information about cards that have been played or are otherwise visible.\", \"played_cards\": \"A list of dictionaries, each representing a card that has been played. Each card dictionary includes fields such as 'color', 'trait', and 'type'.\", \"target_card\": \"The current card at the top of the played pile that the players must match on their turn.\", \"players\": \"A list of dictionaries, each representing a player's state in the game.\", \"public\": \"A dictionary containing public information about the player, excluding card-related fields.\", \"private\": \"A dictionary containing private information about the player, which is not visible to other players.\", \"facedown_cards:hand_size\": \"The number of cards held by a player. This is visible to all players.\", \"facedown_cards:hand\": \"A list of dictionaries, each representing a card in the current player's hand. This is only visible to the current player.\", \"recent_history\": \"A list of recent actions and events in the game, described as a series of dictionaries with details such as action type, player ID, and messages.\", \"legal_actions\": \"A list of dictionaries representing the possible actions the current player can take. Each dictionary includes the action type and any necessary arguments.\"}",
    "policy_list": [
        "**Hand Advantage**\nThe difference between the number of cards in the AI's hand and the average number of cards in other players' hands. A lower number of cards in hand, compared to opponents, indicates a stronger position in the game. This metric encourages discarding cards and staying ahead in card count.",
        "**Playable Card Ratio**\nThe ratio of playable cards in the hand compared to the total number of cards in hand. A higher ratio indicates better flexibility in playing a card every turn, increasing chances of finding a match and controlling the game flow.",
        "**Action Card Potential**\nThe count of powerful action cards (Skip, Reverse, Draw 2, Wild, Wild Draw 4) in the AI's hand. Having a higher count of these cards provides strategic control over the game's direction and influences opponents' turns, allowing defensive or aggressive play styles according to the state of the game.",
        "**Color Dominance**\nThe extent to which the AI's hand is dominated by one color, indicating the ability to play sequences of cards without drawing. This also impacts the AI's strategic decisions with Wild cards to maintain color dominance and control the flow of cards played."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    \"\"\"\n    Calculate the action-value score for a given game state and action.\n\n    :param state: A dictionary containing the entire game state, including player hands, played cards, and current turn.\n    :param action: An action to be evaluated, taken from the list of legal actions.\n    :return: A float representing the probability of winning the game based on the hand advantage.\n    \"\"\"\n\n    # Extract important game state information\n    current_player_index = state[\"common\"][\"current_player\"]\n    num_players = state[\"common\"][\"num_players\"]\n    current_hand_size = len(state[\"players\"][current_player_index][\"facedown_cards\"][\"hand\"])\n    \n    # Calculate the average hand size of other players\n    other_hand_sizes = [\n        state[\"players\"][i][\"facedown_cards\"][\"hand_size\"]\n        for i in range(num_players) if i != current_player_index\n    ]\n    avg_other_hand_size = sum(other_hand_sizes) / len(other_hand_sizes)\n\n    # Calculate the hand advantage value\n    hand_advantage = avg_other_hand_size - current_hand_size\n\n    # Calculate the normalized score based on hand advantage\n    max_hand_difference = 7  # Assuming no player should have more than 14 cards initially\n    min_hand_difference = -7  # Representing the best scenario where you have 7 cards less than others\n\n    # Normalize the hand advantage to a [0, 1] range\n    result_score = (hand_advantage - min_hand_difference) / (max_hand_difference - min_hand_difference)\n    \n    # Make sure the score is within [0, 1]\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract card information\n    current_player_data = state['players'][state['common']['current_player']]\n    hand = current_player_data['facedown_cards']['hand']\n    target_card = state['common']['faceup_cards']['target_card']\n    \n    # Calculate the number of playable cards\n    def is_playable(card, target_card):\n        # A card is playable if it matches the color, number/action, or is a wild card\n        return (card['color'] == target_card['color'] or\n                card['trait'] == target_card['trait'] or\n                card['type'] == 'wild')\n    \n    playable_cards = [card for card in hand if is_playable(card, target_card)]\n    num_playable = len(playable_cards)\n    total_cards = len(hand)\n    \n    # Playable Card Ratio\n    playable_card_ratio = num_playable / total_cards if total_cards > 0 else 0\n\n    # Calculate the score as an estimate of winning probability\n    # Use the Playable Card Ratio as the basis for the score\n    score_continuous = playable_card_ratio\n    \n    # Consider other factors if needed; for now, prioritize playable card ratio\n    result_score = score_continuous\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Estimates the probability of winning the game for the current player \n    given the game state and a planned action.\n    \n    Inputs:\n    - state: dict, the game state as described in the input format\n    - action: dict, the planned action for the current player\n    \n    Returns:\n    - result_score: float, an estimate of the probability of winning, between 0 and 1\n    \"\"\"\n    common = state['common']\n    players = state['players']\n    current_player_idx = common['current_player']\n    current_player = players[current_player_idx]\n    \n    # Start with a base probability based on number of cards left in the hand\n    hand_size = len(current_player['facedown_cards']['hand'])\n    num_players = common['num_players']\n    \n    # Reduce the probability based on the current hand size\n    base_probability = max(0, 1 - (hand_size - 1) / (7 * num_players))\n    \n    # Calculate action card potential\n    action_cards = ['skip', 'reverse', 'draw_2', 'wild', 'wild_draw_4']\n    action_card_count = sum(1 for card in current_player['facedown_cards']['hand'] \n                            if card['trait'] in action_cards)\n    \n    # Assess the potential of playing an action card\n    if action['action'] == 'play':\n        action_card = current_player['facedown_cards']['hand'][action['args']['card_idx']]\n        if action_card['trait'] in action_cards:\n            action_card_reward = 0.2\n        else:\n            action_card_reward = 0.0\n    else:\n        action_card_reward = 0.0\n    \n    # Score calculation as a function of hand size and action card potential\n    result_score = base_probability + (action_card_count / hand_size) * 0.15 + action_card_reward\n    result_score = min(1.0, max(0.0, result_score))  # Clamping result score to a range of 0 to 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant components from the state\n    current_player_index = state['common']['current_player']\n    current_player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    target_card = state['common']['faceup_cards']['target_card']\n    color_dominance_score = 0\n    matching_card_score = 0\n    hand_size_score = 0\n    action_score = 0\n\n    # Check if the hand is empty and handle appropriately\n    if len(current_player_hand) == 0:\n        return 1.0  # Return winning state since no cards left to play\n\n    # Calculate color dominance\n    color_count = {'red': 0, 'green': 0, 'blue': 0, 'yellow': 0, 'black': 0}\n    for card in current_player_hand:\n        color_count[card['color']] += 1\n    \n    # Score based on the most common color\n    dominant_color_count = max(color_count.values())\n    color_dominance_score = dominant_color_count / len(current_player_hand)\n\n    # Score based on matching cards with the target card's color, number, or action\n    for card in current_player_hand:\n        if (card['color'] == target_card['color'] or \n            card['trait'] == target_card['trait'] or \n            card['type'] == 'wild'):\n            matching_card_score += 0.1\n\n    matching_card_score = min(matching_card_score, 0.5)  # Cap this score at 0.5\n\n    # Score based on the player's hand size (smaller is better)\n    hand_size_score = (7 - len(current_player_hand)) / 7\n\n    # Determine action impact on the score\n    if action['action'] == 'play':\n        played_card = current_player_hand[action['args']['card_idx']]\n        if played_card['color'] == 'black':  # Wild cards\n            action_score += 0.2\n\n    # Calculate final score based on the combined weights\n    result_score = 0.4 * color_dominance_score + 0.3 * matching_card_score + 0.2 * hand_size_score + 0.1 * action_score\n\n    return result_score\n"
    ]
}