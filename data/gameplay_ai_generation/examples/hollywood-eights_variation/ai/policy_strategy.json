{
    "game_description": "## Card Merge Challenge: Refined Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards remaining in the draw pile.\n- **Starter Pile:** Top card visible to all players.\n- **Player Order:** Determined at the beginning of the game, visible to all.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Merged Sequences:** Sequences successfully completed by all players and visible to all.\n  - **Scoreboard:** Cumulative points of each player.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to themselves.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, 4, 5, 6, 7, 9, 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Unique Symbol:** A special symbol on each card for merging purposes.\n- **Special Card:** Eight acts as a wild card for both suit and symbol changes.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with additional unique symbols on each card.\n\n#### **Initial Dealing:**\n- Deal five cards face down to each player.\n- Remaining cards form the stock pile.\n- Top card of the stock pile is turned up to start the starter pile. If this is an eight, it is inserted into the deck, and another card is drawn.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Card:**\n   - Place one card from their hand on the starter pile.\n   - Prerequisite: The card must match the top card by rank, suit, or symbol.\n2. **Merge Sequence:**\n   - Create a sequence with the top card of the starter pile combined with cards from the player's hand.\n   - Required: Sequence of three or more cards sharing a common symbol.\n   - Additional Rule: Only one merged sequence can be created per turn.\n3. **Use Wild Card (Eight):**\n   - Play an eight to change suit and symbol trajectory.\n4. **Draw a Card:**\n   - Draw from the stock if they can\u2019t play, OR opt to strategically draw despite alternatives.\n   - Prerequisite: No matching card in hand, or by strategic choice.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player left of the dealer starts.\n2. Turns proceed in clockwise order.\n3. During a turn, a player:\n   - Plays a card or merges.\n   - Draws a card (if needed).\n   - The turn ends and passes to the next player.\n4. Play continues until:\n   - A player reaches 150 points through merges and regular gameplay.\n\n#### **Winning Conditions:**\n- A player wins upon reaching 150 points through successful merges and card play.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Merge Bonus:** Successfully merging a sequence grants a 10-point bonus per card in the sequence.\n- **Wild Card Usage:** Eights alter game flow, allowing suit and symbol changes for new sequence formation.\n- **Score Recording:** Results recorded across up to four ongoing games, scoring detailed sequentially.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- The top card of the starter pile.\n- Merged sequences on the table.\n- Cumulative scores of all players.\n\n#### **Hidden Information:**\n- Identity of cards in the stock pile.\n- Cards in opponents' hands.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Points awarded for each merged sequence:\n  - Each successful merge contributes to the score based on the number of cards in the sequence.\n  - Align scoring with the traditional logic: Face cards = 10 points; Eights = 20 points; Ace = 15 points; Numbered cards = Pip value.\n\n#### **Objective Achievement:**\n- Game winner is the first to score 150 points through strategic merging and regular gameplay, leveraging visible and hidden game states smartly.\n\nThis refined description ensures the gameplay mechanics are well-aligned with the new merging objective and special card function, providing clarity and ensuring strategic depth.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"starter_pile\": {\"top_card\": {\"rank\": \"8\", \"suit\": \"diamonds\", \"symbol\": \"8\"}}, \"facedown_cards\": {\"stock_size\": 29}, \"discard_pile\": [{\"rank\": \"J\", \"suit\": \"spades\", \"symbol\": \"J\"}, {\"rank\": \"J\", \"suit\": \"hearts\", \"symbol\": \"J\"}, {\"rank\": \"2\", \"suit\": \"hearts\", \"symbol\": \"2\"}, {\"rank\": \"Q\", \"suit\": \"hearts\", \"symbol\": \"Q\"}]}, \"players\": [{\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 3}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 7}}, {\"public\": {\"score\": 0, \"merged_sequences\": [], \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\", \"symbol\": \"K\"}, {\"rank\": \"6\", \"suit\": \"hearts\", \"symbol\": \"6\"}, {\"rank\": \"7\", \"suit\": \"spades\", \"symbol\": \"7\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\", \"symbol\": \"Q\"}]}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 4}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 2-hearts-2 onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays Q-hearts-Q onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"use_wild\", \"args\": {\"card_idx\": 1, \"new_suit\": \"spades\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: use_wild-(card_idx: 1, new_suit: spades)\"}, {\"type\": \"info\", \"msg\": \"Player 0 uses a wild card to change the suit to spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"draw\", \"id\": 0}, \"msg\": \"Player 1 decides to: draw\"}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 2}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section storing information shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"The index of the player whose turn it is currently.\", \"common.winner\": \"The index of the player who has won the game, if the game is over; otherwise null.\", \"common.is_over\": \"A boolean indicating if the game has ended.\", \"common.starter_pile\": \"A section storing details of the pile where the top card is placed.\", \"common.starter_pile.top_card\": \"The top card of the starter pile, represented as a dictionary with rank, suit, and symbol.\", \"common.facedown_cards\": \"A section containing facedown cards not visible to players, like the stock of available cards.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stock.\", \"common.discard_pile\": \"A list of cards that have been played and discarded from the starter pile.\", \"players\": \"An array where each element holds details about a specific player.\", \"players[].public\": \"Information visible to all players for each specific player.\", \"players[].public.score\": \"The total score of the player.\", \"players[].public.merged_sequences\": \"A list of sequences of cards the player has successfully merged.\", \"players[].facedown_cards\": \"Details of the cards a player holds in their hand.\", \"players[].facedown_cards.hand_size\": \"The number of cards in a player's hand when the actual cards aren't provided.\", \"players[].facedown_cards.hand\": \"A list of cards held by the current player, visible in detail.\", \"recent_history\": \"A list of recent actions taken in the game, presented chronologically.\", \"recent_history[].type\": \"The type of event recorded in the history, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player executing the action or event being recorded.\", \"recent_history[].action\": \"Details of the action taken by a player, including the action type and any necessary arguments.\", \"recent_history[].msg\": \"A message describing the action or event in prose.\", \"recent_history[].role\": \"Typically null in this context, but might reference who's affected by an action in other instances.\", \"legal_actions\": \"A list of the actions currently available to the current player.\", \"legal_actions[].action\": \"The type of action a player can take, e.g., 'play', 'draw'.\", \"legal_actions[].args\": \"Any arguments necessary to perform the action, such as indices for card selection.\"}",
    "policy_list": [
        "**Maximize Merging Opportunities**\nFocus on forming merged sequences by holding and strategically playing cards with matching symbols, especially when the top card of the starter pile can complete or start a merge sequence.",
        "**Control with Wild Cards**\nUtilize eights to change suits and symbols proactively, either to facilitate your own future merges or to disrupt potential merges by opponents. Retain wild cards until they can maximize disruption or create opportunity.",
        "**Adaptive Card Matching**\nAdaptively play cards that maintain flexibility in hand, focusing on maintaining a range of ranks, suits, and symbols to ensure future plays and potential merges. Prioritize discarding cards with less utility to your strategy.",
        "**Strategic Drawing**\nChoose to draw cards strategically, even when a play is possible, to accumulate cards needed for potential future merges or to obtain a more favorable hand configuration."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    # Extract common information\n    current_player_index = state['common']['current_player']\n    top_card = state['common']['starter_pile']['top_card']\n    legal_actions = state['legal_actions']\n    \n    # Extract player-specific information\n    player_info = state['players'][current_player_index]\n    player_hand = player_info['facedown_cards']['hand']\n    player_score = player_info['public']['score']\n    \n    # Extract action information\n    action_details = None\n    for a in legal_actions:\n        if a == eval(action):  # Correct way to match the action with eval (Assumes safe input)\n            action_details = a\n            break\n    \n    if action_details is None:\n        raise ValueError(\"Invalid action\")\n    \n    # Reward variables\n    reward = 0.5  # Start with a neutral reward\n    \n    # Factor 1: Ability to merge sequences\n    if action_details['action'] == 'merge':\n        merge_success = len(action_details['args']['cards']) >= 3\n        if merge_success:\n            reward += 0.3 * len(action_details['args']['cards'])  # Higher weight per card\n        else:\n            reward -= 0.2\n    \n    # Factor 2: Strategic use of wild card\n    if action_details['action'] == 'use_wild':\n        reward += 0.2\n    \n    # Factor 3: Card matching opportunities\n    # Play cards that match top_card by rank, suit, or symbol\n    if action_details['action'] == 'play':\n        card_idx = action_details['args']['card_idx']\n        play_card = player_hand[card_idx]\n        \n        if (play_card['rank'] == top_card['rank'] or \n            play_card['suit'] == top_card['suit'] or\n            play_card['symbol'] == top_card['symbol'] or\n            play_card['rank'] == '8'):  # account for wild card\n                reward += 0.2\n    \n    # Factor 4: Current scores and progress towards winning\n    target_score = 150\n    score_progress = player_score / target_score\n    reward += score_progress * 0.1\n    \n    # Clamping return value between 0 and 1\n    result_score = max(0, min(1, reward))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract useful information from the game state\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_idx = common[\"current_player\"]\n    current_player = players[current_player_idx]\n\n    # Define some utility functions\n    def calculate_hand_strength(hand: list) -> float:\n        \"\"\"Calculate a rough 'strength' of a player's hand based on cards it holds.\"\"\"\n        rank_value = {\n            'A': 11, 'K': 10, 'Q': 10, 'J': 10,\n            '10': 10, '9': 9, '8': 20, '7': 7,\n            '6': 6, '5': 5, '4': 4, '3': 3, '2': 2\n        }\n        return sum([rank_value[card['rank']] for card in hand])\n    \n    def is_action_promising(action: dict) -> float:\n        \"\"\"Assess the potential of a given action. Higher if the action advances game state strategically.\"\"\"\n        if action[\"action\"] == \"play\":\n            # Check if playing the card aids in merging or disrupting opponents\n            card_idx = action[\"args\"][\"card_idx\"]\n            card_to_play = current_player[\"facedown_cards\"][\"hand\"][card_idx]\n            if card_to_play[\"rank\"] == \"8\":\n                # Wild cards have high strategic value\n                return 0.8\n            return 0.5  # Neutral playing of card\n        \n        elif action[\"action\"] == \"merge\":\n            # Merging sequences yields immediate bonus points\n            return 0.9\n        \n        elif action[\"action\"] == \"draw\":\n            # Drawing a card can be strategic when out of options\n            return 0.2\n        \n        return 0.0  # Default for unknown action types\n\n    # Analyze current player details\n    current_hand = current_player[\"facedown_cards\"].get(\"hand\", [])\n    hand_strength = calculate_hand_strength(current_hand)\n    current_score = current_player[\"public\"][\"score\"]\n    potential_action_score = 0.0\n\n    for legal_action in state[\"legal_actions\"]:\n        if legal_action[\"action\"] == action:\n            potential_action_score = is_action_promising(legal_action)\n            break\n\n    # Score calculation combining hand, score, and action outcomes\n    # Normalize hand strength to a max possible of 20 (wild card value multiplied by a potential full hand of eights)\n    max_hand_strength = 20 * 5\n    normalized_hand = min(hand_strength, max_hand_strength) / max_hand_strength\n    \n    # Normalize player's score to the win condition (150)\n    winning_score = 150\n    normalized_score = min(current_score, winning_score) / winning_score\n    \n    # Weight different aspects of evaluation\n    hand_weight = 0.4\n    score_weight = 0.4\n    action_weight = 0.2\n\n    # Final result score\n    result_score = (\n        hand_weight * normalized_hand +\n        score_weight * normalized_score +\n        action_weight * potential_action_score\n    )\n\n    return result_score\n\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract important information from the game state\n    current_player_index = state[\"common\"][\"current_player\"]\n    hand = state[\"players\"][current_player_index][\"facedown_cards\"].get(\"hand\", [])\n    starter_top_card = state[\"common\"][\"starter_pile\"][\"top_card\"]\n    legal_actions = state[\"legal_actions\"]\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n    \n    # Check if the given action is in the legal actions\n    if action not in [act[\"action\"] for act in legal_actions]:\n        return 0.0  # Invalid actions should yield a score of 0\n\n    # Assess current score and proximity to winning\n    current_score = state[\"players\"][current_player_index][\"public\"][\"score\"]\n    \n    # Evaluate hand utility\n    hand_ranks = [card[\"rank\"] for card in hand]\n    hand_suits = [card[\"suit\"] for card in hand]\n    hand_symbols = [card[\"symbol\"] for card in hand]\n    \n    # Check flexibility of player's hand\n    unique_ranks = len(set(hand_ranks))\n    unique_suits = len(set(hand_suits))\n    unique_symbols = len(set(hand_symbols))\n    \n    # Potential for merging\n    potential_merge = unique_symbols >= 3\n    \n    # Action assessment\n    if action == \"play\":\n        # Assume args is a dictionary with card_idx for play actions\n        card_idx = [act[\"args\"][\"card_idx\"] for act in legal_actions if act[\"action\"] == \"play\" and act == action][0]\n        selected_card = hand[card_idx]\n        \n        # Check if playing the wild card (Eight) changes the game state significantly\n        if selected_card[\"rank\"] == \"8\":\n            suit_change_value = 0.1  # Small increase for flexibility\n        else:\n            suit_change_value = 0.0\n        \n        # Check card matching and strategic discard\n        match_rank = selected_card[\"rank\"] == starter_top_card[\"rank\"]\n        match_suit = selected_card[\"suit\"] == starter_top_card[\"suit\"]\n        match_symbol = selected_card[\"symbol\"] == starter_top_card[\"symbol\"]\n        \n        card_match_value = 0.2 if match_rank or match_suit or match_symbol else 0.0\n        strategic_discard_value = 0.15 if unique_ranks > 3 and unique_suits > 3 else 0.0\n        \n        # Calculate value for play action\n        action_value = 0.3 + card_match_value + strategic_discard_value + suit_change_value\n    \n    elif action == \"merge\":\n        # Assess the benefit of merging sequences\n        if potential_merge:\n            merge_value = 0.5\n        else:\n            merge_value = 0.1  # Potential but not immediately possible\n            \n        action_value = merge_value\n    \n    elif action == \"draw\":\n        # Drawing usually provides flexibility when hand options are low\n        if len(hand) > 4 or stock_size < 10:\n            draw_value = 0.1  # Less beneficial if options are abundant or stock is low\n        else:\n            draw_value = 0.3\n        \n        action_value = draw_value\n    \n    else:\n        action_value = 0.0\n    \n    # Calculate a probability-like score based on the player's score and action assessment\n    max_score = 150\n    proximity_to_win = current_score / max_score\n    result_score = proximity_to_win + action_value\n    result_score = min(result_score, 1.0)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Estimate the probability of winning based on the current game state and planned action.\n    \n    Parameters:\n    - state: dict - Represents the game state.\n    - action: dict - Represents the action the player intends to take.\n    \n    Returns:\n    - float: Estimated probability of winning (between 0 and 1).\n    \"\"\"\n    # Unpack required information from the game state\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_index]\n    \n    # Extract player's hand size and score\n    player_hand_size = current_player[\"facedown_cards\"].get(\"hand_size\", len(current_player[\"facedown_cards\"].get(\"hand\", [])))\n    player_score = current_player[\"public\"][\"score\"]\n    \n    # Calculate remaining points to win\n    points_to_win = 150 - player_score\n    \n    # Consider the stock size (cards available to draw)\n    stock_size = state[\"common\"][\"facedown_cards\"][\"stock_size\"]\n\n    # Consider the score related action (e.g., merging)\n    if action[\"action\"] == \"play\":\n        score_contribution = 0.02 * player_hand_size\n    elif action[\"action\"] == \"merge\":\n        # Score contribution example: assume each card in a merge gives 10 points\n        score_contribution = 0.1 * len(action.get(\"args\", {}).get(\"cards\", []))\n    elif action[\"action\"] == \"draw\":\n        score_contribution = -0.05  # Drawing may delay immediate scoring\n    elif action[\"action\"] == \"use_wild\":\n        score_contribution = 0.05  # Could change game dynamic\n\n    # Calculate estimated win probability based on:\n    #  - Current score relative to winning score\n    #  - Impact of action on scoring (e.g., merge size)\n    result_score = min(1.0, max(0.0, 1 - (points_to_win / 150) + score_contribution))\n    \n    return result_score\n"
    ]
}