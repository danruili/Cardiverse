{
    "game_description": "## Card Merge Challenge: Refined Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards remaining in the draw pile.\n- **Starter Pile:** Top card visible to all players.\n- **Player Order:** Determined at the beginning of the game, visible to all.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Merged Sequences:** Sequences successfully completed by all players and visible to all.\n  - **Scoreboard:** Cumulative points of each player.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to themselves.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, 4, 5, 6, 7, 9, 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Unique Symbol:** A special symbol on each card for merging purposes.\n- **Special Card:** Eight acts as a wild card for both suit and symbol changes.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with additional unique symbols on each card.\n\n#### **Initial Dealing:**\n- Deal five cards face down to each player.\n- Remaining cards form the stock pile.\n- Top card of the stock pile is turned up to start the starter pile. If this is an eight, it is inserted into the deck, and another card is drawn.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Card:**\n   - Place one card from their hand on the starter pile.\n   - Prerequisite: The card must match the top card by rank, suit, or symbol.\n2. **Merge Sequence:**\n   - Create a sequence with the top card of the starter pile combined with cards from the player's hand.\n   - Required: Sequence of three or more cards sharing a common symbol.\n   - Additional Rule: Only one merged sequence can be created per turn.\n3. **Use Wild Card (Eight):**\n   - Play an eight to change suit and symbol trajectory.\n4. **Draw a Card:**\n   - Draw from the stock if they can\u2019t play, OR opt to strategically draw despite alternatives.\n   - Prerequisite: No matching card in hand, or by strategic choice.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player left of the dealer starts.\n2. Turns proceed in clockwise order.\n3. During a turn, a player:\n   - Plays a card or merges.\n   - Draws a card (if needed).\n   - The turn ends and passes to the next player.\n4. Play continues until:\n   - A player reaches 150 points through merges and regular gameplay.\n\n#### **Winning Conditions:**\n- A player wins upon reaching 150 points through successful merges and card play.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Merge Bonus:** Successfully merging a sequence grants a 10-point bonus per card in the sequence.\n- **Wild Card Usage:** Eights alter game flow, allowing suit and symbol changes for new sequence formation.\n- **Score Recording:** Results recorded across up to four ongoing games, scoring detailed sequentially.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- The top card of the starter pile.\n- Merged sequences on the table.\n- Cumulative scores of all players.\n\n#### **Hidden Information:**\n- Identity of cards in the stock pile.\n- Cards in opponents' hands.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Points awarded for each merged sequence:\n  - Each successful merge contributes to the score based on the number of cards in the sequence.\n  - Align scoring with the traditional logic: Face cards = 10 points; Eights = 20 points; Ace = 15 points; Numbered cards = Pip value.\n\n#### **Objective Achievement:**\n- Game winner is the first to score 150 points through strategic merging and regular gameplay, leveraging visible and hidden game states smartly.\n\nThis refined description ensures the gameplay mechanics are well-aligned with the new merging objective and special card function, providing clarity and ensuring strategic depth.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"starter_pile\": {\"top_card\": {\"rank\": \"8\", \"suit\": \"diamonds\", \"symbol\": \"8\"}}, \"facedown_cards\": {\"stock_size\": 29}, \"discard_pile\": [{\"rank\": \"J\", \"suit\": \"spades\", \"symbol\": \"J\"}, {\"rank\": \"J\", \"suit\": \"hearts\", \"symbol\": \"J\"}, {\"rank\": \"2\", \"suit\": \"hearts\", \"symbol\": \"2\"}, {\"rank\": \"Q\", \"suit\": \"hearts\", \"symbol\": \"Q\"}]}, \"players\": [{\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 3}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 7}}, {\"public\": {\"score\": 0, \"merged_sequences\": [], \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\", \"symbol\": \"K\"}, {\"rank\": \"6\", \"suit\": \"hearts\", \"symbol\": \"6\"}, {\"rank\": \"7\", \"suit\": \"spades\", \"symbol\": \"7\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\", \"symbol\": \"Q\"}]}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 4}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 2-hearts-2 onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays Q-hearts-Q onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"use_wild\", \"args\": {\"card_idx\": 1, \"new_suit\": \"spades\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: use_wild-(card_idx: 1, new_suit: spades)\"}, {\"type\": \"info\", \"msg\": \"Player 0 uses a wild card to change the suit to spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"draw\", \"id\": 0}, \"msg\": \"Player 1 decides to: draw\"}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 2}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section storing information shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"The index of the player whose turn it is currently.\", \"common.winner\": \"The index of the player who has won the game, if the game is over; otherwise null.\", \"common.is_over\": \"A boolean indicating if the game has ended.\", \"common.starter_pile\": \"A section storing details of the pile where the top card is placed.\", \"common.starter_pile.top_card\": \"The top card of the starter pile, represented as a dictionary with rank, suit, and symbol.\", \"common.facedown_cards\": \"A section containing facedown cards not visible to players, like the stock of available cards.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stock.\", \"common.discard_pile\": \"A list of cards that have been played and discarded from the starter pile.\", \"players\": \"An array where each element holds details about a specific player.\", \"players[].public\": \"Information visible to all players for each specific player.\", \"players[].public.score\": \"The total score of the player.\", \"players[].public.merged_sequences\": \"A list of sequences of cards the player has successfully merged.\", \"players[].facedown_cards\": \"Details of the cards a player holds in their hand.\", \"players[].facedown_cards.hand_size\": \"The number of cards in a player's hand when the actual cards aren't provided.\", \"players[].facedown_cards.hand\": \"A list of cards held by the current player, visible in detail.\", \"recent_history\": \"A list of recent actions taken in the game, presented chronologically.\", \"recent_history[].type\": \"The type of event recorded in the history, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player executing the action or event being recorded.\", \"recent_history[].action\": \"Details of the action taken by a player, including the action type and any necessary arguments.\", \"recent_history[].msg\": \"A message describing the action or event in prose.\", \"recent_history[].role\": \"Typically null in this context, but might reference who's affected by an action in other instances.\", \"legal_actions\": \"A list of the actions currently available to the current player.\", \"legal_actions[].action\": \"The type of action a player can take, e.g., 'play', 'draw'.\", \"legal_actions[].args\": \"Any arguments necessary to perform the action, such as indices for card selection.\"}",
    "policy_list": [
        "**Symbol-Based Merge Maximization**\nThe strategy focuses on maximizing points through efficient merges based on card symbols. The AI should prioritize forming and playing sequences with a common symbol over other actions. When a matching card isn't possible, drawing is preferred unless strategic blocking of opponents is necessary. The use of eights should be reserved for critical junctures where changing the game flow can prevent opponents' merges or set up a high-scoring opportunity."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"Estimate the probability of winning based on the current game state and a potential action.\"\"\"\n    \n    def evaluate_hand_value(hand):\n        \"\"\"Evaluate the possible merging power of a hand.\"\"\"\n        symbol_count = {}\n        for card in hand:\n            symbol = card['symbol']\n            symbol_count[symbol] = symbol_count.get(symbol, 0) + 1\n        # The potential of a hand can be seen as the max sequence length that may be formed\n        return max(symbol_count.values(), default=0)\n    \n    def action_effectiveness():\n        \"\"\"Evaluate the effectiveness of the given action.\"\"\"\n        if action['action'] == 'play':\n            card_idx = action['args']['card_idx']\n            card = player_hand[card_idx]\n            if card['symbol'] == state['common']['starter_pile']['top_card']['symbol']:\n                # Same symbol play increases merge opportunity\n                return 0.9\n            elif card['rank'] == state['common']['starter_pile']['top_card']['rank'] or card['suit'] == state['common']['starter_pile']['top_card']['suit']:\n                return 0.7\n            return 0.5  # A normal play\n        elif action['action'] == 'merge':\n            # Reward higher potentially successful merges\n            return 1.0\n        elif action['action'] == 'use_wild':\n            # Use wildcards to disrupt or setup significant opportunities\n            return 0.8\n        elif action['action'] == 'draw':\n            # Drawing is usually the least aggressive move\n            return 0.2\n        return 0.0\n    \n    # Extract current player info\n    current_player_index = state['common']['current_player']\n    player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    \n    # Calculate hand potential for merge, which aligns with our symbol-based merge goal\n    if player_hand:  # Check if the player hand is not empty\n        merge_value = evaluate_hand_value(player_hand)\n        potential_score = merge_value / len(player_hand)\n    else:\n        potential_score = 0.0\n    \n    # Evaluate action effectiveness\n    action_value = action_effectiveness()\n    \n    # Combine hand potential with action potential\n    # Adjust scoring to be more continuous and reflect real probability (0 to 1)\n    result_score = min(1.0, max(0.0, 0.5 * potential_score + 0.5 * action_value))\n    \n    return result_score\n"
    ]
}