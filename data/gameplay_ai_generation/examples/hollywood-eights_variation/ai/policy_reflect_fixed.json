{
    "game_description": "## Card Merge Challenge: Refined Ruleset\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Stock Pile:** Cards remaining in the draw pile.\n- **Starter Pile:** Top card visible to all players.\n- **Player Order:** Determined at the beginning of the game, visible to all.\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Merged Sequences:** Sequences successfully completed by all players and visible to all.\n  - **Scoreboard:** Cumulative points of each player.\n- **Private:**\n  - **Player Hand:** Cards held by each player, visible only to themselves.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, 4, 5, 6, 7, 9, 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Unique Symbol:** A special symbol on each card for merging purposes.\n- **Special Card:** Eight acts as a wild card for both suit and symbol changes.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck with additional unique symbols on each card.\n\n#### **Initial Dealing:**\n- Deal five cards face down to each player.\n- Remaining cards form the stock pile.\n- Top card of the stock pile is turned up to start the starter pile. If this is an eight, it is inserted into the deck, and another card is drawn.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Card:**\n   - Place one card from their hand on the starter pile.\n   - Prerequisite: The card must match the top card by rank, suit, or symbol.\n2. **Merge Sequence:**\n   - Create a sequence with the top card of the starter pile combined with cards from the player's hand.\n   - Required: Sequence of three or more cards sharing a common symbol.\n   - Additional Rule: Only one merged sequence can be created per turn.\n3. **Use Wild Card (Eight):**\n   - Play an eight to change suit and symbol trajectory.\n4. **Draw a Card:**\n   - Draw from the stock if they can\u2019t play, OR opt to strategically draw despite alternatives.\n   - Prerequisite: No matching card in hand, or by strategic choice.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. Player left of the dealer starts.\n2. Turns proceed in clockwise order.\n3. During a turn, a player:\n   - Plays a card or merges.\n   - Draws a card (if needed).\n   - The turn ends and passes to the next player.\n4. Play continues until:\n   - A player reaches 150 points through merges and regular gameplay.\n\n#### **Winning Conditions:**\n- A player wins upon reaching 150 points through successful merges and card play.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Merge Bonus:** Successfully merging a sequence grants a 10-point bonus per card in the sequence.\n- **Wild Card Usage:** Eights alter game flow, allowing suit and symbol changes for new sequence formation.\n- **Score Recording:** Results recorded across up to four ongoing games, scoring detailed sequentially.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- The top card of the starter pile.\n- Merged sequences on the table.\n- Cumulative scores of all players.\n\n#### **Hidden Information:**\n- Identity of cards in the stock pile.\n- Cards in opponents' hands.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Points awarded for each merged sequence:\n  - Each successful merge contributes to the score based on the number of cards in the sequence.\n  - Align scoring with the traditional logic: Face cards = 10 points; Eights = 20 points; Ace = 15 points; Numbered cards = Pip value.\n\n#### **Objective Achievement:**\n- Game winner is the first to score 150 points through strategic merging and regular gameplay, leveraging visible and hidden game states smartly.\n\nThis refined description ensures the gameplay mechanics are well-aligned with the new merging objective and special card function, providing clarity and ensuring strategic depth.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"starter_pile\": {\"top_card\": {\"rank\": \"8\", \"suit\": \"diamonds\", \"symbol\": \"8\"}}, \"facedown_cards\": {\"stock_size\": 29}, \"discard_pile\": [{\"rank\": \"J\", \"suit\": \"spades\", \"symbol\": \"J\"}, {\"rank\": \"J\", \"suit\": \"hearts\", \"symbol\": \"J\"}, {\"rank\": \"2\", \"suit\": \"hearts\", \"symbol\": \"2\"}, {\"rank\": \"Q\", \"suit\": \"hearts\", \"symbol\": \"Q\"}]}, \"players\": [{\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 3}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 7}}, {\"public\": {\"score\": 0, \"merged_sequences\": [], \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\", \"symbol\": \"K\"}, {\"rank\": \"6\", \"suit\": \"hearts\", \"symbol\": \"6\"}, {\"rank\": \"7\", \"suit\": \"spades\", \"symbol\": \"7\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\", \"symbol\": \"Q\"}]}}, {\"public\": {\"score\": 0, \"merged_sequences\": []}, \"facedown_cards\": {\"hand_size\": 4}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 0}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_idx: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays 2-hearts-2 onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_idx\": 1}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays Q-hearts-Q onto the starter pile.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"use_wild\", \"args\": {\"card_idx\": 1, \"new_suit\": \"spades\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: use_wild-(card_idx: 1, new_suit: spades)\"}, {\"type\": \"info\", \"msg\": \"Player 0 uses a wild card to change the suit to spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"draw\", \"id\": 0}, \"msg\": \"Player 1 decides to: draw\"}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the stock.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_idx\": 2}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section storing information shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"The index of the player whose turn it is currently.\", \"common.winner\": \"The index of the player who has won the game, if the game is over; otherwise null.\", \"common.is_over\": \"A boolean indicating if the game has ended.\", \"common.starter_pile\": \"A section storing details of the pile where the top card is placed.\", \"common.starter_pile.top_card\": \"The top card of the starter pile, represented as a dictionary with rank, suit, and symbol.\", \"common.facedown_cards\": \"A section containing facedown cards not visible to players, like the stock of available cards.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stock.\", \"common.discard_pile\": \"A list of cards that have been played and discarded from the starter pile.\", \"players\": \"An array where each element holds details about a specific player.\", \"players[].public\": \"Information visible to all players for each specific player.\", \"players[].public.score\": \"The total score of the player.\", \"players[].public.merged_sequences\": \"A list of sequences of cards the player has successfully merged.\", \"players[].facedown_cards\": \"Details of the cards a player holds in their hand.\", \"players[].facedown_cards.hand_size\": \"The number of cards in a player's hand when the actual cards aren't provided.\", \"players[].facedown_cards.hand\": \"A list of cards held by the current player, visible in detail.\", \"recent_history\": \"A list of recent actions taken in the game, presented chronologically.\", \"recent_history[].type\": \"The type of event recorded in the history, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player executing the action or event being recorded.\", \"recent_history[].action\": \"Details of the action taken by a player, including the action type and any necessary arguments.\", \"recent_history[].msg\": \"A message describing the action or event in prose.\", \"recent_history[].role\": \"Typically null in this context, but might reference who's affected by an action in other instances.\", \"legal_actions\": \"A list of the actions currently available to the current player.\", \"legal_actions[].action\": \"The type of action a player can take, e.g., 'play', 'draw'.\", \"legal_actions[].args\": \"Any arguments necessary to perform the action, such as indices for card selection.\"}",
    "policy_list": [
        "**Maximize Merging Opportunities**\nTo refine the strategy 'Maximize Merging Opportunities', focus on continuously evaluating the `Potential Merge Value` to identify the best opportunities for merging at each turn. Specifically, prioritize creating sequences with high point cards, such as face cards, eights, and aces, over low-value cards when opportunities present themselves. Use eight strategically to alter the suit and symbol trajectory, preventing opponents from forming their intended sequences. Also, monitor the card symbols and rank diversity within the AI player's hand using the `Avoidance Risk Factor`, preventing lock situations in the game. Finally, pay attention to the `Opponent Interference Potential`\u2014play cards that could block or disturb opponents' likely next moves, thus enforcing strategic control over the merge opportunities accessible to them.",
        "**Control with Wild Cards**\nUtilize eights by assessing the 'Wild Card Utility' metric and act during identified critical moments. Specifically, 1) Play the eight when the 'Potential Merge Value' is high, allowing an immediate valuable merge. 2) Use the eight when 'Opponent Interference Potential' suggests a strong possibility of disrupting opponents' potential merges. 3) Rely on the wild card when 'Avoidance Risk Factor' reflects a high risk of being unable to play next turn, thus maximizing hand flexibility. This proactive approach ensures keeping control over the game flow while optimizing both defensively against opponents and offensively for scoring opportunities.",
        "**Adaptive Card Matching - Enhanced Strategy**\nThe Enhanced Strategy should specify: 1. 'Critical Moments' for using the wild card are when the current hand lacks diverse options for future turns, or when an opponent is nearing the ability to complete significant merges. Wild cards should disrupt likely sequences and adapt the game flow to the player's advantage. 2. Game state metrics guide decisions: When Potential Merge Value is high, prioritize merging, possibly sacrificing hand diversity. However, if Avoidance Risk Factor is high, maintain a mix of available ranks, suits, and symbols to prevent bottlenecking the hand. Regular evaluation of the Opponent Interference Potential can be used to time plays that undermine competitors' strategies, especially before an opponent's turn when they might complete a valuable sequence. Overall, while maintaining hand versatility, players should be aiming for improving their score and hindering opponents strategically.",
        "**Refined Strategic Drawing Strategy**\nStrategically drawing cards, even when a play is possible, involves the consideration of multiple game metrics to maximize long-term gains. The refined strategy hence relies on the following criteria: 1) Assess the Avoidance Risk Factor to ensure the player's hand remains fluid for future plays. If the risk is high due to lack of match options, drawing is preferred. 2) Calculate the Potential Merge Value to decide if holding out a play can lead to high-scoring future merges. If the potential is significant, opt for drawing. 3) Evaluate the Wild Card Utility to understand if holding or drawing could enhance the player\u2019s ability to steer the game's suit and symbol direction. If wild card usage potential is low, drawing might be more beneficial. 4) Assess the Opponent Interference Potential to determine if allowing the top card to remain limits opponents' options. If it does, prefer drawing to maintain control over the starter pile dynamics."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Inline function to check if the card is high value\n    def is_high_value_card(card):\n        high_value_ranks = {'J', 'Q', 'K', '8', 'A'}\n        return card['rank'] in high_value_ranks\n\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['facedown_cards']['hand']\n    starter_pile_card = state['common']['starter_pile']['top_card']\n    discard_pile = state['common']['discard_pile']\n\n    # Calculate potential merge value\n    potential_merge_value = 0\n    for card in player_hand:\n        if (card['rank'] == starter_pile_card['rank'] or\n            card['suit'] == starter_pile_card['suit'] or\n            card['symbol'] == starter_pile_card['symbol']):\n            if is_high_value_card(card):\n                potential_merge_value += 0.2\n            potential_merge_value += 0.1\n\n    # Calculate avoidance risk factor\n    rank_diversity = len(set(card['rank'] for card in player_hand))\n    suit_diversity = len(set(card['suit'] for card in player_hand))\n    avoidance_risk_factor = 0.2 if rank_diversity < 2 or suit_diversity < 2 else 0.0\n\n    # Calculate interference potential\n    interference_potential = 0.0\n    for card in discard_pile:\n        if starter_pile_card['rank'] == card['rank'] or starter_pile_card['suit'] == card['suit']:\n            interference_potential += 0.05\n    interference_potential = min(interference_potential, 0.3)\n\n    # Determine if action calls for playing a certain card\n    card_being_played = None\n    if action['action'] == 'play':\n        card_idx = action['args']['card_idx']\n        card_being_played = player_hand[card_idx]\n\n    # Calculate result score\n    result_score = 0.5 + potential_merge_value - avoidance_risk_factor + interference_potential\n    if card_being_played and is_high_value_card(card_being_played):\n        result_score += 0.1\n\n    # Clamp result between 0 to 1\n    result_score = max(0.0, min(result_score, 1.0))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n\n    player_index = state['common']['current_player']\n    player_hand = state['players'][player_index]['facedown_cards'].get('hand', [])\n    potential_merge_value = 0\n    opponent_interference_potential = 0\n    avoidance_risk_factor = 0\n    \n    # Determine if an eight is involved in the action\n    eight_played = False\n    if action['action'] in ['play', 'use_wild']:\n        card_idx = action['args'].get('card_idx', None)\n        if card_idx is not None and player_hand:\n            eight_played = player_hand[card_idx]['rank'] == '8'\n\n    # Calculate the potential merge value for the player's hand with the starter pile's top card\n    top_card = state['common']['starter_pile']['top_card']\n    if action['action'] == 'merge_sequence':\n        merge_cards = [player_hand[arg] for arg in action['args']['match_cards']]\n        # Calculate merge potential reward based on sequence length and special cards\n        sequence_symbols = [card['symbol'] for card in merge_cards]\n        if len(set(sequence_symbols)) == 1:  # All cards have the same symbol\n            potential_merge_value = math.log(len(merge_cards) + 1)\n    \n    # Calculate opponent interference potential for 8's\n    if eight_played:\n        for opponent_index, opponent in enumerate(state['players']):\n            if opponent_index != player_index:\n                # Check if recent history exists to assess opponent interference potential\n                if 'recent_history' in state and state['recent_history']:\n                    # Assume the potential for interference exists if the opponent's recent action wasn't a draw\n                    if state['recent_history'][-1]['action']['action'] != 'draw':\n                        opponent_interference_potential += 0.1\n    \n    # Calculate avoidance risk if the player is likely to draw next\n    if 'draw' in [action['action'] for action in state['legal_actions']]:\n        avoidance_risk_factor = 0.5  # Initial risk of having to draw results in less control\n    \n    # Score calculation with weights emphasizing player advantage for merges and special card control\n    result_score = 0.5  # Base score\n    result_score += 0.3 * potential_merge_value\n    result_score += 0.2 * opponent_interference_potential\n    result_score -= 0.1 * avoidance_risk_factor\n    \n    # Ensure the score is within bounds\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract common and player-specific information from the state\n    common_info = state.get('common', {})\n    player_info = state.get('players', [])\n    current_player_index = common_info.get('current_player', 0)\n    current_player = player_info[current_player_index]\n    \n    # Basic rule-based features\n    player_hand = current_player.get('facedown_cards', {}).get('hand', [])\n    starter_pile_top_card = common_info.get('starter_pile', {}).get('top_card', {})\n    num_players = common_info.get('num_players', 1)\n    potential_merge_value = 0\n    avoidance_risk_factor = 0\n    opponent_interference_potential = 0\n    \n    # Calculate potential merge value\n    merged_sequences = current_player.get('public', {}).get('merged_sequences', [])\n    for card in player_hand:\n        if card['symbol'] == starter_pile_top_card['symbol']:\n            potential_merge_value += 1\n    \n    # Calculate avoidance risk factor\n    unique_ranks = {card['rank'] for card in player_hand}\n    unique_suits = {card['suit'] for card in player_hand}\n    avoidance_risk_factor = 1 / (len(unique_ranks) * len(unique_suits)) if unique_ranks and unique_suits else 1\n    \n    # Calculate opponent interference potential\n    opponent_scores = [player.get('public', {}).get('score', 0) for idx, player in enumerate(player_info) if idx != current_player_index]\n    max_opponent_score = max(opponent_scores) if opponent_scores else 0\n    opponent_interference_potential = (150 - max_opponent_score) / 150\n    \n    # Determine whether the current action enhances or reduces winning probability\n    if action == 'play':\n        potential_win_inc = potential_merge_value / len(player_hand) if player_hand else 0\n    elif action == 'use_wild':\n        potential_win_inc = opponent_interference_potential\n    elif action == 'draw':\n        potential_win_inc = 0.1  # Drawing can be defensive to improve hand\n    else:\n        potential_win_inc = 0\n    \n    # Calculate final reward score in [0, 1]\n    result_score = min(1.0, max(0.0, 0.5 + 0.4 * potential_win_inc - 0.3 * avoidance_risk_factor))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_index = common[\"current_player\"]\n    current_player = players[current_player_index]\n    legal_actions = state[\"legal_actions\"]\n\n    hand = current_player[\"facedown_cards\"][\"hand\"]\n    current_top_card = common[\"starter_pile\"][\"top_card\"]\n    \n    # Factors to consider\n    avoidance_risk_factor = 0\n    potential_merge_value = 0\n    wild_card_utility = 0\n    opponent_interference_potential = 0\n    \n    # Evaluate hand fluidity (Avoidance Risk Factor)\n    matching_cards = [card for card in hand if card[\"rank\"] == current_top_card[\"rank\"] or \n                      card[\"suit\"] == current_top_card[\"suit\"] or \n                      card[\"symbol\"] == current_top_card[\"symbol\"]]\n    if not matching_cards:\n        avoidance_risk_factor = 0.75\n    else:\n        avoidance_risk_factor = 0.5\n\n    # Check Potential Merge Value\n    potential_merges = sum(1 for card in hand if card[\"symbol\"] == current_top_card[\"symbol\"])\n    potential_merge_value = potential_merges / (len(hand) + 1)\n\n    # Wild Card Utility\n    eights_count = sum(1 for card in hand if card[\"rank\"] == \"8\")\n    if eights_count > 0:\n        wild_card_utility = 0.8\n    else:\n        wild_card_utility = 0.2\n\n    # Assess Opponent Interference Potential\n    # Assuming a simplified metric\n    if current_top_card[\"rank\"] == \"8\":\n        opponent_interference_potential = 0.5\n    else:\n        opponent_interference_potential = 0.7\n\n    # Aggregate factors\n    score_value = 0.3 * avoidance_risk_factor + \\\n                  0.3 * potential_merge_value + \\\n                  0.2 * wild_card_utility + \\\n                  0.2 * opponent_interference_potential\n    \n    # Adjust based on the chosen action\n    if action[\"action\"] == \"draw\":\n        score_value *= 1.1  # Reward strategic drawing\n    \n    # Ensure value is in [0, 1]\n    result_score = min(max(score_value, 0), 1)\n    \n    return result_score\n"
    ]
}