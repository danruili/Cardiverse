{
    "game_description": "### Rank of Cards\n\nK (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A. (In many forms of Rummy, the ace may rank either high or low).\n\n### The Deal\n\nDealer gives one card at a time face down, beginning with the player on the left. When two people play, each person gets 10 cards. When three or four people play, each receives seven cards; when five or six play, each receives six cards. The remaining cards are placed face down on the table, forming the stock.\n\nThe top card of the stock is turned face up and becomes the upcard. It is placed next to the stock to start the discard pile.\n\nWhen two people play, the winner of each hand deals the next. When more than two play, the deal passes to next the player on the left.\n\n### Object of the Game\n\nEach player tries to form matched sets consisting of groups of three or four of a kind, or sequences of three or more cards of the same suit.\n\nAn ace counts either high or low in a sequence, and sequences may go round the corner as in K, A, 2, or A, K, Q.\n\n### The Play\n\nBeginning with the player to the left of the dealer, each player in turn may draw two cards from the stock or, before drawing those cards, two cards from the top of the discard pile. Then the player discards only one card. Play does not end until a player can lay down their entire hand at once.\n\nThe player may also lie down on the table, face up, any meld (matched set). If the player does not wish to lay down a meld, they discard one card, face up, onto the discard pile. If the player has drawn from the discard pile, they may not discard the same card on that turn.\n\n### Laying Off\n\nA player may add one or more from their hand to any matched set already shown on the table. Thus, if threes are showing, they may add the fourth three; if 10, 9, 8 are showing, he may add J, or Q, J, 7, or 7, 6.\n\n### Going Out\n\nWhen a player gets rid of all of their cards, they win the game.\n\nIf the last card of the stock has been drawn and no player has gone out, the next player in turn may either take the top of the discard pile, or may turn the discard pile over to form a new stock (without shuffling it) and draw the top card. Play then proceeds as before.\n\n### How to Keep Score\n\nA player pays only for cards in their hand, which does not form matched sets. A player pays the pip value of all unmatched cards, with the ace counting as 11 points\n\nA player goes \"rummy\" when they get rid of all cards in their hand at once, without previously having put down or laid off any cards. In this event, every other player pays double - twice what their opponents would otherwise owe.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 3, \"current_player\": 0, \"winner\": null, \"has_drawn_cards_this_turn\": false, \"is_over\": false, \"faceup_cards\": {\"discard_pile\": [{\"rank\": \"6\", \"suit\": \"diamonds\"}]}, \"facedown_cards\": {\"stock_size\": 30}}, \"players\": [{\"public\": {\"score\": 0, \"current_player\": true}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand\": [{\"rank\": \"J\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"hearts\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}], \"recent_discard_draw\": []}}, {\"public\": {\"score\": 0}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand_size\": 7, \"recent_discard_draw_size\": 0}}, {\"public\": {\"score\": 0}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand_size\": 7, \"recent_discard_draw_size\": 0}}], \"legal_actions\": [{\"action\": \"draw\", \"args\": {\"source\": \"stock\"}, \"id\": 0}, {\"action\": \"draw\", \"args\": {\"source\": \"discard_pile\"}, \"id\": 1}]}\n\nExplanation: \n{\"common\": \"Contains the shared game state information accessible to all players.\", \"common.num_players\": \"The total number of players participating in the game.\", \"common.current_player\": \"The index of the player whose turn it currently is, starting from 0.\", \"common.winner\": \"The index of the winning player if the game is over, otherwise null.\", \"common.has_drawn_cards_this_turn\": \"A boolean indicating if the current player has drawn cards during this turn.\", \"common.is_over\": \"A boolean that indicates whether the game is over.\", \"common.faceup_cards\": \"A dictionary holding the collections of face-up cards.\", \"common.faceup_cards.discard_pile\": \"A list of cards that have been discarded and are visible to all players.\", \"common.facedown_cards\": \"A dictionary containing collections of face-down cards.\", \"common.facedown_cards.stock_size\": \"The number of cards left in the stock (deck) that haven't been drawn yet.\", \"players\": \"A list of player-specific data, each entry representing a single player.\", \"players[0].public\": \"Contains publicly visible information about the first player.\", \"players[0].public.score\": \"The current score of the first player, starting from zero.\", \"players[0].public.current_player\": \"A boolean denoting if the first player is the current player.\", \"players[0].faceup_cards\": \"A dictionary containing collections of cards visible to all players for the first player.\", \"players[0].faceup_cards.melds\": \"A list of melds (combinations of cards) that the first player has laid down publicly.\", \"players[0].facedown_cards\": \"A dictionary containing private collections of cards held by the first player.\", \"players[0].facedown_cards.hand\": \"A list of cards currently held in the hand of the first player.\", \"players[0].facedown_cards.recent_discard_draw\": \"A list of cards drawn from the discard pile this turn by the first player, affecting legal actions.\", \"players[1].facedown_cards.hand_size\": \"The number of cards in the hand of the second player (their face-down cards).\", \"players[2].facedown_cards.hand_size\": \"The number of cards in the hand of the third player (their face-down cards).\", \"legal_actions\": \"A list of permissible actions that the current player can take on their turn.\", \"legal_actions[].action\": \"Specifies the type of action ('draw', etc.) that the player can perform.\", \"legal_actions[].args\": \"Contains additional arguments required for the specified action, like the source of drawing.\", \"legal_actions[].id\": \"An optional identifier for the action that can be used to distinguish between different legal actions.\"}",
    "policy_list": [
        "**Rummy Condition Strategy**\nFocus on the rummy condition of ending the game by laying down all cards at once. Reserve powerful plays for a surprise finish to trigger double penalty to opponents."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n\n    # Unpack common game state information\n    common = state['common']\n    players = state['players']\n    legal_actions = state['legal_actions']\n    current_player_index = common['current_player']\n    current_hand = players[current_player_index]['facedown_cards']['hand']\n\n    # Inline helper to count potential melds\n    ranks = {}\n    suits = {}\n    potential_melds_count = 0\n\n    rank_order = \"23456789TJQKA\"\n\n    for card in current_hand:\n        rank, suit = card['rank'], card['suit']\n        ranks[rank] = ranks.get(rank, 0) + 1\n        suits[suit] = suits.get(suit, []) + [card]\n\n        # Count group melds\n        if ranks[rank] >= 3:\n            potential_melds_count += 1\n\n    # Count sequence melds\n    for suit_cards in suits.values():\n        # Only sort and check sequence if ranks are valid\n        if all(card['rank'] in rank_order for card in suit_cards):\n            suit_cards.sort(key=lambda c: rank_order.index(c['rank']))\n            count_sequence_melds = 1\n            for i in range(1, len(suit_cards)):\n                if rank_order.index(suit_cards[i]['rank']) == \\\n                   rank_order.index(suit_cards[i-1]['rank']) + 1:\n                    count_sequence_melds += 1\n                    if count_sequence_melds >= 3:\n                        potential_melds_count += 1\n                else:\n                    count_sequence_melds = 1\n\n    # Inline helper for hand risk estimation\n    high_value_cards = {'J', 'Q', 'K', 'A'}\n    risk = 0\n    for card in current_hand:\n        risk += 1 if card['rank'] in high_value_cards else 0.1\n\n    # Scenario 1: Action 'draw' analysis\n    draw_action_score = 0\n    if action['action'] == \"draw\":\n        if action['args']['source'] == \"stock\":\n            draw_action_score = 0.5 # Neutral when drawing from stock\n        elif action['args']['source'] == \"discard_pile\":\n            # Check top card of discard pile to see if it benefits the hand greatly\n            top_discard_card = common['faceup_cards']['discard_pile'][-1]\n            if any(card['rank'] == top_discard_card['rank'] for card in current_hand):\n                draw_action_score = 0.7\n            else:\n                draw_action_score = 0.4\n    \n    # Estimate current game state score\n    estimated_game_state_score = potential_melds_count / (1 + risk)\n\n    # Combine estimates for action and game state\n    result_score = 0.6 * draw_action_score + 0.4 * estimated_game_state_score\n    result_score = float(result_score)  # Ensure the score is a float\n    return result_score\n"
    ]
}