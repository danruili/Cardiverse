{
    "game_description": "### Rank of Cards\n\nK (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A. (In many forms of Rummy, the ace may rank either high or low).\n\n### The Deal\n\nDealer gives one card at a time face down, beginning with the player on the left. When two people play, each person gets 10 cards. When three or four people play, each receives seven cards; when five or six play, each receives six cards. The remaining cards are placed face down on the table, forming the stock.\n\nThe top card of the stock is turned face up and becomes the upcard. It is placed next to the stock to start the discard pile.\n\nWhen two people play, the winner of each hand deals the next. When more than two play, the deal passes to next the player on the left.\n\n### Object of the Game\n\nEach player tries to form matched sets consisting of groups of three or four of a kind, or sequences of three or more cards of the same suit.\n\nAn ace counts either high or low in a sequence, and sequences may go round the corner as in K, A, 2, or A, K, Q.\n\n### The Play\n\nBeginning with the player to the left of the dealer, each player in turn may draw two cards from the stock or, before drawing those cards, two cards from the top of the discard pile. Then the player discards only one card. Play does not end until a player can lay down their entire hand at once.\n\nThe player may also lie down on the table, face up, any meld (matched set). If the player does not wish to lay down a meld, they discard one card, face up, onto the discard pile. If the player has drawn from the discard pile, they may not discard the same card on that turn.\n\n### Laying Off\n\nA player may add one or more from their hand to any matched set already shown on the table. Thus, if threes are showing, they may add the fourth three; if 10, 9, 8 are showing, he may add J, or Q, J, 7, or 7, 6.\n\n### Going Out\n\nWhen a player gets rid of all of their cards, they win the game.\n\nIf the last card of the stock has been drawn and no player has gone out, the next player in turn may either take the top of the discard pile, or may turn the discard pile over to form a new stock (without shuffling it) and draw the top card. Play then proceeds as before.\n\n### How to Keep Score\n\nA player pays only for cards in their hand, which does not form matched sets. A player pays the pip value of all unmatched cards, with the ace counting as 11 points\n\nA player goes \"rummy\" when they get rid of all cards in their hand at once, without previously having put down or laid off any cards. In this event, every other player pays double - twice what their opponents would otherwise owe.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 3, \"current_player\": 0, \"winner\": null, \"has_drawn_cards_this_turn\": false, \"is_over\": false, \"faceup_cards\": {\"discard_pile\": [{\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}]}, \"facedown_cards\": {\"stock_size\": 26}}, \"players\": [{\"public\": {\"score\": 0, \"current_player\": true}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand\": [{\"rank\": \"Q\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"spades\"}], \"recent_discard_draw\": []}}, {\"public\": {\"score\": 0}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand_size\": 8, \"recent_discard_draw_size\": 0}}, {\"public\": {\"score\": 0}, \"faceup_cards\": {\"melds\": []}, \"facedown_cards\": {\"hand_size\": 8, \"recent_discard_draw_size\": 0}}], \"legal_actions\": [{\"action\": \"draw\", \"args\": {\"source\": \"stock\"}, \"id\": 0}, {\"action\": \"draw\", \"args\": {\"source\": \"discard_pile\"}, \"id\": 1}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players participating in the game.\", \"current_player\": \"The index of the player whose turn it is currently.\", \"winner\": \"The index of the player who has won the game, or null if there is no winner yet.\", \"has_drawn_cards_this_turn\": \"A boolean indicating whether the current player has drawn cards during their current turn.\", \"is_over\": \"A boolean indicating if the game has ended.\", \"faceup_cards\": {\"discard_pile\": \"A list of cards that are currently in the discard pile, visible to all players.\"}, \"facedown_cards\": {\"stock_size\": \"The number of cards remaining in the stock pile, which is not visible to players.\"}}, \"players\": [{\"public\": {\"score\": \"The player's score, which is publicly visible.\", \"current_player\": \"A boolean indicating if this player is the current player.\"}, \"faceup_cards\": {\"melds\": \"A list of melds (combinations of cards) that the player has laid down, visible to all players.\"}, \"facedown_cards\": {\"hand\": \"A list of cards currently in the player's hand, not visible to other players.\", \"recent_discard_draw\": \"A list of cards recently drawn from the discard pile by the player, used to track draw actions.\"}}, {\"facedown_cards\": {\"hand_size\": \"The number of cards in the player's hand, without showing the actual cards.\", \"recent_discard_draw_size\": \"The size of the player's recent discard draw list.\"}}], \"legal_actions\": [{\"action\": \"The name of the action that the current player can legally perform.\", \"args\": \"The arguments or parameters associated with the action the player can take.\", \"id\": \"A unique identifier for the action, which can be used to select or reference it in the game.\"}]}",
    "policy_list": [
        "**PotentialMeldCreationValue**\nA metric that assesses the potential of forming new melds after drawing two cards, either from the stock pile or discard pile. It evaluates the likely improvement in the hand's structure, considering both the draw options and the current meld opportunities.\n**UnmatchedCardPenalty**\nA metric that evaluates the penalty incurred from holding high-value unmatched cards. This metric helps in deciding the priority of discarding high-value cards from the hand to lower potential score penalties.\n**MeldCompletionLikelihood**\nA metric that calculates the likelihood of completing a potential meld based on the known cards in the discard pile and the cards currently forming partial melds in hand. It helps in determining the value of laying off or holding cards for future turns.\n**OpponentInterferenceRisk**\nA metric that estimates the risk of laying down or discarding a card that might benefit opponents. This assessment is based on the current visible card distributions (discard pile and known melds), and helps avoid actions that could strengthen opponents\u2019 hands.\n**Prioritize Building Melds**\nFocus on arranging cards in the hand into matched sets of either three or four of a kind, or sequences of three or more cards of the same suit. Discard cards that do not contribute towards completing a meld.\n**Strategic Discarding**\nChoose to discard cards that are least likely to be useful to other players based on previously observed discards and draws. Avoid discarding cards that could easily be used to complete an opponent's meld.\n**Draw from Discard Pile Judiciously**\nOnly draw from the discard pile when the top two cards can be directly used to form a meld or significantly improve the hand. Otherwise, prefer drawing from the stock pile to maintain unpredictability.\n**Reserve Key Cards**\nKeep hold of high-value cards like aces and face cards only if they are part of an ongoing strategy to complete a meld or if they are necessary to win the game soon. Otherwise, discard them to minimize penalty points."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    current_player = state[\"players\"][state[\"common\"][\"current_player\"]]\n    \n    potential_meld_value = 0.0\n    # Example logic for potential meld creation value\n    for card in current_player['facedown_cards']['hand']:\n        if card['rank'] == 'Q':  # Simple example increment based on specific cards\n            potential_meld_value += 0.1\n\n    unmatched_penalty = 0.0\n    for card in current_player['facedown_cards']['hand']:\n        if card['rank'] in ['K', 'Q', 'J']:\n            unmatched_penalty += 0.1\n        elif card['rank'] == 'A':\n            unmatched_penalty += 0.2\n        else:\n            unmatched_penalty += int(card['rank']) / 100\n\n    completion_likelihood = 0.0\n    # Example logic for completion likelihood assessment\n    if potential_meld_value > 0.2:  # Hypothetical threshold\n        completion_likelihood += 0.5\n\n    interference_risk = 0.0\n    # Example interference risk based on discard pile analysis\n    for card in state['common']['faceup_cards']['discard_pile']:\n        if card['rank'] == '5':  # Assume 5 is an important card\n            interference_risk += 0.1\n\n    result_score = (\n        potential_meld_value * 0.4\n        - unmatched_penalty * 0.3\n        + completion_likelihood * 0.2\n        - interference_risk * 0.1\n    )\n\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n"
    ]
}