{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFor this version of High Low Poker, each player receives three cards face down. Players arrange them in any order desired, but may not thereafter change the order.\n\n### The Play\n\nThere is a betting interval. Then each player receives four face-up cards, one at a time, with a betting interval after each. Next, each player turns up their first facedown card, followed by a betting interval, and then their second face-down card, followed by the final betting interval. The last card is then turned up for the showdown.\n\n### Poker Hands\n\nFive of a Kind - This is the highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 5, \"current_player\": 1, \"direction\": 1, \"winner\": null, \"is_over\": false, \"folded_players\": [], \"played_players\": [0], \"facedown_reveal_index\": 0, \"facedown_cards\": {\"deck_size\": 32}, \"faceup_cards\": {\"discard\": []}, \"pot\": 39, \"current_bet\": 11}, \"players\": [{\"public\": {\"current_bet_amount\": 11}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"J\", \"suit\": \"hearts\"}]}}, {\"public\": {\"current_bet_amount\": 6, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hole_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 6}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"4\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"5\", \"suit\": \"spades\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 6}, \"id\": 2}, \"msg\": \"Player 1 decides to: raise-(amount: 6)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 1: {'action': 'raise', 'args': {'amount': 6}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 raises to 6.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 2 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 2: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 calls.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 8}, \"id\": 1}, \"msg\": \"Player 3 decides to: raise-(amount: 8)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 3: {'action': 'raise', 'args': {'amount': 8}, 'id': 1}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 raises to 8.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 4 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 4: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 calls.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Dealing faceup cards to active players...\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gets a faceup card: J-hearts\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 gets a faceup card: 10-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gets a faceup card: 4-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 gets a faceup card: 5-spades\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 gets a faceup card: 7-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 11}, \"id\": 2}, \"msg\": \"Player 0 decides to: raise-(amount: 11)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 0: {'action': 'raise', 'args': {'amount': 11}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 raises to 11.\", \"role\": null}], \"legal_actions\": [{\"action\": \"raise\", \"args\": {\"amount\": 12}, \"id\": 0}, {\"action\": \"raise\", \"args\": {\"amount\": 13}, \"id\": 1}, {\"action\": \"raise\", \"args\": {\"amount\": 14}, \"id\": 2}, {\"action\": \"call\", \"id\": 3}, {\"action\": \"fold\", \"id\": 4}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players in the game.\", \"current_player\": \"The index of the player whose turn it is currently.\", \"direction\": \"The direction of play, which is typically used to move to the next player.\", \"winner\": \"The index of the winning player, or a list of indices if there are multiple winners. It is null if no winner is determined yet.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"folded_players\": \"A list of player indices who have folded during the game.\", \"played_players\": \"A list of player indices who have acted in the current round.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck.\"}, \"pot\": \"The current total amount of money that players are competing for.\", \"current_bet\": \"The current bet that players need to match or raise in the round.\"}, \"players\": [{\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\"}, \"facedown_cards\": {\"hole_cards_size\": \"The number of private hole cards remaining for this player to be revealed.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}, {\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\", \"current_player\": \"A boolean indicating if this player is the current player.\"}, \"facedown_cards\": {\"hole_cards\": \"A list of this player's private cards, each represented by its 'rank' and 'suit'.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": \"The index of the player who performed the action.\", \"action\": {\"action\": \"The type of action the player has taken (e.g., 'raise', 'call').\", \"args\": {\"amount\": \"The amount involved in the action, such as the raise amount.\"}, \"id\": \"An identifier for the action.\"}, \"msg\": \"A message detailing the action taken by the player.\"}, {\"type\": \"info\", \"msg\": \"An informational message typically related to an action or game state update during the game.\", \"role\": \"Could denote a particular role associated with the message, null in this context.\"}, {\"type\": \"turn_end\", \"player_id\": \"The index of the player whose turn just ended.\", \"msg\": \"A message indicating the end of the player's turn.\"}], \"legal_actions\": [{\"action\": \"The type of action the current player can take (e.g., 'raise', 'call', 'fold').\", \"args\": {\"amount\": \"The specific amount to be used for this action, applicable for actions like 'raise'.\"}, \"id\": \"An identifier for the legal action.\"}, {\"action\": \"The type of action the current player can take (e.g., 'call').\", \"id\": \"An identifier for the legal action.\"}]}",
    "policy_list": [
        "**Refined Optimal Face-Down Card Arrangement Strategy**\nRefine the strategy to use visible game state metrics: When arranging the initial three face-down cards, evaluate their current and potential contribution to strong poker hands using the Hand Strength Metric. Begin by sorting these cards based on potential combinations with the communal face-up cards and taking the Card Improvement Potential into account. Place the card with the lowest immediate contribution first, the highest potential for unsettling opponents second, and the card possibly maximizing the hand's value last. If confronted with a tie on metrics, consider opponent tendencies, modeled by the Opponent Betting Behavior Metric, to decide arrangements that maximize psychological impact. Throughout each betting interval triggered by facing any down card, also consider the Pot Odds Ratio to decide if increasing the pot with aggressive betting aligns with the assessed hand potential and risk tolerance.",
        "**Aggressive Betting with Strong Hands**\nThe strategy 'Aggressive Betting with Strong Hands' can be refined by leveraging specific metrics and defining key moments of execution. The AI should engage in aggressive betting when the 'Hand Strength Metric' indicates a top-third ranking of hand strength within possible outcomes given the visible cards. Moments to initiate aggressive betting can include receiving a card that completes a strong hand or establishes a significant draw (e.g., four cards to a flush). Additionally, the 'Opponent Betting Behavior Metric' should be used to gauge opponents' perceived confidence. If opponents are betting weakly or folding often, indicating weaker hands, the AI can use this as an opportunity to increase aggression. Balancing these metrics ensures that the aggressive strategy is applied judiciously and positionally, optimizing for maximum pot growth while minimizing unnecessary risk.",
        "**Bluff in Early Betting Intervals**\nThe strategy to bluff in early betting intervals can be refined by incorporating specific conditions based on game state metrics. Specifically, bluffing should primarily occur when the AI's Hand Strength Metric indicates a weak or mediocre hand. However, bluffing should also consider the Opponent Betting Behavior Metric, bluffing more aggressively if opponents have shown caution or weakness in their betting. Meanwhile, the Pot Odds Ratio should also be considered to ensure that the potential reward of winning the pot is worth the bluff investment. If the pot odds are favorable and the opponent behavior seems passive, the AI is in a strong position to bluff confidently, creating an image of strength and potentially driving opponents to fold their marginal hands.",
        "**Calculative Risk Assessment**\nThe 'Calculative Risk Assessment' strategy should leverage game state metrics to determine betting actions. The AI should consistently evaluate its 'Hand Strength Metric' at each betting interval, adjusting its betting level based on perceived strength. It should use 'Pot Odds Ratio' to ensure mathematically sound bets, only investing in situations with favorable returns. The 'Opponent Betting Behavior Metric' must be employed to gauge opponents' potential hands, helping decide on aggressive or cautious play. The AI should consider 'Card Improvement Potential' by anticipating the impact of future card reveals to decide whether to fold, call, or raise, aiming for positive expected value increases. By clearly defining these metrics and scenarios, the strategy can be executed with precision, optimizing decision-making dynamically throughout the game."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def evaluate_hand(cards: list) -> float:\n        card_ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n                      '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        rank_counts = {}\n        suit_counts = {}\n        \n        for card in cards:\n            rank = card['rank']\n            suit = card['suit']\n            rank_counts[rank] = rank_counts.get(rank, 0) + 1\n            suit_counts[suit] = suit_counts.get(suit, 0) + 1\n        \n        # Check for key poker hands\n        num_unique_ranks = len(rank_counts)\n        is_flush = max(suit_counts.values()) == 5\n        sorted_ranks = sorted([card_ranks[rank] for rank in rank_counts], reverse=True)\n        is_straight = len(sorted_ranks) == 5 and sorted_ranks[0] - sorted_ranks[-1] == 4\n        \n        if is_flush and is_straight:\n            return 0.9  # Straight Flush\n        elif 4 in rank_counts.values():\n            return 0.8  # Four of a Kind\n        elif 3 in rank_counts.values() and 2 in rank_counts.values():\n            return 0.7  # Full House\n        elif is_flush:\n            return 0.6  # Flush\n        elif is_straight:\n            return 0.5  # Straight\n        elif 3 in rank_counts.values():\n            return 0.4  # Three of a Kind\n        elif list(rank_counts.values()).count(2) == 2:\n            return 0.3  # Two Pairs\n        elif 2 in rank_counts.values():\n            return 0.2  # One Pair\n        else:\n            return 0.1  # High Card\n    \n    player_info = state['players'][state['common']['current_player']]\n    facedown_cards = player_info['facedown_cards']['hole_cards']\n    faceup_cards = player_info['faceup_cards']['shown_cards']\n    \n    current_hand = facedown_cards + faceup_cards\n    hand_score = evaluate_hand(current_hand)\n    \n    opponent_tendencies = 0.1  # Simplified placeholder for opponent tendencies impact\n    \n    pot_odds_ratio = state['common']['pot'] / max(state['common']['current_bet'], 1)\n    pot_odds_score = min(pot_odds_ratio / 10, 1.0)  # Simplification, caps at 1\n    \n    if action == \"raise\":\n        action_modifier = 0.05\n    elif action == \"call\":\n        action_modifier = -0.02\n    else:  # folding or other actions\n        action_modifier = -0.05\n\n    result_score = hand_score + opponent_tendencies + pot_odds_score + action_modifier\n    result_score = max(0, min(result_score, 1))  # Score must be between 0 and 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Getting the current player hand and known information\n    current_player_info = state['players'][state['common']['current_player']]\n    facedown_cards = current_player_info['facedown_cards']['hole_cards']\n    faceup_cards = current_player_info['faceup_cards']['shown_cards']\n    \n    # Evaluating hand strength\n    # Combine faceup and facedown cards for hand evaluation\n    all_cards = faceup_cards + facedown_cards\n    ranks = [card['rank'] for card in all_cards]\n    suits = [card['suit'] for card in all_cards]\n    \n    # Simplified metric: count of same ranks (pairs, three-of-a-kind, etc.)\n    rank_counts = {rank: ranks.count(rank) for rank in set(ranks)}\n    flush_possible = max([suits.count(suit) for suit in set(suits)]) >= 5\n    \n    # Example strength metric (range 0 to 1):\n    if flush_possible:\n        hand_strength_metric = 1.0\n    else:\n        highest_rank_count = max(rank_counts.values(), default=0)\n        hand_strength_metric = highest_rank_count / 4.0\n    \n    # Evaluate the opponent's perceived behavior\n    aggressive_actions = ['raise']\n    current_player_id = state['common']['current_player']\n    \n    # Check if 'recent_history' exists\n    recent_history = state.get('recent_history', [])\n    \n    perceived_aggressiveness = sum(1 for action in recent_history\n                                   if action['type'] == 'action'\n                                   and action['player_id'] != current_player_id \n                                   and action['action']['action'] in aggressive_actions)\n\n    num_played_players = len(state['common']['played_players'])\n    opponent_behavior_metric = 1 - (perceived_aggressiveness / num_played_players) if num_played_players > 0 else 1\n    \n    # Determine action aggressiveness\n    if action['action'] == 'raise':\n        action_aggressiveness = 1.0\n    elif action['action'] == 'call':\n        action_aggressiveness = 0.5\n    elif action['action'] == 'fold':\n        action_aggressiveness = 0.0\n    else:\n        action_aggressiveness = 0.0\n    \n    # Combine metrics with empirical ratios for action-value estimation\n    result_score = 0.5 * hand_strength_metric + 0.3 * opponent_behavior_metric + 0.2 * action_aggressiveness\n    \n    # Ensure score is between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    player_index = state['common']['current_player']\n    current_player = state['players'][player_index]\n    face_down_cards = current_player['facedown_cards']['hole_cards']\n    face_up_cards = current_player['faceup_cards']['shown_cards']\n    \n    # Calculate hand strength within the score function\n    ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n             '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n    all_cards = face_down_cards + face_up_cards\n    hand_strength = sum(ranks[card['rank']] for card in all_cards) / (14 * 5)\n\n    opponent_betting_aggressiveness = sum(player['public']['current_bet_amount'] \n                                          for i, player in enumerate(state['players'])\n                                          if i != player_index)\n    average_opponent_bet = opponent_betting_aggressiveness / (state['common']['num_players'] - 1)\n    \n    pot = state['common']['pot']\n    current_bet = state['common']['current_bet']\n    pot_odds_ratio = current_bet / (pot + current_bet)\n\n    bluff_factor = 0\n    if hand_strength < 0.4:\n        if average_opponent_bet < (current_bet / 2) and pot_odds_ratio < 0.3:\n            bluff_factor = 0.5\n\n    result_score = hand_strength + bluff_factor * (1 - hand_strength)\n    result_score = max(0, min(result_score, 1))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def hand_strength_metric(player):\n        # This is a simplified strength evaluation heuristic\n        # Calculate based on shown faceup cards and known hole cards\n        ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                 '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        \n        def card_value(card):\n            return ranks[card['rank']]\n        \n        facedown_value = sum(card_value(card) for card in player['facedown_cards']['hole_cards'])\n        faceup_value = sum(card_value(card) for card in player['faceup_cards']['shown_cards'])\n        total_value = facedown_value + faceup_value\n        \n        return total_value / (7 * 14)  # maximum possible combined value for 7 cards\n\n    def pot_odds_ratio(common):\n        pot = common['pot']\n        current_bet = common['current_bet']\n        if current_bet == 0:\n            return 1  # Cannot divide by zero, assume max ratio when no bet is present\n        return pot / current_bet\n\n    def opponent_betting_behavior(players):\n        return sum(player['public']['current_bet_amount'] for player in players) / len(players)\n\n    def card_improvement_potential(player):\n        # Simplified metric for potential improvement based on cards left to show\n        hole_cards_size = len(player['facedown_cards']['hole_cards'])\n        max_improvement = hole_cards_size * 12\n        current_strength = hand_strength_metric(player)\n        return min(1, (max_improvement * (1 - current_strength)) / 84) # 84 is maximum potential improvement score\n\n    def evaluate_action(action, hand_strength, pot_odds, opponent_bet, card_potential):\n        # Adjusting the evaluation based on particular actions\n        # This can be optimized, it's just a basic heuristic\n        action_type = action['action']\n        if action_type == 'raise':\n            return min(1, hand_strength + (pot_odds * 0.2) + (card_potential * 0.1))\n        elif action_type == 'call':\n            return min(1, hand_strength + (pot_odds * 0.1) + (card_potential * 0.05))\n        elif action_type == 'fold':\n            return 1 - (hand_strength * 1.2)\n        else:\n            return 0\n\n    # Extract key components\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_index = common[\"current_player\"]\n    current_player = players[current_player_index]\n\n    hand_strength = hand_strength_metric(current_player)\n    pot_odds = pot_odds_ratio(common)\n    opponent_bet = opponent_betting_behavior(players)\n    card_potential = card_improvement_potential(current_player)\n\n    # Evaluate the action based on these metrics\n    result_score = evaluate_action(action, hand_strength, pot_odds, opponent_bet, card_potential)\n\n    return result_score\n"
    ]
}