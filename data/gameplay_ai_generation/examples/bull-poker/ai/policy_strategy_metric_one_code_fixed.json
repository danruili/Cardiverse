{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFor this version of High Low Poker, each player receives three cards face down. Players arrange them in any order desired, but may not thereafter change the order.\n\n### The Play\n\nThere is a betting interval. Then each player receives four face-up cards, one at a time, with a betting interval after each. Next, each player turns up their first facedown card, followed by a betting interval, and then their second face-down card, followed by the final betting interval. The last card is then turned up for the showdown.\n\n### Poker Hands\n\nFive of a Kind - This is the highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 5, \"current_player\": 1, \"direction\": 1, \"winner\": null, \"is_over\": false, \"folded_players\": [], \"played_players\": [0], \"facedown_reveal_index\": 0, \"facedown_cards\": {\"deck_size\": 32}, \"faceup_cards\": {\"discard\": []}, \"pot\": 39, \"current_bet\": 11}, \"players\": [{\"public\": {\"current_bet_amount\": 11}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"J\", \"suit\": \"hearts\"}]}}, {\"public\": {\"current_bet_amount\": 6, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hole_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 6}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"4\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"5\", \"suit\": \"spades\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 6}, \"id\": 2}, \"msg\": \"Player 1 decides to: raise-(amount: 6)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 1: {'action': 'raise', 'args': {'amount': 6}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 raises to 6.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 2 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 2: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 calls.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 8}, \"id\": 1}, \"msg\": \"Player 3 decides to: raise-(amount: 8)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 3: {'action': 'raise', 'args': {'amount': 8}, 'id': 1}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 raises to 8.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 4 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 4: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 calls.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Dealing faceup cards to active players...\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gets a faceup card: J-hearts\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 gets a faceup card: 10-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gets a faceup card: 4-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 gets a faceup card: 5-spades\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 gets a faceup card: 7-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 11}, \"id\": 2}, \"msg\": \"Player 0 decides to: raise-(amount: 11)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 0: {'action': 'raise', 'args': {'amount': 11}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 raises to 11.\", \"role\": null}], \"legal_actions\": [{\"action\": \"raise\", \"args\": {\"amount\": 12}, \"id\": 0}, {\"action\": \"raise\", \"args\": {\"amount\": 13}, \"id\": 1}, {\"action\": \"raise\", \"args\": {\"amount\": 14}, \"id\": 2}, {\"action\": \"call\", \"id\": 3}, {\"action\": \"fold\", \"id\": 4}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players in the game.\", \"current_player\": \"The index of the player whose turn it is currently.\", \"direction\": \"The direction of play, which is typically used to move to the next player.\", \"winner\": \"The index of the winning player, or a list of indices if there are multiple winners. It is null if no winner is determined yet.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"folded_players\": \"A list of player indices who have folded during the game.\", \"played_players\": \"A list of player indices who have acted in the current round.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck.\"}, \"pot\": \"The current total amount of money that players are competing for.\", \"current_bet\": \"The current bet that players need to match or raise in the round.\"}, \"players\": [{\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\"}, \"facedown_cards\": {\"hole_cards_size\": \"The number of private hole cards remaining for this player to be revealed.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}, {\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\", \"current_player\": \"A boolean indicating if this player is the current player.\"}, \"facedown_cards\": {\"hole_cards\": \"A list of this player's private cards, each represented by its 'rank' and 'suit'.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": \"The index of the player who performed the action.\", \"action\": {\"action\": \"The type of action the player has taken (e.g., 'raise', 'call').\", \"args\": {\"amount\": \"The amount involved in the action, such as the raise amount.\"}, \"id\": \"An identifier for the action.\"}, \"msg\": \"A message detailing the action taken by the player.\"}, {\"type\": \"info\", \"msg\": \"An informational message typically related to an action or game state update during the game.\", \"role\": \"Could denote a particular role associated with the message, null in this context.\"}, {\"type\": \"turn_end\", \"player_id\": \"The index of the player whose turn just ended.\", \"msg\": \"A message indicating the end of the player's turn.\"}], \"legal_actions\": [{\"action\": \"The type of action the current player can take (e.g., 'raise', 'call', 'fold').\", \"args\": {\"amount\": \"The specific amount to be used for this action, applicable for actions like 'raise'.\"}, \"id\": \"An identifier for the legal action.\"}, {\"action\": \"The type of action the current player can take (e.g., 'call').\", \"id\": \"An identifier for the legal action.\"}]}",
    "policy_list": [
        "**Hand Strength Metric**\nEvaluates the current strength of the AI's hand using standard poker hand rankings. This metric helps decide whether to bet strongly, bet lightly, or fold based on the likelihood of winning the pot given the current visible cards and possible opponent hands.\n**Pot Odds Ratio**\nCalculates the ratio of the current pot size to the bet required to continue playing. This metric aids the AI in making betting decisions by comparing the potential reward of winning the pot against the cost of the next bet, encouraging mathematically sound play.\n**Opponent Betting Behavior Metric**\nAnalyzes opponents' betting patterns observed during the game to assess their likely hand strength. This metric is used to adjust the AI's own betting strategy, possibly bluffing when opponents seem weak or playing cautiously when strong hands are indicated.\n**Card Improvement Potential**\nAssesses the capability of improving the AI's current hand with future card reveals. Factors considered include the number of cards left to be revealed, possible straights, flushes, or other hands that could be completed, influencing whether the AI commits more chips in the current betting round.\n**Optimal Face-Down Card Arrangement**\nWhen receiving the three face-down cards, arrange them with the weakest card first, strongest second, and the intermediate card last.\n**Aggressive Betting with Strong Hands**\nEngage in aggressive betting when your revealed cards already indicate a high possibility of a strong poker hand (e.g., multiple cards of the same rank or suited sequence).\n**Bluff in Early Betting Intervals**\nWhen your face-up cards don't form an obvious strong hand, consider bluffing by participating in higher bets.\n**Calculative Risk Assessment**\nRegularly assess the revealed cards and betting behaviors of opponents to adapt your strategies mid-game."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    from collections import Counter\n    \n    # Define rank mapping for converting card ranks to numerical values\n    rank_mapping = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n                    '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n    # Extracting necessary game state information\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_index]\n    pot = state[\"common\"][\"pot\"]\n    current_bet = state[\"common\"][\"current_bet\"]\n    player_bet = current_player[\"public\"][\"current_bet_amount\"]\n    facedown_cards = current_player[\"facedown_cards\"][\"hole_cards\"]\n    faceup_cards = current_player[\"faceup_cards\"][\"shown_cards\"]\n\n    # Extract the player's full hand (faceup and facedown together)\n    player_hand = faceup_cards + facedown_cards\n\n    # Step 1: Hand Strength Metric\n    hand_strength = 0.35  # Default strength for 'No Pair, high card'\n    rank_counter = Counter(card['rank'] for card in player_hand)\n    unique_suits = len(set(card['suit'] for card in player_hand))\n    \n    # Convert rank_counter keys to their mapped integer values\n    rank_values = [rank_mapping[rank] for rank in rank_counter.keys()]\n    \n    # Hand evaluation logic\n    if 5 in rank_counter.values():\n        hand_strength = 0.99  # Five of a kind\n    elif 4 in rank_counter.values():\n        hand_strength = 0.85  # Four of a kind\n    elif sorted(rank_counter.values(), reverse=True) == [3, 2]:\n        hand_strength = 0.75  # Full House\n    elif unique_suits == 1:\n        hand_strength = 0.65  # Flush\n    elif len(rank_counter) == 5 and (max(rank_values) - min(rank_values) == 4):\n        hand_strength = 0.70  # Straight\n    elif 3 in rank_counter.values():\n        hand_strength = 0.60  # Three of a kind\n    elif list(rank_counter.values()).count(2) == 2:\n        hand_strength = 0.55  # Two Pairs\n    elif 2 in rank_counter.values():\n        hand_strength = 0.45  # One Pair\n\n    # Step 2: Pot Odds Ratio\n    required_to_call = current_bet - player_bet\n    pot_odds = pot / (pot + required_to_call) if required_to_call > 0 else 1  # Protect against division by zero\n\n    # Step 3: Opponent Betting Behavior Metric\n    recent_history = state.get(\"recent_history\", [])\n    action_counts = Counter(event[\"action\"][\"action\"] for event in recent_history if event[\"type\"] == \"action\" and event[\"player_id\"] != current_player_index)\n    active_players_count = len(state[\"players\"]) - len(state[\"common\"][\"folded_players\"])\n    aggressive_opponents = action_counts.get(\"raise\", 0) / max(1, active_players_count)\n    cautious_opponents = action_counts.get(\"call\", 0) / max(1, active_players_count)\n    opponents_strength = 0.5 + (aggressive_opponents - cautious_opponents) * 0.25\n\n    # Step 4: Card Improvement Potential\n    total_hand_size = 7  # Three facedown and four faceup\n    cards_left_to_reveal = total_hand_size - len(player_hand)  # Total number of cards minus what we have\n    improvement_potential = 0.5 + (cards_left_to_reveal / total_hand_size) * 0.2\n\n    # Step 5: Calculate reward\n    result_score = hand_strength * (1 - opponents_strength) * improvement_potential * pot_odds\n    result_score = max(0, min(1, result_score))  # Ensure result_score is between 0 and 1\n\n    return result_score\n"
    ]
}