{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFor this version of High Low Poker, each player receives three cards face down. Players arrange them in any order desired, but may not thereafter change the order.\n\n### The Play\n\nThere is a betting interval. Then each player receives four face-up cards, one at a time, with a betting interval after each. Next, each player turns up their first facedown card, followed by a betting interval, and then their second face-down card, followed by the final betting interval. The last card is then turned up for the showdown.\n\n### Poker Hands\n\nFive of a Kind - This is the highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 5, \"current_player\": 1, \"direction\": 1, \"winner\": null, \"is_over\": false, \"folded_players\": [], \"played_players\": [0], \"facedown_reveal_index\": 0, \"facedown_cards\": {\"deck_size\": 32}, \"faceup_cards\": {\"discard\": []}, \"pot\": 39, \"current_bet\": 11}, \"players\": [{\"public\": {\"current_bet_amount\": 11}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"J\", \"suit\": \"hearts\"}]}}, {\"public\": {\"current_bet_amount\": 6, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hole_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 6}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"4\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"5\", \"suit\": \"spades\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 6}, \"id\": 2}, \"msg\": \"Player 1 decides to: raise-(amount: 6)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 1: {'action': 'raise', 'args': {'amount': 6}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 raises to 6.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 2 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 2: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 calls.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 8}, \"id\": 1}, \"msg\": \"Player 3 decides to: raise-(amount: 8)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 3: {'action': 'raise', 'args': {'amount': 8}, 'id': 1}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 raises to 8.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 4 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 4: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 calls.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Dealing faceup cards to active players...\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gets a faceup card: J-hearts\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 gets a faceup card: 10-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gets a faceup card: 4-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 gets a faceup card: 5-spades\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 gets a faceup card: 7-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 11}, \"id\": 2}, \"msg\": \"Player 0 decides to: raise-(amount: 11)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 0: {'action': 'raise', 'args': {'amount': 11}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 raises to 11.\", \"role\": null}], \"legal_actions\": [{\"action\": \"raise\", \"args\": {\"amount\": 12}, \"id\": 0}, {\"action\": \"raise\", \"args\": {\"amount\": 13}, \"id\": 1}, {\"action\": \"raise\", \"args\": {\"amount\": 14}, \"id\": 2}, {\"action\": \"call\", \"id\": 3}, {\"action\": \"fold\", \"id\": 4}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players in the game.\", \"current_player\": \"The index of the player whose turn it is currently.\", \"direction\": \"The direction of play, which is typically used to move to the next player.\", \"winner\": \"The index of the winning player, or a list of indices if there are multiple winners. It is null if no winner is determined yet.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"folded_players\": \"A list of player indices who have folded during the game.\", \"played_players\": \"A list of player indices who have acted in the current round.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck.\"}, \"pot\": \"The current total amount of money that players are competing for.\", \"current_bet\": \"The current bet that players need to match or raise in the round.\"}, \"players\": [{\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\"}, \"facedown_cards\": {\"hole_cards_size\": \"The number of private hole cards remaining for this player to be revealed.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}, {\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\", \"current_player\": \"A boolean indicating if this player is the current player.\"}, \"facedown_cards\": {\"hole_cards\": \"A list of this player's private cards, each represented by its 'rank' and 'suit'.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": \"The index of the player who performed the action.\", \"action\": {\"action\": \"The type of action the player has taken (e.g., 'raise', 'call').\", \"args\": {\"amount\": \"The amount involved in the action, such as the raise amount.\"}, \"id\": \"An identifier for the action.\"}, \"msg\": \"A message detailing the action taken by the player.\"}, {\"type\": \"info\", \"msg\": \"An informational message typically related to an action or game state update during the game.\", \"role\": \"Could denote a particular role associated with the message, null in this context.\"}, {\"type\": \"turn_end\", \"player_id\": \"The index of the player whose turn just ended.\", \"msg\": \"A message indicating the end of the player's turn.\"}], \"legal_actions\": [{\"action\": \"The type of action the current player can take (e.g., 'raise', 'call', 'fold').\", \"args\": {\"amount\": \"The specific amount to be used for this action, applicable for actions like 'raise'.\"}, \"id\": \"An identifier for the legal action.\"}, {\"action\": \"The type of action the current player can take (e.g., 'call').\", \"id\": \"An identifier for the legal action.\"}]}",
    "policy_list": [
        "**Hand Strength Metric**\nEvaluates the current strength of the AI's hand using standard poker hand rankings. This metric helps decide whether to bet strongly, bet lightly, or fold based on the likelihood of winning the pot given the current visible cards and possible opponent hands.",
        "**Pot Odds Ratio**\nCalculates the ratio of the current pot size to the bet required to continue playing. This metric aids the AI in making betting decisions by comparing the potential reward of winning the pot against the cost of the next bet, encouraging mathematically sound play.",
        "**Opponent Betting Behavior Metric**\nAnalyzes opponents' betting patterns observed during the game to assess their likely hand strength. This metric is used to adjust the AI's own betting strategy, possibly bluffing when opponents seem weak or playing cautiously when strong hands are indicated.",
        "**Card Improvement Potential**\nAssesses the capability of improving the AI's current hand with future card reveals. Factors considered include the number of cards left to be revealed, possible straights, flushes, or other hands that could be completed, influencing whether the AI commits more chips in the current betting round."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n    \n    # Extract current player data\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n    \n    # Calculate hand strength based on known cards\n    cards = current_player['facedown_cards']['hole_cards'] + current_player['faceup_cards']['shown_cards']\n    \n    # Assess strength of cards\n    card_strength_values = {\n        '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, \n        '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, \n        'Q': 12, 'K': 13, 'A': 14\n    }\n    \n    suit_count = {}\n    value_count = {}\n    \n    for card in cards:\n        rank, suit = card['rank'], card['suit']\n        value_count[rank] = value_count.get(rank, 0) + 1\n        suit_count[suit] = suit_count.get(suit, 0) + 1\n\n    # Check for pairs, three-of-a-kinds, etc.\n    if 3 in value_count.values():\n        hand_strength = 0.8\n    elif 2 in value_count.values():\n        hand_strength = 0.6\n    elif max(suit_count.values()) >= 5:\n        hand_strength = 0.9\n    else:\n        high_card_value = max([card_strength_values[card['rank']] for card in cards])\n        hand_strength = high_card_value / 14\n\n    # Determine action impact on probability\n    action_name = action['action']\n    if action_name == 'raise':\n        raise_amount = action['args']['amount']\n        current_bet = state['common']['current_bet']\n        bet_ratio = raise_amount / max(1, current_bet)\n        aggressiveness_factor = min(1, bet_ratio / 5)\n    elif action_name == 'call':\n        aggressiveness_factor = 0.5\n    elif action_name == 'fold':\n        return 0.0\n    \n    # Calculate result score\n    result_score = hand_strength * (1 - aggressiveness_factor) + aggressiveness_factor\n    \n    return max(0.0, min(1.0, result_score))\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Variables for rank value computation.\n    rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n                   '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n    current_player_id = state['common']['current_player']\n    current_player_state = state['players'][current_player_id]\n\n    # Simplified hand strength evaluation based on visible cards\n    faceup_cards = current_player_state['faceup_cards']['shown_cards']\n    ranks = [card['rank'] for card in faceup_cards]\n    score = sum(rank_values.get(rank, 0) for rank in ranks)  # Use get to avoid KeyError\n    max_score = 5 * rank_values['A']\n    hand_strength = score / max_score\n\n    # Pot odds calculation\n    current_bet = state['common']['current_bet']\n    pot = state['common']['pot']\n\n    # Handle missing 'args' key gracefully\n    bet_required = current_bet\n    if 'args' in action:\n        bet_required = action['args'].get('amount', current_bet)\n        \n    if bet_required == 0:\n        pot_odds = 0.0  # Avoid division by zero\n    else:\n        pot_odds_ratio = pot / bet_required\n        pot_odds = min(pot_odds_ratio / 10.0, 1.0)\n\n    # Final result based on hand strength and pot odds\n    result_score = 0.5 * hand_strength + 0.5 * pot_odds\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n\n    def evaluate_hand_strength(face_down, face_up):\n        # Simple evaluation of hand strength\n        card_values = {'2': 2, '3': 3, '4': 4, '5': 5,\n                       '6': 6, '7': 7, '8': 8, '9': 9,\n                       '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n        suits = {}\n        ranks = {}\n        for card in face_down + face_up:\n            rank = card['rank']\n            suit = card['suit']\n            if suit not in suits:\n                suits[suit] = 0\n            if rank not in ranks:\n                ranks[rank] = 0\n            suits[suit] += 1\n            ranks[rank] += 1\n\n        flush = any(count >= 5 for count in suits.values())\n        sorted_ranks = sorted([card_values[rank] for rank in ranks.keys()])\n        straight = any(sorted_ranks[i + 4] - sorted_ranks[i] == 4 for i in range(len(sorted_ranks) - 4))\n\n        score = 0\n        if flush and straight:\n            score = 1.0\n        elif flush:\n            score = 0.9\n        elif straight:\n            score = 0.8\n        else:\n            pairs = sum(1 for count in ranks.values() if count == 2)\n            three_of_kinds = sum(1 for count in ranks.values() if count == 3)\n            four_of_a_kinds = sum(1 for count in ranks.values() if count == 4)\n\n            if four_of_a_kinds > 0:\n                score = 0.7\n            elif three_of_kinds > 0 and pairs > 0:\n                score = 0.6\n            elif three_of_kinds > 0:\n                score = 0.5\n            elif pairs > 1:\n                score = 0.4\n            elif pairs > 0:\n                score = 0.3\n\n        high_card_value = max(sorted_ranks) / 14 * 0.2\n        score += high_card_value\n\n        return min(score, 1.0)\n\n    current_player_idx = state['common']['current_player']\n    player_info = state['players'][current_player_idx]\n    face_down_cards = player_info['facedown_cards']['hole_cards']\n    face_up_cards = player_info['faceup_cards']['shown_cards']\n\n    hand_strength = evaluate_hand_strength(face_down_cards, face_up_cards)\n\n    action_type = action['action']\n    # Use get with default empty list to avoid KeyError\n    recent_history = state.get('recent_history', [])\n    aggressive_moves = sum(1 for move in recent_history if move['type'] == 'action' and move['action']['action'] == 'raise')\n    cautious_moves = sum(1 for move in recent_history if move['type'] == 'action' and move['action']['action'] == 'call')\n\n    aggression_level = (aggressive_moves - cautious_moves) / max(1, len(recent_history))\n    if action_type == 'raise':\n        if aggression_level < 0:\n            hand_strength *= 1.1\n        else:\n            hand_strength *= 0.9\n    elif action_type == 'call':\n        hand_strength *= 0.95\n\n    result_score = max(0.0, min(1.0, hand_strength))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(rank):\n        \"\"\"Convert card rank to numeric value for easier comparisons.\"\"\"\n        if rank == 'A':\n            return 14\n        elif rank == 'K':\n            return 13\n        elif rank == 'Q':\n            return 12\n        elif rank == 'J':\n            return 11\n        else:\n            return int(rank)\n    \n    def calculate_hand_potential(faceup_cards, facedown_cards, deck_size):\n        \"\"\"Calculate hand potential given face-up and face-down cards.\"\"\"\n        suits = {'clubs': 0, 'diamonds': 0, 'hearts': 0, 'spades': 0}\n        ranks = {i: 0 for i in range(2, 15)}  # rank count from 2 to Ace(14)\n        straight_potential = []\n        \n        all_cards = faceup_cards + facedown_cards\n\n        # Count suits and ranks\n        for card in all_cards:\n            suits[card['suit']] += 1\n            ranks[card_value(card['rank'])] += 1\n\n        # Check for flush potential or completed flush\n        flush = any(suits[suit] >= 5 for suit in suits)\n        flush_potential = any(suits[suit] == 4 for suit in suits) and deck_size > 0\n        \n        # Check for straight potential or completed straight\n        straight = False\n        for ind in range(1, 11):  # Ace can be counted as 1 or 14\n            if all(ranks.get(i, 0) > 0 for i in range(ind, ind + 5)):\n                straight = True\n                break\n            elif sum(ranks.get(i, 0) > 0 for i in range(ind, ind + 5)) == 4 and deck_size > 0:\n                straight_potential.append(list(range(ind, ind + 5)))\n        \n        # Hand strength, a rough estimate based on potential\n        hand_strength = 0.2 if flush_potential else 0.0\n        hand_strength += 0.2 if straight_potential else 0.0\n        if flush or straight:\n            hand_strength += 0.6\n    \n        return hand_strength\n\n    # Extract current player cards and game parameters\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n    faceup_cards = current_player['faceup_cards']['shown_cards']\n    facedown_cards = current_player['facedown_cards'].get('hole_cards', [])\n    deck_size = state['common']['facedown_cards']['deck_size']\n\n    # Calculate potential hand improvement \n    hand_potential = calculate_hand_potential(faceup_cards, facedown_cards, deck_size)\n    base_score = 0.5\n\n    # Adjust score based on action\n    action_type = action.get('action', 'call')\n    if action_type == 'raise':\n        raise_amount = action['args'].get('amount', state['common']['current_bet'])\n        base_score += min(raise_amount / (state['common']['pot'] + 1), 0.4)\n    elif action_type == 'call':\n        base_score += 0.1\n    elif action_type == 'fold':\n        base_score -= 0.2\n\n    # Final score is based on hand potential and base score\n    result_score = min(max(base_score + hand_potential, 0), 1)\n\n    return result_score\n"
    ]
}