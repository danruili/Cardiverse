{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFor this version of High Low Poker, each player receives three cards face down. Players arrange them in any order desired, but may not thereafter change the order.\n\n### The Play\n\nThere is a betting interval. Then each player receives four face-up cards, one at a time, with a betting interval after each. Next, each player turns up their first facedown card, followed by a betting interval, and then their second face-down card, followed by the final betting interval. The last card is then turned up for the showdown.\n\n### Poker Hands\n\nFive of a Kind - This is the highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 5, \"current_player\": 1, \"direction\": 1, \"winner\": null, \"is_over\": false, \"folded_players\": [], \"played_players\": [0], \"facedown_reveal_index\": 0, \"facedown_cards\": {\"deck_size\": 32}, \"faceup_cards\": {\"discard\": []}, \"pot\": 39, \"current_bet\": 11}, \"players\": [{\"public\": {\"current_bet_amount\": 11}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"J\", \"suit\": \"hearts\"}]}}, {\"public\": {\"current_bet_amount\": 6, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hole_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 6}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"4\", \"suit\": \"clubs\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"5\", \"suit\": \"spades\"}]}}, {\"public\": {\"current_bet_amount\": 8}, \"facedown_cards\": {\"hole_cards_size\": 3}, \"faceup_cards\": {\"shown_cards\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 6}, \"id\": 2}, \"msg\": \"Player 1 decides to: raise-(amount: 6)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 1: {'action': 'raise', 'args': {'amount': 6}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 raises to 6.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 2 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 2: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 calls.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 8}, \"id\": 1}, \"msg\": \"Player 3 decides to: raise-(amount: 8)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 3: {'action': 'raise', 'args': {'amount': 8}, 'id': 1}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 raises to 8.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"call\", \"id\": 3}, \"msg\": \"Player 4 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 4: {'action': 'call', 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 calls.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Dealing faceup cards to active players...\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gets a faceup card: J-hearts\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 gets a faceup card: 10-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 gets a faceup card: 4-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 gets a faceup card: 5-spades\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 4 gets a faceup card: 7-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"raise\", \"args\": {\"amount\": 11}, \"id\": 2}, \"msg\": \"Player 0 decides to: raise-(amount: 11)\"}, {\"type\": \"info\", \"msg\": \"Processing action by player 0: {'action': 'raise', 'args': {'amount': 11}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 raises to 11.\", \"role\": null}], \"legal_actions\": [{\"action\": \"raise\", \"args\": {\"amount\": 12}, \"id\": 0}, {\"action\": \"raise\", \"args\": {\"amount\": 13}, \"id\": 1}, {\"action\": \"raise\", \"args\": {\"amount\": 14}, \"id\": 2}, {\"action\": \"call\", \"id\": 3}, {\"action\": \"fold\", \"id\": 4}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players in the game.\", \"current_player\": \"The index of the player whose turn it is currently.\", \"direction\": \"The direction of play, which is typically used to move to the next player.\", \"winner\": \"The index of the winning player, or a list of indices if there are multiple winners. It is null if no winner is determined yet.\", \"is_over\": \"A boolean indicating whether the game has ended.\", \"folded_players\": \"A list of player indices who have folded during the game.\", \"played_players\": \"A list of player indices who have acted in the current round.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck.\"}, \"pot\": \"The current total amount of money that players are competing for.\", \"current_bet\": \"The current bet that players need to match or raise in the round.\"}, \"players\": [{\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\"}, \"facedown_cards\": {\"hole_cards_size\": \"The number of private hole cards remaining for this player to be revealed.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}, {\"public\": {\"current_bet_amount\": \"The amount of money this player has bet in the current round.\", \"current_player\": \"A boolean indicating if this player is the current player.\"}, \"facedown_cards\": {\"hole_cards\": \"A list of this player's private cards, each represented by its 'rank' and 'suit'.\"}, \"faceup_cards\": {\"shown_cards\": \"A list of cards that this player has shown/revealed, each card having a 'rank' and a 'suit'.\"}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": \"The index of the player who performed the action.\", \"action\": {\"action\": \"The type of action the player has taken (e.g., 'raise', 'call').\", \"args\": {\"amount\": \"The amount involved in the action, such as the raise amount.\"}, \"id\": \"An identifier for the action.\"}, \"msg\": \"A message detailing the action taken by the player.\"}, {\"type\": \"info\", \"msg\": \"An informational message typically related to an action or game state update during the game.\", \"role\": \"Could denote a particular role associated with the message, null in this context.\"}, {\"type\": \"turn_end\", \"player_id\": \"The index of the player whose turn just ended.\", \"msg\": \"A message indicating the end of the player's turn.\"}], \"legal_actions\": [{\"action\": \"The type of action the current player can take (e.g., 'raise', 'call', 'fold').\", \"args\": {\"amount\": \"The specific amount to be used for this action, applicable for actions like 'raise'.\"}, \"id\": \"An identifier for the legal action.\"}, {\"action\": \"The type of action the current player can take (e.g., 'call').\", \"id\": \"An identifier for the legal action.\"}]}",
    "policy_list": [
        "**Optimal Face-Down Card Arrangement**\nWhen receiving the three face-down cards, arrange them with the weakest card first, strongest second, and the intermediate card last.",
        "**Aggressive Betting with Strong Hands**\nEngage in aggressive betting when your revealed cards already indicate a high possibility of a strong poker hand (e.g., multiple cards of the same rank or suited sequence).",
        "**Bluff in Early Betting Intervals**\nWhen your face-up cards don't form an obvious strong hand, consider bluffing by participating in higher bets.",
        "**Calculative Risk Assessment**\nRegularly assess the revealed cards and betting behaviors of opponents to adapt your strategies mid-game."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n    from itertools import combinations\n\n    # Helper function to evaluate hand strength\n    def evaluate_hand(hand):\n        rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n                       '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        suits = [card['suit'] for card in hand]\n        ranks = sorted([rank_values[card['rank']] for card in hand], reverse=True)\n\n        if len(set(suits)) == 1 and ranks == list(range(ranks[0], ranks[0] - 5, -1)):\n            return (8, ranks)\n        elif any(ranks.count(x) >= 4 for x in ranks):\n            return (7, ranks)\n        elif any(ranks.count(x) == 3 for x in ranks) and any(ranks.count(x) == 2 for x in ranks):\n            return (6, ranks)\n        elif len(set(suits)) == 1:\n            return (5, ranks)\n        elif ranks == list(range(ranks[0], ranks[0] - 5, -1)):\n            return (4, ranks)\n        elif any(ranks.count(x) == 3 for x in ranks):\n            return (3, ranks)\n        elif len([x for x in ranks if ranks.count(x) == 2]) == 4:\n            return (2, ranks)\n        elif any(ranks.count(x) == 2 for x in ranks):\n            return (1, ranks)\n        else:\n            return (0, ranks)\n    \n    current_player = state['common']['current_player']\n    player_state = state['players'][current_player]\n    face_down_cards = player_state['facedown_cards']['hole_cards']\n    face_up_cards = player_state['faceup_cards']['shown_cards']\n    \n    all_cards = face_down_cards + face_up_cards\n\n    # Generate all possible 5-card combinations if sufficient cards exist\n    num_cards = len(all_cards)\n    if num_cards >= 5:\n        hands_combinations = list(combinations(all_cards, 5))\n        best_hand_score = max(evaluate_hand(list(comb)) for comb in hands_combinations)\n    else:\n        # If not enough cards, return 0 as default value\n        return 0.0\n\n    max_possible_score = (8, [14, 13, 12, 11, 10])\n    min_possible_score = (0, [2, 3, 4, 5, 7])\n\n    best_score_numeric = best_hand_score[0] + sum(best_hand_score[1][i] * 0.01**(i+1) for i in range(5))\n    max_score_numeric = max_possible_score[0] + sum(max_possible_score[1][i] * 0.01**(i+1) for i in range(5))\n    min_score_numeric = min_possible_score[0] + sum(min_possible_score[1][i] * 0.01**(i+1) for i in range(5))\n\n    result_score = (best_score_numeric - min_score_numeric) / (max_score_numeric - min_score_numeric)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def evaluate_hand(faceup, hole):\n        \"\"\"Simple heuristic to evaluate the strength of a hand.\"\"\"\n        ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        suit_count = {}\n        rank_count = {}\n\n        # Count the frequency of suits and ranks\n        for card in faceup + hole:\n            rank_value = ranks[card['rank']]\n            rank_count[rank_value] = rank_count.get(rank_value, 0) + 1\n            suit = card['suit']\n            suit_count[suit] = suit_count.get(suit, 0) + 1\n\n        # Sort rank counts to determine pairs, three of a kind, or four of a kind\n        rank_counts = list(rank_count.values())\n        rank_counts.sort(reverse=True)\n\n        # Max suits count for flush detection\n        max_suit_count = max(suit_count.values())\n\n        # Determine hand strength\n        if 4 in rank_counts:  # Four of a kind\n            return 0.9\n        elif 3 in rank_counts and 2 in rank_counts:  # Full House\n            return 0.85\n        elif max_suit_count >= 5:  # Flush\n            return 0.8\n        elif sorted(rank_count.keys())[-1] - sorted(rank_count.keys())[0] == 4:  # Straight\n            return 0.75\n        elif 3 in rank_counts:  # Three of a kind\n            return 0.7\n        elif rank_counts.count(2) == 2:  # Two Pair\n            return 0.65\n        elif 2 in rank_counts:  # One Pair\n            return 0.6\n        else:  # No Pair, evaluate based on high card\n            high_card = max(rank_count.keys())\n            normalized_high_card = high_card / 14.0  # Normalize based on highest possible value\n            return 0.5 + (normalized_high_card / 10.0)  # Small boost for high card\n\n    # Get the current player's data\n    current_player_index = state['common']['current_player']\n    current_player_data = state['players'][current_player_index]\n\n    # Evaluate the known cards of the current player\n    evaluated_hand_score = evaluate_hand(current_player_data['faceup_cards']['shown_cards'],\n                                         current_player_data.get('facedown_cards', {}).get('hole_cards', []))\n\n    # Adjust the score based on the pot odds and current bet status\n    pot = state['common']['pot']\n    current_bet = state['common']['current_bet']\n    player_bet = current_player_data['public']['current_bet_amount']\n    additional_bet = 0\n\n    if action['action'] == 'raise':\n        additional_bet = action['args']['amount']\n\n    # Pot odds consideration; the more favorable the pot odds, the more aggressive we should be\n    total_potential_contribution = player_bet + additional_bet\n    pot_odds = total_potential_contribution / (pot + total_potential_contribution)\n\n    # Adjust the score with the pot odds; prefer high pot odds for aggressive betting\n    result_score = evaluated_hand_score - pot_odds / 2\n\n    # Ensure the score stays within boundaries\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n\n    # Extract key elements from the state\n    current_player_idx = state['common']['current_player']\n    current_pot = state['common']['pot']\n    current_bet = state['common']['current_bet']\n    \n    player_state = state['players'][current_player_idx]\n    facedown_cards = player_state['facedown_cards']['hole_cards']\n    faceup_cards = player_state['faceup_cards']['shown_cards']\n    \n    # Helper function to evaluate the strength of hand\n    def evaluate_hand_strength(faceup_cards, facedown_cards_size):\n        # Simple evaluation: count high cards as strong cards (J, Q, K, A)\n        high_card_ranks = ['J', 'Q', 'K', 'A']\n        \n        high_cards_count = sum(1 for card in faceup_cards if card['rank'] in high_card_ranks)\n\n        # Encourage bluffing if the player has a relatively weak hand\n        # Consider that more face-down cards might mean potential improvement\n        if high_cards_count >= 2 or facedown_cards_size == 0:\n            return min(1, high_cards_count / 5.0)  # Strong hand\n        else:\n            # Weaker hand might still bluff but likely less rewarded\n            return min(0.5, high_cards_count / (len(faceup_cards) + facedown_cards_size))\n\n    # Get the baseline hand strength\n    base_strength = evaluate_hand_strength(faceup_cards, len(facedown_cards))\n    \n    # Factor in the action - encourage bluffing in early rounds with weaker hands\n    action_name = action['action']\n    if action_name == 'raise':\n        # Get raise amount\n        amount = action['args']['amount']\n        # Encourage raising by giving a small boost to the score\n        raise_factor = 0.1 * math.log(amount + 1)\n        base_strength += raise_factor\n        \n    elif action_name == 'call':\n        # Calls receive a neutral score relative to the hand strength\n        call_factor = 0.05\n        base_strength += call_factor\n\n    elif action_name == 'fold':\n        # Folding implies no chance to win, score based on low confidence\n        base_strength = 0.0\n    \n    # Clamp result score between 0 and 1\n    result_score = max(0, min(1, base_strength))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import random\n\n    # Extract data from the game state.\n    current_player_index = state['common']['current_player']\n    players = state['players']\n    pot = state['common']['pot']\n    current_bet = state['common']['current_bet']\n\n    # Extract current player details\n    current_player = players[current_player_index]\n    faceup_cards = current_player['faceup_cards']['shown_cards']\n    facedown_cards = current_player['facedown_cards']['hole_cards']\n\n    # Combine facedown and faceup cards for evaluation\n    all_cards = faceup_cards + facedown_cards\n\n    # Evaluate hand strength (basic random evaluation for demonstration)\n    rank_map = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7,\n                \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}\n    strength = sum(rank_map.get(card['rank'], 2) for card in all_cards) / (14 * len(all_cards))\n\n    # Calculate pot odds\n    bet_needed = action.get('args', {}).get('amount', 0)\n    pot_odds = pot / (pot + bet_needed) if bet_needed else 1\n\n    # Evaluate opponent aggressiveness from history\n    history = state.get('recent_history', [])  # Provide a default empty list if 'recent_history' is not present\n    aggressive_actions = sum(1 for entry in history if entry['type'] == 'action' and entry['action']['action'] == 'raise')\n    total_actions = sum(1 for entry in history if entry['type'] == 'action')\n    opponent_aggression = aggressive_actions / total_actions if total_actions > 0 else random.uniform(0.4, 0.6)\n\n    # Calculate result score\n    result_score = strength * pot_odds * (1 - opponent_aggression)\n    result_score = min(1.0, max(0.0, result_score))\n    \n    return result_score\n"
    ]
}