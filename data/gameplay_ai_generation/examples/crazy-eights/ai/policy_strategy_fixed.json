{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\nShop our Hoyle 6 in 1 Fun Pack\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in your hand.\n\n### Card Values/scoring\n\nThe player who is the first to have no cards left wins the game. The winning player collects from each other player the value of the cards remaining in that player\u2019s hand as follows:\n\nEach eight = 50 points\n\nEach K, Q, J or 10 = 10 points\n\nEach ace = 1 point\n\nEach other card is the pip value\n\n### The Deal\n\nDeal 5 cards one at a time, face down, beginning with the player to the left. The balance of the pack is placed face down in the center of the table and forms the stock. The dealer turns up the top card and places it in a separate pile; this card is the \u201cstarter.\u201d If an eight is turned, it is buried in the middle of the pack and the next card is turned.\n\nThe Play\n\nStarting to the dealer\u2019s left, each player must place one card face up on the starter pile. Each card played (other than an eight) must match the card showing on the starter pile, either in suit or in denomination.\n\nExample: If the Q of Clubs is the starter, any club may be played on it or any Queen.\n\nIf unable to play, cards are drawn from the top of the stock until a play is possible, or until the stock is exhausted. If unable to play when the stock is exhausted, the player must pass. A player may draw from the stock, even though there may be a playable card in the player\u2019s hand.\n\nAll eights are wild! That is, an eight may be played at any time in turn, and the player need only specify a suit for it (but never a number). The next player must play either a card of the specified suit or an eight.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"current_suit\": \"diamonds\", \"is_over\": false, \"faceup_cards\": {\"played_cards\": [{\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}], \"target_card\": {\"rank\": \"9\", \"suit\": \"diamonds\"}}, \"facedown_cards\": {\"deck_size\": 27}}, \"players\": [{\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 4}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0, \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}]}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"legal_actions\": [{\"action\": \"draw\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section of the game state that contains information that is shared among all players.\", \"common.num_players\": \"The total number of players participating in the game; in this case, it is 4.\", \"common.current_player\": \"The index of the player whose turn it is presently; in this scenario, player 2 is the current player.\", \"common.winner\": \"Indicates the index of the winning player if the game is over. Here, it is null, meaning no winner yet.\", \"common.current_suit\": \"The suit currently in play that players aim to match when playing a card; diamonds is the current suit.\", \"common.is_over\": \"A boolean indicating if the game has concluded. It is false, meaning the game is still ongoing.\", \"common.faceup_cards\": \"An area of the game state that contains the cards visible to all players.\", \"common.faceup_cards.played_cards\": \"A list of cards that have been played during the game; these are publicly visible.\", \"common.faceup_cards.target_card\": \"The last card played, which determines the rank players can match; currently, it's the 9 of diamonds.\", \"common.facedown_cards\": \"An area of the game state that contains cards that are not visible to all players.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the draw deck available to be picked; the count is 27.\", \"players\": \"An array of objects where each object represents the state of an individual player within the game.\", \"players[n].public\": \"Publicly visible information of the nth player (0-indexed).\", \"players[n].public.score\": \"The current score of the nth player. Currently it is 0 for all players.\", \"players[2].public.current_player\": \"A field unique to player 2, indicating that they are the current player.\", \"players[n].facedown_cards\": \"The cards that the nth player can see but other players cannot.\", \"players[n].facedown_cards.hand\": \"The list of cards in the hand of player 2, which are visible only to them.\", \"players[n].facedown_cards.hand_size\": \"The number of cards currently in the hand of the nth player, if the hand itself is not visible; it is shown for players 0, 1, and 3.\", \"legal_actions\": \"A list of possible legal actions that the current player (player 2) can take on their turn.\", \"legal_actions[n].action\": \"The type of action that can be performed, such as 'draw' or 'play'.\", \"legal_actions[n].id\": \"The identifier for the legal action, useful for selecting an action.\"}",
    "policy_list": [
        "**Play High-Value Cards Early**\nFocus on playing your highest-value cards (e.g., eights and face cards) early in the game.",
        "**Strategic Use of Eights**\nUse eights strategically to disrupt opponents' gameplay and control the game's flow by choosing suits that may hinder them based on observed play history.",
        "**Maintain Suit Diversity**\nTry to keep a balanced hand with a variety of suits so that you have more playable options regardless of the card turned up on the starter pile.",
        "**Utilize Drawing Option Wisely**\nSometimes, choose to draw even if you have a playable card, especially if that card is strategically valuable, like a wild eight or low-value card."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card):\n        \"\"\"Returns the value of a card.\"\"\"\n        if card['rank'] == '8':\n            return 50\n        if card['rank'] in ['K', 'Q', 'J', '10']:\n            return 10\n        if card['rank'] == 'A':\n            return 1\n        return int(card['rank'])\n\n    # Extract relevant data from the state\n    current_player_hand = state[\"players\"][state[\"common\"][\"current_player\"]][\"facedown_cards\"][\"hand\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # Assume that if an action is to draw, we cannot directly evaluate the value using hand cards\n    if action[\"action\"] == \"draw\":\n        return 0.3  # Give a low but a reasonable probability if draw is opted\n\n    # Determine if action involves playing a card\n    if action[\"action\"] == \"play\":\n        card_idx = action[\"args\"][\"card_idx\"]\n        played_card = current_player_hand[card_idx]\n        played_card_value = card_value(played_card)\n\n        # Calculate the value of current player's hand\n        total_hand_value = sum(card_value(card) for card in current_player_hand)\n\n        # Estimate scores based on action\n        result_score = played_card_value / (total_hand_value if total_hand_value != 0 else 1)\n\n        # Adjust score for playing high-value cards early\n        high_value_cards = ['8', 'K', 'Q', 'J', '10']\n        if played_card['rank'] in high_value_cards:\n            result_score += 0.2  # Reward high-value card play\n\n        # Ensure the score is within 0 to 1 range\n        result_score = min(max(result_score, 0), 1)\n    \n        return result_score\n\n    # Default case if action type is unexpected\n    return 0.0\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common game state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player_index = state[\"common\"][\"current_player\"]\n    faceup_target_card = state[\"common\"][\"faceup_cards\"][\"target_card\"]\n    current_suit = state[\"common\"][\"current_suit\"]\n    deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    \n    # Extract current player's state\n    current_player_state = state[\"players\"][current_player_index]\n    current_hand = current_player_state[\"facedown_cards\"][\"hand\"]\n    \n    # Count cards in hand\n    hand_size = len(current_hand)\n    \n    # Check if the current action is 'play'\n    is_play_action = action[\"action\"] == \"play\"\n    \n    # Check if the player has an eight and is playing it\n    is_eight_played = False\n    suit_preference_score = 0\n    eight_suit = None\n    \n    if is_play_action:\n        # Get the action card's info\n        action_card_index = action.get(\"id\", -1)\n        if action_card_index >= 0 and action_card_index < hand_size:\n            action_card = current_hand[action_card_index]\n            if action_card[\"rank\"] == \"8\":\n                is_eight_played = True\n                # Determine suit preference based on other players' potential weaknesses\n                common_suits = [card[\"suit\"] for card in state[\"common\"][\"faceup_cards\"][\"played_cards\"]]\n                suit_counter = {s: common_suits.count(s) for s in set(common_suits)}\n                eight_suit = max(suit_counter, key=suit_counter.get, default=current_suit)\n                if eight_suit:\n                    suit_preference_score += 0.1  # Giving score for strategic eight play\n\n    # Evaluate hand quality and action potential\n    action_score = 0\n    \n    for card in current_hand:\n        if card[\"suit\"] == faceup_target_card[\"suit\"] or card[\"rank\"] == faceup_target_card[\"rank\"]:\n            action_score += 0.05\n        \n        if card[\"rank\"] in [\"K\", \"Q\", \"J\", \"10\"]:\n            action_score += 0.1\n        elif card[\"rank\"] == \"A\":\n            action_score += 0.02\n        elif card[\"rank\"].isdigit():\n            action_score += 0.01 * int(card[\"rank\"])\n    \n    # Calculate the reward based on card playability and strategic eight use\n    base_reward = 0.2 if deck_size > 0 else 0.1\n    reward_score = min(1, base_reward + (1 - hand_size / 52) + action_score - suit_preference_score)\n\n    # If an eight is played, adapt reward learning\n    if is_eight_played:\n        reward_score = min(1, reward_score + suit_preference_score + 0.3)\n\n    result_score = reward_score  # Assigning to use required final return keyword\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Helper function to calculate the diversity of suits in hand\n    def suit_diversity(hand):\n        suits = set(card['suit'] for card in hand)\n        return len(suits)\n\n    # Extract common game state information\n    common_state = state[\"common\"]\n    players = state[\"players\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # If the game is already over, return 0\n    if common_state[\"is_over\"]:\n        return 0.0\n\n    # Extract current player state\n    current_player_index = common_state[\"current_player\"]\n    current_player_state = players[current_player_index]\n    current_hand = current_player_state[\"facedown_cards\"][\"hand\"]\n    current_suit = common_state[\"current_suit\"]\n    target_card = common_state[\"faceup_cards\"][\"target_card\"]\n\n    # Evaluate current action\n    if action == \"draw\":\n        result_score = 0.1  # Default score for drawing a card\n    else:\n        # Find the card to be played from legal actions\n        card_to_play = None\n        for act in legal_actions:\n            if act['id'] == action:\n                card_to_play = current_hand[action]\n                break\n\n        # If the action is illegal, return a score of 0\n        if card_to_play is None:\n            return 0.0\n        \n        # Check if the card to play is an \"8\" (wild card)\n        is_eight = card_to_play[\"rank\"] == \"8\"\n\n        # Check if the card matches the current suit or rank\n        matches_suit = card_to_play[\"suit\"] == current_suit\n        matches_rank = card_to_play[\"rank\"] == target_card[\"rank\"]\n\n        # Calculate suit diversity before and after playing\n        current_diversity = suit_diversity(current_hand)\n        hand_after_play = [card for card in current_hand if card != card_to_play]\n        new_diversity = suit_diversity(hand_after_play)\n\n        # Score increases if suit diversity is maintained and card matches\n        if is_eight:\n            result_score = 0.8  # High score for playing an eight\n        elif matches_suit or matches_rank:\n            result_score = 0.7 + 0.1 * (new_diversity - current_diversity)\n        else:\n            result_score = 0.4 + 0.1 * (new_diversity - current_diversity)\n    \n    # Make sure the score is within the desired range\n    result_score = max(0.0, min(result_score, 1.0))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information from the state\n    common = state['common']\n    players = state['players']\n    legal_actions = state['legal_actions']\n    \n    current_player = common['current_player']\n    player_hand = players[current_player]['facedown_cards']['hand']\n    \n    current_suit = common['current_suit']\n    target_card = common['faceup_cards']['target_card']\n    \n    # Initialize score components\n    suit_match_score = 0\n    denomination_match_score = 0\n    eights_score = 0\n    low_card_score = 0\n\n    # Analyze the player's hand\n    for card in player_hand:\n        # Check for suit match\n        if card['suit'] == current_suit:\n            suit_match_score += 1\n        \n        # Check for denomination match\n        if card['rank'] == target_card['rank']:\n            denomination_match_score += 1\n        \n        # Special case for wild eights\n        if card['rank'] == '8':\n            eights_score += 0.5  # Favor retaining or strategically playing wild eights\n\n        # Check for low-value cards (Aces or numeric values below 5)\n        if card['rank'] == 'A' or (card['rank'].isnumeric() and int(card['rank']) < 5):\n            low_card_score += 0.1\n\n    # Calculate the base score from possible actions\n    action_scores = {\n        'play': (suit_match_score + denomination_match_score) / len(player_hand),\n        'draw': 0.2,  # Encourage drawing when beneficial\n        'pass': 0.0  # Define a default score for the pass action\n    }\n\n    # Extract the action type from the action dictionary\n    action_type = action['action']\n    \n    # If current game action is drawing, apply additional strategy consideration\n    if action_type == 'draw':\n        action_scores['draw'] += eights_score + low_card_score\n    \n    # Normalize the result score to [0, 1]\n    result_score = min(max(action_scores[action_type], 0.0), 1.0)\n\n    return result_score\n"
    ]
}