{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\nShop our Hoyle 6 in 1 Fun Pack\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in your hand.\n\n### Card Values/scoring\n\nThe player who is the first to have no cards left wins the game. The winning player collects from each other player the value of the cards remaining in that player\u2019s hand as follows:\n\nEach eight = 50 points\n\nEach K, Q, J or 10 = 10 points\n\nEach ace = 1 point\n\nEach other card is the pip value\n\n### The Deal\n\nDeal 5 cards one at a time, face down, beginning with the player to the left. The balance of the pack is placed face down in the center of the table and forms the stock. The dealer turns up the top card and places it in a separate pile; this card is the \u201cstarter.\u201d If an eight is turned, it is buried in the middle of the pack and the next card is turned.\n\nThe Play\n\nStarting to the dealer\u2019s left, each player must place one card face up on the starter pile. Each card played (other than an eight) must match the card showing on the starter pile, either in suit or in denomination.\n\nExample: If the Q of Clubs is the starter, any club may be played on it or any Queen.\n\nIf unable to play, cards are drawn from the top of the stock until a play is possible, or until the stock is exhausted. If unable to play when the stock is exhausted, the player must pass. A player may draw from the stock, even though there may be a playable card in the player\u2019s hand.\n\nAll eights are wild! That is, an eight may be played at any time in turn, and the player need only specify a suit for it (but never a number). The next player must play either a card of the specified suit or an eight.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"current_suit\": \"diamonds\", \"is_over\": false, \"faceup_cards\": {\"played_cards\": [{\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}], \"target_card\": {\"rank\": \"9\", \"suit\": \"diamonds\"}}, \"facedown_cards\": {\"deck_size\": 27}}, \"players\": [{\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 4}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0, \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}]}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"legal_actions\": [{\"action\": \"draw\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section of the game state that contains information that is shared among all players.\", \"common.num_players\": \"The total number of players participating in the game; in this case, it is 4.\", \"common.current_player\": \"The index of the player whose turn it is presently; in this scenario, player 2 is the current player.\", \"common.winner\": \"Indicates the index of the winning player if the game is over. Here, it is null, meaning no winner yet.\", \"common.current_suit\": \"The suit currently in play that players aim to match when playing a card; diamonds is the current suit.\", \"common.is_over\": \"A boolean indicating if the game has concluded. It is false, meaning the game is still ongoing.\", \"common.faceup_cards\": \"An area of the game state that contains the cards visible to all players.\", \"common.faceup_cards.played_cards\": \"A list of cards that have been played during the game; these are publicly visible.\", \"common.faceup_cards.target_card\": \"The last card played, which determines the rank players can match; currently, it's the 9 of diamonds.\", \"common.facedown_cards\": \"An area of the game state that contains cards that are not visible to all players.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the draw deck available to be picked; the count is 27.\", \"players\": \"An array of objects where each object represents the state of an individual player within the game.\", \"players[n].public\": \"Publicly visible information of the nth player (0-indexed).\", \"players[n].public.score\": \"The current score of the nth player. Currently it is 0 for all players.\", \"players[2].public.current_player\": \"A field unique to player 2, indicating that they are the current player.\", \"players[n].facedown_cards\": \"The cards that the nth player can see but other players cannot.\", \"players[n].facedown_cards.hand\": \"The list of cards in the hand of player 2, which are visible only to them.\", \"players[n].facedown_cards.hand_size\": \"The number of cards currently in the hand of the nth player, if the hand itself is not visible; it is shown for players 0, 1, and 3.\", \"legal_actions\": \"A list of possible legal actions that the current player (player 2) can take on their turn.\", \"legal_actions[n].action\": \"The type of action that can be performed, such as 'draw' or 'play'.\", \"legal_actions[n].id\": \"The identifier for the legal action, useful for selecting an action.\"}",
    "policy_list": [
        "**Optimize Card Usage**\nPrioritize playing cards with the highest risk of penalty points first, such as eights, face cards, and tens. Keep track of the suits and numbers that have already been played to strategize effective use of wild cards (eights) and to anticipate possible plays by opponents. Use eights strategically when holding a diverse hand, directing the play towards suits rich in offensive or advantageous cards in hand."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card):\n        if card['rank'] == '8':\n            return 50\n        elif card['rank'] in ['K', 'Q', 'J', '10']:\n            return 10\n        elif card['rank'] == 'A':\n            return 1\n        else:\n            return int(card['rank'])\n\n    current_player_state = state['players'][state['common']['current_player']]\n    hand = current_player_state['facedown_cards']['hand']\n    \n    hand_risk = sum(card_value(card) for card in hand)\n\n    if action['action'] == 'play':\n        card_to_play_idx = action['args']['card_idx']\n        card_to_play = hand[card_to_play_idx]\n        card_risk = card_value(card_to_play)\n        \n        if card_to_play['rank'] == '8':\n            multiplier = 1.5\n        else:\n            multiplier = 1.0\n        \n        result_score = multiplier * card_risk / hand_risk if hand_risk > 0 else 0.5\n        \n    elif action['action'] == 'draw':\n        result_score = 0.1 \n    \n    result_score = 0.5 if action.get('action') not in ['play', 'draw'] else result_score\n\n    return result_score\n"
    ]
}