{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\nShop our Hoyle 6 in 1 Fun Pack\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in your hand.\n\n### Card Values/scoring\n\nThe player who is the first to have no cards left wins the game. The winning player collects from each other player the value of the cards remaining in that player\u2019s hand as follows:\n\nEach eight = 50 points\n\nEach K, Q, J or 10 = 10 points\n\nEach ace = 1 point\n\nEach other card is the pip value\n\n### The Deal\n\nDeal 5 cards one at a time, face down, beginning with the player to the left. The balance of the pack is placed face down in the center of the table and forms the stock. The dealer turns up the top card and places it in a separate pile; this card is the \u201cstarter.\u201d If an eight is turned, it is buried in the middle of the pack and the next card is turned.\n\nThe Play\n\nStarting to the dealer\u2019s left, each player must place one card face up on the starter pile. Each card played (other than an eight) must match the card showing on the starter pile, either in suit or in denomination.\n\nExample: If the Q of Clubs is the starter, any club may be played on it or any Queen.\n\nIf unable to play, cards are drawn from the top of the stock until a play is possible, or until the stock is exhausted. If unable to play when the stock is exhausted, the player must pass. A player may draw from the stock, even though there may be a playable card in the player\u2019s hand.\n\nAll eights are wild! That is, an eight may be played at any time in turn, and the player need only specify a suit for it (but never a number). The next player must play either a card of the specified suit or an eight.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"current_suit\": \"diamonds\", \"is_over\": false, \"faceup_cards\": {\"played_cards\": [{\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}], \"target_card\": {\"rank\": \"9\", \"suit\": \"diamonds\"}}, \"facedown_cards\": {\"deck_size\": 27}}, \"players\": [{\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 4}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0, \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}]}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"legal_actions\": [{\"action\": \"draw\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section of the game state that contains information that is shared among all players.\", \"common.num_players\": \"The total number of players participating in the game; in this case, it is 4.\", \"common.current_player\": \"The index of the player whose turn it is presently; in this scenario, player 2 is the current player.\", \"common.winner\": \"Indicates the index of the winning player if the game is over. Here, it is null, meaning no winner yet.\", \"common.current_suit\": \"The suit currently in play that players aim to match when playing a card; diamonds is the current suit.\", \"common.is_over\": \"A boolean indicating if the game has concluded. It is false, meaning the game is still ongoing.\", \"common.faceup_cards\": \"An area of the game state that contains the cards visible to all players.\", \"common.faceup_cards.played_cards\": \"A list of cards that have been played during the game; these are publicly visible.\", \"common.faceup_cards.target_card\": \"The last card played, which determines the rank players can match; currently, it's the 9 of diamonds.\", \"common.facedown_cards\": \"An area of the game state that contains cards that are not visible to all players.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the draw deck available to be picked; the count is 27.\", \"players\": \"An array of objects where each object represents the state of an individual player within the game.\", \"players[n].public\": \"Publicly visible information of the nth player (0-indexed).\", \"players[n].public.score\": \"The current score of the nth player. Currently it is 0 for all players.\", \"players[2].public.current_player\": \"A field unique to player 2, indicating that they are the current player.\", \"players[n].facedown_cards\": \"The cards that the nth player can see but other players cannot.\", \"players[n].facedown_cards.hand\": \"The list of cards in the hand of player 2, which are visible only to them.\", \"players[n].facedown_cards.hand_size\": \"The number of cards currently in the hand of the nth player, if the hand itself is not visible; it is shown for players 0, 1, and 3.\", \"legal_actions\": \"A list of possible legal actions that the current player (player 2) can take on their turn.\", \"legal_actions[n].action\": \"The type of action that can be performed, such as 'draw' or 'play'.\", \"legal_actions[n].id\": \"The identifier for the legal action, useful for selecting an action.\"}",
    "policy_list": [
        "**Refined Strategy for High-Value Cards**\nRefine the strategy by focusing on early turns (while hand sizes are larger than 2 cards for the AI or opponents). Prioritize playing high-value cards when the AI has several playable options, or when opponents have few cards left. Use eights strategically to either change the suit to one that maximizes the AI's playability or to disrupt opponents' likely plays. Consider drawing from the stock at times when it could lead to a more flexible hand for future turns, but balance this with the urgency of high-value card removal.",
        "**Strategic Eights Detailed Strategy**\nTo effectively utilize eights, observe these refined strategies: (1) Play an eight when your 'Playable Cards Count' is low to avoid drawing unnecessary cards. Choose a suit that you have the most cards in to maximize upcoming playable options. (2) Consider 'Opponent Card Count Estimation' to play aggressively with eights, changing suits when an opponent has a small hand to impede them and potentially force draws. (3) Monitor 'Wild Card Usage' to ensure efficient use, saving eights for either minimizing draw risks in tight situations or for turning the flow of play when opponents are close to winning. This strategic deployment of eights not only aids in flexibility but also disrupts opponent strategies, aiding in reaching the game objective of emptying the hand first.",
        "**Maintain Suit Diversity**\nTo refine this strategy, the AI should evaluate its hand for the number of suits present. A good balance could mean having at least one card of each suit, minimizing the risk of being unable to play. As a critical moment, if the AI's hand size becomes small (e.g., 3-4 cards), maintaining at least one card of each suit becomes more crucial to prevent getting stuck without playable cards. The AI should also consider the 'Playable Cards Count'; if it's high, it might mean sacrificing some suit diversity to shed cards quickly. If it's low, the AI might decide to draw from the stock to enhance suit flexibility. Lastly, in terms of 'Wild Card Usage', when playing an eight, the AI should select a suit that it is already well-represented in its hand or less present on the table to maintain the competitive edge.",
        "**Refined Utilize Drawing Option Wisely**\nThe strategy 'Utilize Drawing Option Wisely' can be refined by identifying critical moments and aligning actions with game state metrics as follows:\n\n1. **Critical Moments:**\n   - **Preservation of Wild Cards:** Opt to draw instead of playing a card when holding an eight, especially if the current game state indicates that immediate disruption of opponents' plays is not necessary.\n   - **Low Card Count in Opponents' Hands:** If opponents have one or two cards left, consider drawing to extend the game and wait for a strategic moment to drop an eight to alter the suit.\n\n2. **Game State Metrics:**\n   - **Playable Cards Count:** If there are multiple playable cards in hand, drawing may be preferable to preserve certain cards like high value (10, J, Q, K) or wild eights for future pivotal plays.\n   - **Opponent Card Count Estimation:** If the AI has estimated that opponents' hands are large, drawing cards can strategically lessen the chance of providing them with a winning play by altering the pile less predictably.\n   - **Stock Card Draw Potential:** If drawing from the stock pile has the potential to significantly improve the AI\u2019s hand (such as when stock card analysis suggests high-value cards remain), drawing rather than playing may be beneficial.\n\nBy clearly defining these conditions, the AI can utilize its hand effectively, maintaining favorable play conditions while minimizing the probability of opponents winning quickly."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def calculate_hand_value(hand):\n        value = 0\n        for card in hand:\n            if card['rank'].isdigit():\n                value += int(card['rank'])\n            elif card['rank'] in ['J', 'Q', 'K']:\n                value += 10\n            elif card['rank'] == 'A':\n                value += 1\n            elif card['rank'] == '8':\n                value += 50\n        return value\n    \n    common = state['common']\n    current_player_index = common['current_player']\n    current_player = state['players'][current_player_index]\n    hand = current_player['facedown_cards']['hand']\n    hand_size = len(hand)\n\n    if action == 'draw':\n        potential_hand_value = calculate_hand_value(hand) + (state['common']['facedown_cards']['deck_size'] / 4) \n    else:\n        action_details = [x for x in state['legal_actions'] if x['action'] in action]\n        if action_details:\n            action_id = action_details[0]['id']\n            action_card = hand[action_id]\n            potential_hand_value = calculate_hand_value(hand) - calculate_hand_value([action_card])\n        else:\n            potential_hand_value = calculate_hand_value(hand)\n\n    high_value_card_count = sum([1 for card in hand if card['rank'] == '8' or card['rank'] in ['J', 'Q', 'K', '10']])\n\n    score_from_hand_value = (52 - potential_hand_value) / 52\n    score_from_hand_size = (7 - hand_size) / 7\n    score_from_high_value = (5 - high_value_card_count) / 5\n    \n    result_score = (0.6 * score_from_hand_value + 0.3 * score_from_hand_size + 0.1 * score_from_high_value)\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_index]\n    current_hand = current_player[\"facedown_cards\"][\"hand\"]\n    current_suit = state[\"common\"][\"current_suit\"]\n    deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    \n    # Initial variables\n    result_score = 0.0\n    hand_size = len(current_hand)\n    is_play_possible = False\n    opponent_hands = [state[\"players\"][i][\"facedown_cards\"].get(\"hand_size\", 0) for i in range(state[\"common\"][\"num_players\"]) if i != current_player_index]\n    \n    # Check if player can play\n    for card in current_hand:\n        if card[\"suit\"] == current_suit or card[\"rank\"] == state[\"common\"][\"faceup_cards\"][\"target_card\"][\"rank\"]:\n            is_play_possible = True\n            break\n            \n    # Check for eights\n    num_eights = sum(1 for card in current_hand if card[\"rank\"] == \"8\")\n    \n    # Base score based on hand size\n    result_score += (52.0 - hand_size) / 52.0\n    \n    # Adjust score based on the ability to play\n    if is_play_possible:\n        result_score += 0.15\n    else:\n        if action[\"action\"] == \"draw\":\n            result_score -= 0.10 * (1 if deck_size > 0 else 0.3)\n    \n    # Adjust score for eights\n    if num_eights > 0:\n        result_score += 0.1 * num_eights\n    \n    # Opponent card estimation and strategy deployment\n    min_opponent_hand = min(opponent_hands)\n    if num_eights > 0:\n        if min_opponent_hand <= 2:\n            result_score += 0.05 * (num_eights - 1)  # Strategic deployment against opponents with low hand size\n    \n    # Ensure result score is in the range of [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from state\n    common = state['common']\n    players = state['players']\n    \n    current_player = common['current_player']\n    hand = players[current_player]['facedown_cards']['hand']\n    current_suit = common['current_suit']\n    hand_size = len(hand)\n    \n    # Initialize factors for scoring\n    suit_diversity_factor = 0\n    playability_factor = 0\n    wild_card_usage_factor = 0\n    \n    # Calculate suit diversity based on hand\n    suits_in_hand = set(card['suit'] for card in hand)\n    num_suits = len(suits_in_hand)\n    \n    # Weight for having cards of different suits\n    suit_diversity_factor = num_suits / 4\n    \n    # Check playability: if able to play on the current target card or any eight\n    playable_cards = [card for card in hand if card['suit'] == common['faceup_cards']['target_card']['suit'] or card['rank'] == common['faceup_cards']['target_card']['rank']]\n    wild_cards = [card for card in hand if card['rank'] == '8']\n    \n    if playable_cards or wild_cards:\n        playability_factor = 1\n\n    # Evaluate action\n    if action['action'] == \"draw\":\n        # Drawing might be better if fewer playable cards and low hand diversity\n        if len(playable_cards) < 1 or suit_diversity_factor < 0.5:\n            playability_factor += 0.2  # Encouraging draw when not many options\n    \n    if action['action'] == \"play\":\n        play_card = action.get('card')\n        if play_card in wild_cards:\n            # Choose a suit that maximizes diversity\n            suit_counts = {suit: sum(1 for card in hand if card['suit'] == suit) for suit in suits_in_hand}\n            less_common_suit = min(suit_counts, key=suit_counts.get)\n            # If preserving less common suit with eight\n            wild_card_usage_factor = 1 if less_common_suit in suits_in_hand else 0.5\n        \n        # Decrease diversity if drawing the last card of a suit\n        if hand_size - 1 == 3:\n            suit_counts = {suit: sum(1 for card in hand if card['suit'] == suit) for suit in suits_in_hand}\n            if suit_counts[play_card['suit']] == 1:\n                suit_diversity_factor -= 0.2\n    \n    # Calculate final score, ensuring it stays within 0 and 1\n    result_score = 0.5 * suit_diversity_factor + 0.3 * playability_factor + 0.2 * wild_card_usage_factor\n    result_score = max(0, min(1, result_score))\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def calculate_hand_value(hand):\n        \"\"\"Evaluate the current hand value based on card point system.\"\"\"\n        value = 0\n        for card in hand:\n            rank = card['rank']\n            if rank == '8':\n                value += 50\n            elif rank in ['10', 'J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 1\n            else:\n                value += int(rank)\n        return value\n    \n    # Extract common info\n    current_player_index = state['common']['current_player']\n    current_player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    num_players = state['common']['num_players']\n    \n    # Calculate the value of the cards in hand\n    hand_value = calculate_hand_value(current_player_hand)\n    \n    # Initialize result_score\n    result_score = 0.1\n    \n    # Assess the opportunity to draw\n    if action == 'draw':\n        # Preservation of Wild Cards & hand values\n        has_eight = any(card['rank'] == '8' for card in current_player_hand)\n        high_value_in_hand = any(card['rank'] in ['10', 'J', 'Q', 'K'] for card in current_player_hand)\n        \n        # Evaluate game state to decide if it's preferable to draw\n        should_draw = (has_eight or high_value_in_hand) and state['players'][current_player_index]['facedown_cards']['hand_size'] > 4\n        \n        # Consider opponents' low card counts which suggest strategic delay\n        opponents_low_cards = any(state['players'][i]['facedown_cards']['hand_size'] <= 2 for i in range(num_players) if i != current_player_index)\n\n        if should_draw or opponents_low_cards:\n            # Encourage drawing to maintain strategic advantage\n            result_score = 0.7 + (0.05 * state['common']['facedown_cards']['deck_size'] / 52)\n    \n    # Assess potential actions beyond drawing\n    elif action.startswith('play'):\n        # If playing, assess action based on maintaining control and potential for winning\n        card_index = int(action.split()[-1])\n        card_to_play = current_player_hand[card_index]\n\n        potential_gain = 0\n        if card_to_play['rank'] == '8':\n            # Using a wild card\n            potential_gain += 0.5\n        elif card_to_play['suit'] == state['common']['current_suit'] or card_to_play['rank'] == state['common']['faceup_cards']['target_card']['rank']:\n            # Correctly matching available play\n            potential_gain += 0.3\n        \n        # Calculate result score for play\n        result_score = max(0, (1 - (hand_value / 100)) + potential_gain)\n    \n    return result_score\n"
    ]
}