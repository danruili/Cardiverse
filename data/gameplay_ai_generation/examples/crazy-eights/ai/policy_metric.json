{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\nShop our Hoyle 6 in 1 Fun Pack\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in your hand.\n\n### Card Values/scoring\n\nThe player who is the first to have no cards left wins the game. The winning player collects from each other player the value of the cards remaining in that player\u2019s hand as follows:\n\nEach eight = 50 points\n\nEach K, Q, J or 10 = 10 points\n\nEach ace = 1 point\n\nEach other card is the pip value\n\n### The Deal\n\nDeal 5 cards one at a time, face down, beginning with the player to the left. The balance of the pack is placed face down in the center of the table and forms the stock. The dealer turns up the top card and places it in a separate pile; this card is the \u201cstarter.\u201d If an eight is turned, it is buried in the middle of the pack and the next card is turned.\n\nThe Play\n\nStarting to the dealer\u2019s left, each player must place one card face up on the starter pile. Each card played (other than an eight) must match the card showing on the starter pile, either in suit or in denomination.\n\nExample: If the Q of Clubs is the starter, any club may be played on it or any Queen.\n\nIf unable to play, cards are drawn from the top of the stock until a play is possible, or until the stock is exhausted. If unable to play when the stock is exhausted, the player must pass. A player may draw from the stock, even though there may be a playable card in the player\u2019s hand.\n\nAll eights are wild! That is, an eight may be played at any time in turn, and the player need only specify a suit for it (but never a number). The next player must play either a card of the specified suit or an eight.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"current_suit\": \"diamonds\", \"is_over\": false, \"faceup_cards\": {\"played_cards\": [{\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}], \"target_card\": {\"rank\": \"9\", \"suit\": \"diamonds\"}}, \"facedown_cards\": {\"deck_size\": 27}}, \"players\": [{\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 4}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0, \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"spades\"}]}, \"faceup_cards\": {}}, {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}], \"legal_actions\": [{\"action\": \"draw\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"A section of the game state that contains information that is shared among all players.\", \"common.num_players\": \"The total number of players participating in the game; in this case, it is 4.\", \"common.current_player\": \"The index of the player whose turn it is presently; in this scenario, player 2 is the current player.\", \"common.winner\": \"Indicates the index of the winning player if the game is over. Here, it is null, meaning no winner yet.\", \"common.current_suit\": \"The suit currently in play that players aim to match when playing a card; diamonds is the current suit.\", \"common.is_over\": \"A boolean indicating if the game has concluded. It is false, meaning the game is still ongoing.\", \"common.faceup_cards\": \"An area of the game state that contains the cards visible to all players.\", \"common.faceup_cards.played_cards\": \"A list of cards that have been played during the game; these are publicly visible.\", \"common.faceup_cards.target_card\": \"The last card played, which determines the rank players can match; currently, it's the 9 of diamonds.\", \"common.facedown_cards\": \"An area of the game state that contains cards that are not visible to all players.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the draw deck available to be picked; the count is 27.\", \"players\": \"An array of objects where each object represents the state of an individual player within the game.\", \"players[n].public\": \"Publicly visible information of the nth player (0-indexed).\", \"players[n].public.score\": \"The current score of the nth player. Currently it is 0 for all players.\", \"players[2].public.current_player\": \"A field unique to player 2, indicating that they are the current player.\", \"players[n].facedown_cards\": \"The cards that the nth player can see but other players cannot.\", \"players[n].facedown_cards.hand\": \"The list of cards in the hand of player 2, which are visible only to them.\", \"players[n].facedown_cards.hand_size\": \"The number of cards currently in the hand of the nth player, if the hand itself is not visible; it is shown for players 0, 1, and 3.\", \"legal_actions\": \"A list of possible legal actions that the current player (player 2) can take on their turn.\", \"legal_actions[n].action\": \"The type of action that can be performed, such as 'draw' or 'play'.\", \"legal_actions[n].id\": \"The identifier for the legal action, useful for selecting an action.\"}",
    "policy_list": [
        "**Playable Cards Count**\nThe number of cards in the AI player's hand that can be legally played on the current starter pile card. This metric helps to evaluate the current flexibility the player has in terms of their ability to shed cards.",
        "**Wild Card Usage**\nThe strategic use of eights as wild cards. This metric would consider the situation in which an eight is played and what suit is chosen, aiming to maximize future playability and disrupt opponents' potential moves.",
        "**Stock Card Draw Potential**\nThe potential impact of drawing cards from the stock pile. This looks at the likelihood of drawing useful cards when the AI player chooses to draw instead of playing a card, potentially improving hand flexibility or preparing for future plays.",
        "**Opponent Card Count Estimation**\nAn estimation of the number of cards remaining in the opponents' hands, inferred from the game history, especially past plays. This metric helps the AI assess the urgency of its actions, affecting decisions on whether to play conservatively or aggressively."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_index]\n\n    # Extract the player's hand\n    hand = current_player[\"facedown_cards\"].get(\"hand\", [])\n    \n    # Get the target card rank and suit\n    target_card = state[\"common\"][\"faceup_cards\"][\"target_card\"]\n    target_rank = target_card[\"rank\"]\n    target_suit = target_card[\"suit\"]\n\n    # Calculate the count of playable cards\n    playable_cards_count = sum(\n        1 for card in hand\n        if card[\"rank\"] == target_rank or card[\"suit\"] == target_suit or card[\"rank\"] == \"8\"\n    )\n\n    # Calculate the score based on the hand size and playable cards count\n    hand_size = len(hand)\n    if hand_size == 0:\n        return 1.0  # If there are no cards left, the player is potentially winning\n\n    # Factor in the number of legal actions, treating drawing and playing equally for now\n    legal_actions = state.get(\"legal_actions\", [])\n    num_legal_actions = len(legal_actions)\n\n    # Calculate a rough heuristic score based on the proportion of playable cards\n    # This could be expanded with more refined logic if necessary\n    playable_proportion = playable_cards_count / max(hand_size, 1)\n    \n    # Normalize the result to be between 0 and 1 considering also the potential actions\n    result_score = (playable_proportion + (1 / max(num_legal_actions, 1))) / 2\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant state information\n    common_info = state[\"common\"]\n    current_player_index = common_info[\"current_player\"]\n    current_suit = common_info[\"current_suit\"]\n    target_card = common_info[\"faceup_cards\"][\"target_card\"]\n    players = state[\"players\"]\n    current_player = players[current_player_index]\n    player_hand = current_player[\"facedown_cards\"][\"hand\"]\n    legal_actions = state[\"legal_actions\"]\n    \n    # Define the reward function components\n    def matchability_score():\n        # Compute matchability with the target card or current suit\n        match_suit_cards = [card for card in player_hand if card['suit'] == target_card['suit']]\n        match_rank_cards = [card for card in player_hand if card['rank'] == target_card['rank']]\n        match_suit_current = [card for card in player_hand if card['suit'] == current_suit]\n        \n        if action['action'] == 'play':\n            card = player_hand[action['id']]\n            if card['rank'] == '8':  # 8s are wild\n                # Strategic use of 8 wild cards\n                return 0.8  # Prefer high score as 8 plays can dictate future state\n            elif card in match_suit_cards or card in match_rank_cards: \n                return 0.6  # Playing matching cards is good\n            elif card in match_suit_current:\n                return 0.4  # At least matching the enforced suit\n        elif action['action'] == 'draw':\n            return 0.3  # Draw is less favorable but necessary\n        \n        return 0.0  # If doing nothing, less favorable\n\n    def cards_remaining_penalty():\n        # Encourage having fewer cards\n        hand_size = len(player_hand)\n        return max(0, 1 - (hand_size / 20))  # Normalize with a hypothetical 20 as max hand size\n\n    def disrupt_opponents_score():\n        # Evaluate potential to disrupt opponents with 8\n        if action['action'] == 'play':\n            card = player_hand[action['id']]\n            if card['rank'] == '8':\n                # Choose the suit which the opponent may least likely want\n                suit_counts = {suit: 0 for suit in ['hearts', 'diamonds', 'clubs', 'spades']}\n                for player in players:\n                    if player == current_player:\n                        continue\n                    for card in player[\"facedown_cards\"].get(\"hand\", []):\n                        suit_counts[card['suit']] += 1\n                rarest_suit = min(suit_counts, key=suit_counts.get)\n                return 0.7 if rarest_suit != current_suit else 0.5\n        return 0.0\n\n    # Aggregate scores\n    match_score = matchability_score()\n    hand_penalty = cards_remaining_penalty()\n    disrupt_score = disrupt_opponents_score()\n\n    # Combine scores into a final reward value\n    result_score = 0.5 * match_score + 0.3 * hand_penalty + 0.2 * disrupt_score\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract necessary information from the state\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_index]\n    \n    hand_size = len(current_player[\"facedown_cards\"][\"hand\"])\n    deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n\n    # Check if the action is 'draw'\n    if action == \"draw\":\n        # Score based primarily on hand size and remaining cards in the deck\n        # A smaller hand and larger deck results in a higher score\n        hand_factor = 1 - (hand_size / 10)  # Assuming having 10 or more cards is very bad\n        deck_factor = deck_size / 52  # Normalize the deck size\n        \n        # Calculate the approximate score with these factors\n        result_score = max(0.0, min(1.0, (hand_factor + deck_factor) / 2))\n    else:\n        # If the action is not 'draw', for the sake of adherence to function structure:\n        result_score = 0.0  # No score contribution if it's not the target 'draw' action\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize variables\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player_hand = state[\"players\"][current_player_index][\"facedown_cards\"][\"hand\"]\n    current_player_hand_size = len(current_player_hand)\n    deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    num_players = state[\"common\"][\"num_players\"]\n    \n    # Evaluate action urgency based on opponents' hand sizes\n    opponent_urgency_factor = 0\n    for i, player in enumerate(state[\"players\"]):\n        if i != current_player_index and \"hand_size\" in player[\"facedown_cards\"]:\n            opponent_urgency_factor += 1 / player[\"facedown_cards\"][\"hand_size\"]\n\n    # Normalize urgency to number of players\n    opponent_urgency_factor = opponent_urgency_factor / (num_players - 1)\n\n    # Estimate action value\n    if action[\"action\"] == \"play\":\n        # If an Eight is about to be played, it has a strong play potential\n        if any(card['rank'] == \"8\" for card in current_player_hand):\n            action_potential = 0.9  # High value for playing a wild card\n        else:\n            action_potential = 0.7 if current_player_hand_size <= 2 else 0.5\n    elif action[\"action\"] == \"draw\":\n        # Drawing is less ideal generally; factor in card count\n        action_potential = 0.3 if deck_size > 0 else 0.1\n    else:\n        action_potential = 0.4  # Default for any missing scenarios\n\n    # Combined score based on urgency and potential action value\n    result_score = (0.5 * opponent_urgency_factor) + (0.5 * action_potential)\n    \n    return result_score\n\n"
    ]
}