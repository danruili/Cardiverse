{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFive cards are dealt to each player plus another hand of five cards face down on the table.\n\n### The Play\n\nCards are turned up one at a time, and there is a round of betting each time a card is exposed. Each player selects a hand of five cards from among the cards in their own hand and the five on the table.\n\n### Poker Hands\n\nFive of a Kind\u00a0-\u00a0The highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 3, \"pot\": 3000, \"current_round\": 3, \"current_bet\": 0, \"bets_in_round\": {}, \"community_cards\": {\"facedown\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}], \"faceup\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}]}, \"folded_players\": [2], \"is_over\": false, \"winner\": null, \"players_to_act\": [0, 1, 3], \"last_raiser\": null, \"deck\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"9\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"hearts\"}]}, \"players\": [{\"public\": {\"bets_made\": 0, \"chips\": 0}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 0}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 1000}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"call\", \"id\": 0}, \"msg\": \"Player 3 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Player 3 action: {'action': 'call', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 calls 1000.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: K of diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"check\", \"id\": 0}, \"msg\": \"Player 0 decides to: check\"}, {\"type\": \"info\", \"msg\": \"Player 0 action: {'action': 'check', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 checks.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: 2 of clubs.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"check\", \"id\": 0}, \"msg\": \"Player 1 decides to: check\"}, {\"type\": \"info\", \"msg\": \"Player 1 action: {'action': 'check', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 checks.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: A of diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"check\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing information shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"Index of the player whose turn it is to act.\", \"common.pot\": \"Amount of chips currently in the game pot.\", \"common.current_round\": \"The current round of the game, which indicates how many community cards have been revealed so far.\", \"common.current_bet\": \"The current highest bet amount in the ongoing round.\", \"common.bets_in_round\": \"An object tracking the amount each player has bet in the current round.\", \"common.community_cards\": \"An object containing community cards information.\", \"common.community_cards.facedown\": \"A list of community cards that are facedown on the table.\", \"common.community_cards.faceup\": \"A list of community cards that are faceup on the table.\", \"common.folded_players\": \"An array containing indices of players who have folded.\", \"common.is_over\": \"A boolean indicating whether the game is over.\", \"common.winner\": \"The index of the winning player if the game is over; otherwise, null.\", \"common.players_to_act\": \"A list of indices of players who still have actions left to make in the current round.\", \"common.last_raiser\": \"Index of the last player who raised in the current betting round; otherwise, null.\", \"common.deck\": \"A list of LLMCard objects representing the remaining cards in the deck.\", \"players\": \"An array containing objects of each player's state.\", \"players[i].public.bets_made\": \"The amount of chips a player has bet in the game so far.\", \"players[i].public.chips\": \"The number of chips a player currently has.\", \"players[i].public.current_player\": \"An optional boolean field indicating if it's currently this player's turn.\", \"players[i].private.hand\": \"A list of LLMCard objects representing the player's private hand.\", \"recent_history\": \"A list of recent actions and events in the game.\", \"recent_history[i].type\": \"The type of record, e.g., 'action', 'info', 'turn_end'.\", \"recent_history[i].player_id\": \"The ID of the player related to the action or information.\", \"recent_history[i].action\": \"Details of the action taken, including action type and any additional parameters.\", \"recent_history[i].msg\": \"A message describing the associated action or event.\", \"legal_actions\": \"A list of possible actions available to the current player.\", \"legal_actions[i].action\": \"The type of action available, e.g., 'check', 'call', 'raise', 'fold'.\"}",
    "policy_list": [
        "**Hand Strength**\nEvaluates the current best hand the AI player can form using its own cards and the face-up cards on the table. This metric reflects the potential hand ranking according to poker rules, from 'No Pair' to 'Five of a Kind', and adjusts dynamically as new cards are revealed.\n**Potential Improvement**\nAssesses the likelihood of improving the current hand with the remaining face-down cards. This metric calculates the probability of drawing specific cards that would enhance the AI's hand, such as completing a straight or flush, and informs decisions on whether to continue betting.\n**Pot Odds**\nRepresents the ratio of the current size of the pot to the amount required to call a bet. This metric helps the AI determine whether the expected value of staying in the game is worth the current cost, assisting in betting and folding decisions.\n**Bluffing Potential**\nMeasures the AI's ability to successfully bluff given the current game context. This includes evaluating opponents' betting patterns, potential weaknesses in visible cards, and the AI's own betting history to maximize the strategic advantage of bluffing.\n**Aggressive Betting**\nThis strategy involves making high bets to put pressure on opponents, especially when possessing a strong poker hand or to bluff when the AI wants opponents to believe it has a strong hand.\n**Optimal Hand Selection**\nThis strategy focuses on selecting the optimal combination of five cards from the AI's own hand and the face-up cards to form the strongest possible poker hand.\n**Bluff with Strategic Card Turn**\nThe AI can strategically choose which card to turn from the set of face-down cards, revealing information in a way that might deceive opponents about the strength of its hand.\n**Adaptive Betting Patterns**\nThis strategy involves adjusting the betting bets based on the AI's hand strength relative to previous betting rounds and opponent behavior, allowing for a dynamic approach to each hand."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def evaluate_hand(player_hand, community_cards):\n        # Simplified approximation of hand ranking\n        # For further refinement, you would implement full Poker hand evaluation logic\n        hand_rank = 0\n        hand_counts = {\"pair\": 1, \"two_pairs\": 2, \"three_of_a_kind\": 3,\n                       \"straight\": 4, \"flush\": 5, \"full_house\": 6, \"four_of_a_kind\": 7,\n                       \"straight_flush\": 8, \"five_of_a_kind\": 9}\n        faceup_cards = community_cards[\"faceup\"]\n        all_cards = player_hand + faceup_cards\n\n        # This should rank cards according to Poker rules.\n        # Here we'll simulate that the hand can have equal value to its highest card\n        sorted_ranks = sorted(card[\"rank\"] for card in all_cards)\n        highest_card_value = sorted_ranks[-1]  # Simplified assumption based on the highest card\n        hand_rank_score = hand_counts.get(highest_card_value, 0)\n        return hand_rank_score\n\n    def pot_odds(common_state, bet_amount):\n        pot = common_state[\"pot\"]\n        return pot / (pot + bet_amount)\n\n    def bluffing_potential(common_state):\n        # An example bluff metric: few community cards and many players folded, etc.\n        faceup_cards = common_state[\"community_cards\"][\"faceup\"]\n        folded_players = common_state[\"folded_players\"]\n        num_players = common_state[\"num_players\"]\n        bluff_score = max(0, 1 - (len(faceup_cards) / 5 + len(folded_players) / num_players))\n        return bluff_score\n\n    # Obtaining necessary information from the state\n    common = state[\"common\"]\n    current_player_id = common[\"current_player\"]\n    player_hand = state[\"players\"][current_player_id][\"private\"][\"hand\"]\n    community_cards = common[\"community_cards\"]\n    \n    # Evaluate the hand strength\n    hand_strength = evaluate_hand(player_hand, community_cards)\n    \n    # Consider potential improvement (simplified by the number of facedown cards)\n    facedown_cards = community_cards.get(\"facedown\", [])\n    potential_improvement = min(1, len(facedown_cards) / 5)  # Simplified assumption\n    \n    # Calculate pot odds\n    legal_actions = state[\"legal_actions\"]\n    if action == \"call\":\n        relevant_action = [act for act in legal_actions if act[\"action\"] == \"call\"]\n    elif action == \"raise\":\n        relevant_action = [act for act in legal_actions if act[\"action\"] == \"raise\"]\n    else:\n        relevant_action = [act for act in legal_actions if act[\"action\"] == action]\n    \n    if relevant_action:\n        current_bet = relevant_action[0].get(\"amount\", 0)\n    else:\n        current_bet = common[\"current_bet\"]\n\n    pot_odds_score = pot_odds(common, current_bet)\n    \n    # Consider bluffing potential\n    bluff_score = bluffing_potential(common)\n    \n    # Calculate the final score as a weighted sum of the different aspects\n    result_score = (hand_strength * 0.4) + (potential_improvement * 0.2) + \\\n                   (pot_odds_score * 0.2) + (bluff_score * 0.2)\n    \n    # Ensure the score is within [0, 1]\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n"
    ]
}