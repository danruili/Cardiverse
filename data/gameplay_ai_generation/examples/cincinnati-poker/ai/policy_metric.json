{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal of each player is to win the pot, which contains all the bets that the players have made in any one deal. A player makes a bet in hopes that they have the best hand, or to give the impression that they do. In most Poker versions, the top combination of five cards is the best hand.\n\n### The Deal\n\nFive cards are dealt to each player plus another hand of five cards face down on the table.\n\n### The Play\n\nCards are turned up one at a time, and there is a round of betting each time a card is exposed. Each player selects a hand of five cards from among the cards in their own hand and the five on the table.\n\n### Poker Hands\n\nFive of a Kind\u00a0-\u00a0The highest possible hand and can occur only where at least one card is wild, such as a joker. Examples of five of a kind would be four 10s and a wild card or two queens and three wild cards.\n\nStraight Flush - This is the highest possible hand when only the standard pack is used, and there are no wild cards. A straight flush consists of five cards of the same suit in sequence, such as 10, 9, 8, 7, 6 of hearts.\n\nFour of a Kind - This is the next highest hand. An example is four aces or four 3s.\n\nFull House - This colorful hand is made up of three cards of one rank and two cards of another rank, such as three 8s and two 4s.\n\nFlush - Five cards all of the same suit, but not all in sequence, is a flush. An example is Q, 10, 7, 6, and 2 of clubs.\n\nStraight - Five cards in sequence, but not all of the same suit is a straight. An example is 9\u2665, 8\u2663, 7\u2660, 6\u2666, 5\u2665.\n\nThree of a Kind - This combination contains three cards of the same rank, and the other two cards each of a different rank, such as three jacks, a seven, and a four.\n\nTwo Pairs - This hand contains a pair of one rank and another pair of a different rank, plus any fifth card of a different rank, such as Q, Q, 7, 7, 4.\n\nOne Pair - This frequent combination contains just one pair with the other three cards being of different rank. An example is 10, 10, K, 4, 3.\n\nNo Pair - This very common hand contains \"nothing.\" None of the five cards pair up, nor are all five cards of the same suit or consecutive in rank. When more than one player has no pair, the hands are rated by the highest card each hand contains, so that an ace-high hand beats a king-high hand, and so on.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 3, \"pot\": 3000, \"current_round\": 3, \"current_bet\": 0, \"bets_in_round\": {}, \"community_cards\": {\"facedown\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}], \"faceup\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}]}, \"folded_players\": [2], \"is_over\": false, \"winner\": null, \"players_to_act\": [0, 1, 3], \"last_raiser\": null, \"deck\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"9\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"2\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"9\", \"suit\": \"clubs\"}, {\"rank\": \"Q\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}, {\"rank\": \"J\", \"suit\": \"clubs\"}, {\"rank\": \"3\", \"suit\": \"hearts\"}]}, \"players\": [{\"public\": {\"bets_made\": 0, \"chips\": 0}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 0}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 1000}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bets_made\": 0, \"chips\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"call\", \"id\": 0}, \"msg\": \"Player 3 decides to: call\"}, {\"type\": \"info\", \"msg\": \"Player 3 action: {'action': 'call', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 calls 1000.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: K of diamonds.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"check\", \"id\": 0}, \"msg\": \"Player 0 decides to: check\"}, {\"type\": \"info\", \"msg\": \"Player 0 action: {'action': 'check', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 checks.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: 2 of clubs.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"check\", \"id\": 0}, \"msg\": \"Player 1 decides to: check\"}, {\"type\": \"info\", \"msg\": \"Player 1 action: {'action': 'check', 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 checks.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"All players are checking or out of chips. Forcing round progression.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Revealed community card: A of diamonds.\", \"role\": null}], \"legal_actions\": [{\"action\": \"check\", \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing information shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"Index of the player whose turn it is to act.\", \"common.pot\": \"Amount of chips currently in the game pot.\", \"common.current_round\": \"The current round of the game, which indicates how many community cards have been revealed so far.\", \"common.current_bet\": \"The current highest bet amount in the ongoing round.\", \"common.bets_in_round\": \"An object tracking the amount each player has bet in the current round.\", \"common.community_cards\": \"An object containing community cards information.\", \"common.community_cards.facedown\": \"A list of community cards that are facedown on the table.\", \"common.community_cards.faceup\": \"A list of community cards that are faceup on the table.\", \"common.folded_players\": \"An array containing indices of players who have folded.\", \"common.is_over\": \"A boolean indicating whether the game is over.\", \"common.winner\": \"The index of the winning player if the game is over; otherwise, null.\", \"common.players_to_act\": \"A list of indices of players who still have actions left to make in the current round.\", \"common.last_raiser\": \"Index of the last player who raised in the current betting round; otherwise, null.\", \"common.deck\": \"A list of LLMCard objects representing the remaining cards in the deck.\", \"players\": \"An array containing objects of each player's state.\", \"players[i].public.bets_made\": \"The amount of chips a player has bet in the game so far.\", \"players[i].public.chips\": \"The number of chips a player currently has.\", \"players[i].public.current_player\": \"An optional boolean field indicating if it's currently this player's turn.\", \"players[i].private.hand\": \"A list of LLMCard objects representing the player's private hand.\", \"recent_history\": \"A list of recent actions and events in the game.\", \"recent_history[i].type\": \"The type of record, e.g., 'action', 'info', 'turn_end'.\", \"recent_history[i].player_id\": \"The ID of the player related to the action or information.\", \"recent_history[i].action\": \"Details of the action taken, including action type and any additional parameters.\", \"recent_history[i].msg\": \"A message describing the associated action or event.\", \"legal_actions\": \"A list of possible actions available to the current player.\", \"legal_actions[i].action\": \"The type of action available, e.g., 'check', 'call', 'raise', 'fold'.\"}",
    "policy_list": [
        "**Hand Strength**\nEvaluates the current best hand the AI player can form using its own cards and the face-up cards on the table. This metric reflects the potential hand ranking according to poker rules, from 'No Pair' to 'Five of a Kind', and adjusts dynamically as new cards are revealed.",
        "**Potential Improvement**\nAssesses the likelihood of improving the current hand with the remaining face-down cards. This metric calculates the probability of drawing specific cards that would enhance the AI's hand, such as completing a straight or flush, and informs decisions on whether to continue betting.",
        "**Pot Odds**\nRepresents the ratio of the current size of the pot to the amount required to call a bet. This metric helps the AI determine whether the expected value of staying in the game is worth the current cost, assisting in betting and folding decisions.",
        "**Bluffing Potential**\nMeasures the AI's ability to successfully bluff given the current game context. This includes evaluating opponents' betting patterns, potential weaknesses in visible cards, and the AI's own betting history to maximize the strategic advantage of bluffing."
    ],
    "code": [
        "\nimport itertools\n\ndef score(state: dict, action: str) -> float:\n    def evaluate_hand_strength(player_hand, community_faceup):\n        # Combine player's hand with face-up community cards\n        combined_hand = player_hand + community_faceup\n        \n        # Poker hand ranking helper function\n        def hand_rank(cards):\n            ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n            rank_dict = {r: i for i, r in enumerate(ranks)}\n            # Convert card ranks to numbers for easier processing\n            num_cards = sorted([rank_dict[card['rank']] for card in cards], reverse=True)\n            suits = [card['suit'] for card in cards]\n            is_flush = len(set(suits)) == 1\n            is_straight = len(set(num_cards)) == 5 and (max(num_cards) - min(num_cards) == 4)\n            counts = {num: num_cards.count(num) for num in num_cards}.values()\n\n            if is_flush and is_straight:\n                return 8  # Straight Flush\n            elif 4 in counts:\n                return 7  # Four of a Kind\n            elif sorted(counts) == [2, 3]:\n                return 6  # Full House\n            elif is_flush:\n                return 5  # Flush\n            elif is_straight:\n                return 4  # Straight\n            elif 3 in counts:\n                return 3  # Three of a Kind\n            elif list(counts).count(2) == 2:\n                return 2  # Two Pairs\n            elif 2 in counts:\n                return 1  # One Pair\n            else:\n                return 0  # No Pair\n        \n        # Check combinations of hand\n        max_rank = 0\n        for combination in itertools.combinations(combined_hand, 5):\n            max_rank = max(max_rank, hand_rank(combination))\n        \n        # Scale hand rank to a score between 0 and 1\n        return max_rank / 8.0\n\n    def evaluate_action_impact(current_action, hand_strength):\n        action_impact = {\n            \"fold\": -0.1,\n            \"check\": 0.0,\n            \"call\": hand_strength * 0.1,\n            \"raise\": hand_strength * 0.2\n        }\n        return action_impact.get(current_action, 0.0)\n\n    def is_high_card_value_present(cards):\n        high_cards = {'A', 'K'}\n        return any(card['rank'] in high_cards for card in cards)\n\n    # Get current player information\n    player_index = state['common']['current_player']\n    player_state = state['players'][player_index]\n    player_hand = player_state['private']['hand']\n    \n    # Gather community face-up cards\n    community_faceup = state['common']['community_cards']['faceup']\n    \n    # Evaluate current hand strength\n    hand_strength = evaluate_hand_strength(player_hand, community_faceup)\n    \n    # Consider the action impact based on current hand strength\n    action_impact = evaluate_action_impact(action, hand_strength)\n    \n    # Check for high card bonus opportunity\n    high_card_bonus = 0.05 if is_high_card_value_present(player_hand) else 0.0\n    \n    # Compute final result score\n    result_score = hand_strength + action_impact + high_card_bonus\n    result_score = min(max(result_score, 0.0), 1.0)  # Ensure the score is between 0 and 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    ranks = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}\n\n    # Combine player's private hand and community cards\n    private_hand = state['players'][state['common']['current_player']]['private']['hand']\n    faceup_community_cards = state['common']['community_cards']['faceup']\n    all_cards = private_hand + faceup_community_cards\n    \n    # Evaluate current hand strength\n    rank_count = {}\n    for card in all_cards:\n        rank_count[card['rank']] = rank_count.get(card['rank'], 0) + 1\n\n    # Simplistic evaluation of hand strength\n    if 5 in rank_count.values():\n        hand_strength = 1.0  # Five of a kind\n    elif 4 in rank_count.values():\n        hand_strength = 0.9  # Four of a kind\n    elif sorted(rank_count.values()) == [2, 3]:\n        hand_strength = 0.8  # Full House\n    elif 3 in rank_count.values():\n        hand_strength = 0.7  # Three of a kind\n    elif list(rank_count.values()).count(2) == 2:\n        hand_strength = 0.6  # Two Pairs\n    elif 2 in rank_count.values():\n        hand_strength = 0.5  # One Pair\n    else:\n        hand_strength = 0.3  # High Card (No Pair)\n\n    # Calculate potential improvement\n    facedown_cards = state['common']['community_cards']['facedown']\n    potential_improvement = len(facedown_cards) / float(len(state['common']['deck']) + len(facedown_cards))\n    \n    # Final score\n    result_score = hand_strength * (1 + potential_improvement) / 2\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import random\n\n    # Destructure necessary parts of the state and action\n    common = state.get(\"common\", {})\n    players = state.get(\"players\", [])\n    current_player_index = common.get(\"current_player\")\n    community_cards = common.get(\"community_cards\", {}).get(\"faceup\", [])\n    action_type = action.get(\"action\")\n\n    # Get current player's hand\n    current_player_hand = players[current_player_index].get(\"private\", {}).get(\"hand\", [])\n\n    # Combine player's hand with community cards to form potential hands\n    possible_hand = current_player_hand + community_cards\n    \n    # Placeholder function to evaluate hand strength - this is a simplification.\n    def evaluate_hand_strength(cards):\n        # Simply random for now to show range\n        return random.uniform(0, 1)\n\n    # Evaluate hand strength as a simplified heuristic\n    hand_strength = evaluate_hand_strength(possible_hand)\n\n    # Consider pot odds as a factor (this is highly simplified)\n    pot = common.get(\"pot\", 1)\n    current_bet = common.get(\"current_bet\", 0)\n    pot_odds = pot / (current_bet + 1)  # Avoid division by zero\n\n    # Action impact on score\n    action_impact = 0\n    if action_type == \"check\":\n        action_impact = 0.2  # Checking is safe, modest impact\n    elif action_type == \"call\":\n        action_impact = 0.5 * hand_strength  # Calling requires some hand strength\n    elif action_type == \"raise\":\n        action_impact = 0.7 * hand_strength  # Raising requires confidence in hand\n    elif action_type == \"fold\":\n        action_impact = -0.5  # Folding loses opportunity to win\n\n    # Combine factors for a continuous winning probability estimate\n    result_score = (hand_strength * 0.7) + (pot_odds * 0.2) + (action_impact * 0.1)\n\n    # Ensure score is within bounds [0, 1]\n    result_score = max(0, min(1, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # This function evaluates the hand strength numerically\n    rank_value = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n                  '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n    \n    # Access current player variables\n    current_player = state['common']['current_player']\n    community_faceup = state['common']['community_cards']['faceup']\n    my_hand = state['players'][current_player]['private']['hand']\n    players_to_act = state['common']['players_to_act']\n\n    # Evaluate hand strength\n    combined_cards = my_hand + community_faceup\n    values = [rank_value[card['rank']] for card in combined_cards]\n    value_counts = {v: values.count(v) for v in set(values)}\n    suits = [card['suit'] for card in combined_cards]\n    flush = any(suits.count(suit) >= 5 for suit in set(suits))\n    sorted_values = sorted(value_counts.items(), key=lambda x: (-x[1], -x[0]))\n    hand_strength_score = 0\n\n    if len(combined_cards) > 4 and max(values) - min(values) == 4 and len(set(values)) == 5:\n        hand_strength_score = 0.9  # Straight\n        if flush:\n            hand_strength_score = 0.95  # Straight Flush\n    elif flush:\n        hand_strength_score = 0.8  # Flush\n\n    if 4 in value_counts.values():\n        hand_strength_score = 0.85  # Four of a Kind\n    elif 3 in value_counts.values() and 2 in value_counts.values():\n        hand_strength_score = 0.75  # Full House\n    elif 3 in value_counts.values():\n        hand_strength_score = 0.65  # Three of a Kind\n    elif list(value_counts.values()).count(2) == 2:\n        hand_strength_score = 0.5  # Two Pairs\n    elif 2 in value_counts.values():\n        hand_strength_score = 0.4  # One Pair\n\n    hand_strength_score += max(values) / 100  # Slightly adjust for high card\n\n    # Evaluate bluff potential\n    bluff_potential_score = 0\n    if len(players_to_act) == 1:\n        bluff_potential_score = 0.3\n    elif action == 'bet' and players_to_act:\n        bluff_potential_score = (0.2 if any(players_to_act) else 0.1)\n    \n    # Combining both metrics\n    result_score = (hand_strength_score + bluff_potential_score) / 1.2\n\n    return min(max(result_score, 0), 1)\n"
    ]
}