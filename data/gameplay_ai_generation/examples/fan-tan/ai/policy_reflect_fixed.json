{
    "game_description": "Rank of Cards\n\nThe cards in each suit rank: K (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A.\n\n### The Ante\n\nEach player puts one chip in the pot before each deal.\n\n### The Deal\n\nDeal the cards one at a time face down, beginning with the player on the left. All the cards are dealt, and some players may receive fewer cards than others. It is customary for each player with fewer cards to ante one additional chip.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all of their cards.\n\n### The Play\n\nBeginning to the left of the dealer, each person must play a card if possible.\n\nAll cards played remain face up on the table, arranged in four rows of the four suits.\n\nThe plays that may be made are:\n\nAny seven or any card in suit and sequence to a card previously played.\n\nAs the sevens are played, they are placed in a row in the center of the table.\n\nThe sixes are placed in another row to the right - the fives and lower cards in sequence are piled on the sixes.\n\nThe eights are placed on the left of the sevens in their respective suits - nines and higher cards in sequence are piled on the eights.\n\nEach player must play a card during their turn if possible; if the person cannot play, they put one chip in the pot and the turn passes to the left. The game ends when one player gets rid of all of their cards. Each opponent then pays the pot one chip for each card remaining in their hand, and the winner takes the pot.\n\n### Irregularities\n\nIf a player passes when they could have played, the offender must pay three chips into the pot. If the player passed when they were able to play a seven, they must pay an additional five chips to the players holding the six and the eight of the same suit.\n\n### How to Keep Score\n\nOne can play a series of rounds, scoring 1 point for each card each player has remaining at the end of each round. When one player reaches 100 points, the game is over and the player who then has the smallest score is the overall winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 5, \"played_cards\": {\"hearts\": [{\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}], \"diamonds\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}], \"clubs\": [], \"spades\": [{\"rank\": \"7\", \"suit\": \"spades\"}]}, \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 2}, \"facedown_cards\": {\"hand_size\": 12}}, {\"public\": {\"num_cards\": 11, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 11}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}]}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 12}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_index: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 plays 7 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 10}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_index: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 3's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays 7 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 0}, \"id\": 0}, \"msg\": \"Player 0 decides to: play-(card_index: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 0's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 plays 8 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 11}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(card_index: 11)\"}, {\"type\": \"info\", \"msg\": \"Player 1's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 now has 11 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing state variables that are shared across all players.\", \"common.num_players\": \"An integer representing the number of players in the game, which is 4 in this example.\", \"common.current_player\": \"An integer indexing the player who is supposed to take the next action, which is player 2 in this example.\", \"common.pot\": \"An integer representing the total number of chips in the pot, which is 5 in this example.\", \"common.played_cards\": \"An object where keys are suit names ('hearts', 'diamonds', 'clubs', 'spades') and values are lists of card objects representing the cards that have been played and sorted by rank.\", \"common.is_over\": \"A boolean indicating whether the game is over or not.\", \"common.winner\": \"The index of the player who has won the game, or null if the game hasn't ended yet.\", \"common.facedown_cards\": \"An object containing information about the deck; 'deck_size' is used to indicate the number of cards remaining in the deck, which is 0 in this example.\", \"players\": \"A list where each element is a dictionary of a player's state information.\", \"players[i].public\": \"An object containing public information about player i, such as 'num_cards', 'score', and 'chips_contributed'.\", \"players[i].public.num_cards\": \"An integer representing the number of cards player i holds, which is the same as 'hand_size' for undealt hands in this example.\", \"players[i].public.chips_contributed\": \"The total number of chips that player i has contributed to the pot.\", \"players[i].facedown_cards\": \"An object containing private information about player i's current hand, with 'hand_size' indicating the number of cards held.\", \"players[i].facedown_cards.hand\": \"A list of card objects player i has in their hand. This list details the cards for the current player.\", \"recent_history\": \"A list of events that occurred recently in the game. Each event is a dictionary with a 'type' and potentially other descriptive fields.\", \"recent_history[i].type\": \"The type of the event, such as 'action' or 'info'.\", \"recent_history[i].player_id\": \"The ID of the player involved in the event.\", \"recent_history[i].action\": \"An object containing details of the action taken by the player, including the action type and arguments.\", \"recent_history[i].msg\": \"A text message describing the event that took place.\", \"legal_actions\": \"A list of possible actions the current player can legally perform, with each action represented as an object containing an 'action' and 'args'.\"}",
    "policy_list": [
        "**Refined Strategy for Playing Sevens**\nThe strategy should be refined as follows: 'Prioritize playing a Seven card if you hold more than one, as it maximizes control across different suits. Additionally, consider playing a Seven when your Playable Cards Ratio is low, or when opponents have few cards left, to disrupt their potential plays. Evaluate the Opponent Blocking Potential to make decisions that impede opponent progress while maximizing opportunities for your future plays.'",
        "**Refined Strategy for Playing Cards That Create Future Opportunities**\nTo refine this strategy, players should first calculate the Playable Cards Ratio to assess their current opportunities. A high ratio suggests an aggressive strategy, such as playing more Sixes or Eights to increase sequence potential. Low ratio or low Total Sevens Held indicates a need to preserve key cards until they can best leverage openings into sequences. In scenarios with high Opponent Blocking Potential, players should prioritize placing Eights to obstruct opponents' ability to build upwards. Additionally, players should be mindful of the Chips Potential Loss especially if close to risking significant penalties, adapting their strategy to minimize potential loss and looking for opportunities to safely play without accruing undue risk. Critical moments to play cards like Sixes or Eights occur when these moves either significantly enhance the player's sequence completion ability or strategically disrupt opponents, especially when such plays align with a favorable Playable Cards Ratio and low Chips Potential Loss.",
        "**Enhanced Minimum Chip Penalty Strategy**\nIn refining the strategy to minimize chip penalties, players should focus on maximizing their Playable Cards Ratio by playing sevens first, as these open new sequences and allow more potential plays in future turns. Prioritizing this strategy ensures that future cards can be played, reducing total card count effectively. Take stock of your Total Sevens Held, as they are a strategic asset, allowing sequences to start and potentially disrupting opponents' plans. If the Playable Cards Ratio is low, prioritize playing cards in sequence promptly to prevent penalties from accumulating. Monitor your Chips Potential Loss, using it to guide your decision on when to risk holding or playing specific cards. This data-driven approach ensures players are actively reducing their card count while avoiding potential chip penalties efficiently.",
        "**Refined Awareness of Suit Dynamics**\nTo refine the strategy 'Awareness of Suit Dynamics,' the AI player should continuously assess the cards played in each suit and evaluate its own hand against this distribution. Critical strategic decisions hinge on the AI's ability to play sevens early to open up lines and reduce hand size, while vigilantly blocking opponents by holding onto cards that restrict their options when your chips' potential loss is minimal. Moreover, the AI should strive to balance between playing aggressively when the Playable Cards Ratio is high, maximizing hand reduction, and holding strategically significant cards like certain sevens when it boosts its Opponent Blocking Potential or mitigates Chips Potential Loss. This strategic awareness allows the AI to make informed decisions that optimize both immediate and long-term objectives under the rules of the game."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common game state details\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    pot = state[\"common\"][\"pot\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    is_over = state[\"common\"][\"is_over\"]\n    winner = state[\"common\"][\"winner\"]\n\n    # Extract player-specific information\n    player = state[\"players\"][current_player]\n    num_cards_in_hand = player[\"public\"][\"num_cards\"]\n    hand = player[\"facedown_cards\"][\"hand\"]\n\n    # Current action details\n    action_type = action[\"action\"]\n\n    # Check if the action is 'pass'\n    if action_type == \"pass\":\n        playable_card = None  # There is no playable card for a 'pass' action\n    else:\n        playable_card_index = action[\"args\"][\"card_index\"]\n        playable_card = hand[playable_card_index]\n\n    # Calculate control factors\n    sevens_count = sum(1 for card in hand if card[\"rank\"] == \"7\")\n    playable_sevens_count = sum(1 for suit in played_cards.values() if not any(card[\"rank\"] == \"7\" for card in suit))\n    \n    # Playable Cards Ratio\n    total_playable = sum(len(suit) for suit in played_cards.values())\n    playable_ratio = len(hand) / max(total_playable, 1)\n\n    # Evaluate potential to block opponents\n    opponent_cards_remaining = [player[\"public\"][\"num_cards\"] for idx, player in enumerate(state[\"players\"]) if idx != current_player]\n    min_opponent_cards = min(opponent_cards_remaining)\n\n    # Calculate reward based on the current strategy considerations\n    reward = 0.0\n\n    if playable_card is not None:\n        # Reward for playing Seven cards\n        if playable_card[\"rank\"] == \"7\":\n            if sevens_count > 1:\n                reward += 0.2  # Play more Sevens to maximize control\n            if playable_ratio < 0.3:\n                reward += 0.2  # Favor Seven if Playable Ratio is low\n            if min_opponent_cards < 4:\n                reward += 0.2  # Prioritize Seven to disrupt opponents with few cards\n        \n        # Penalize for other actions when Sevens are playable\n        if playable_card[\"rank\"] != \"7\" and playable_sevens_count > 0:\n            reward -= 0.3\n        \n        # Additional boost for plays that exhaust player cards faster\n        if len(hand) - 1 == 0:\n            reward += 0.3\n    \n    # Normalize reward to [0,1]\n    reward = min(max(reward, 0.0), 1.0)\n\n    result_score = reward\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Check if the action is to pass\n    if action[\"action\"] == \"pass\":\n        return 0.0  # Return a score of 0 for passing since it's usually not beneficial\n    \n    # Unpack necessary game state components\n    current_player = state[\"common\"][\"current_player\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    num_players = state[\"common\"][\"num_players\"]\n    pot = state[\"common\"][\"pot\"]\n    player_info = state[\"players\"][current_player]\n    hand = player_info[\"facedown_cards\"][\"hand\"]\n    num_cards = len(hand)\n    \n    # Determine the action card from the player's hand\n    action_card_index = action[\"args\"][\"card_index\"]\n    action_card = hand[action_card_index]\n    \n    # Calculate metrics\n    total_sevens_played = sum(1 for suit in played_cards.values() if any(card[\"rank\"] == \"7\" for card in suit))\n    total_plays_possible = sum(len(cards) for cards in played_cards.values())\n    playable_cards_ratio = total_plays_possible / (num_players * 13)\n    \n    # Evaluate potential current action card rank and suit\n    is_blocking_card = action_card[\"rank\"] == \"8\"\n    is_critical_card = action_card[\"rank\"] in [\"6\", \"8\"]\n    is_risky_move = player_info[\"public\"][\"chips_contributed\"] > (pot / num_players) + 2\n    \n    # Weighted scoring based on metrics\n    result_score = 0.5  # Base probability\n    if action_card[\"rank\"] == \"7\":\n        result_score += 0.2\n    if is_critical_card:\n        result_score += 0.1\n    if is_blocking_card:\n        result_score += 0.15\n    if playable_cards_ratio > 0.5:\n        result_score += 0.1\n    if is_risky_move:\n        result_score -= 0.15\n    \n    # Ensure score is within [0, 1]\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Check if the action is a 'pass'\n    if action[\"action\"] == \"pass\":\n        # Assign a default low score or any appropriate value since passing doesn't contribute to winning\n        return 0.0\n\n    # Extract common game state details\n    common = state[\"common\"]\n    played_cards = common[\"played_cards\"]\n    pot = common[\"pot\"]\n    num_players = common[\"num_players\"]\n    current_player_index = common[\"current_player\"]\n\n    # Extract current player's details\n    current_player = state[\"players\"][current_player_index]\n    num_cards = current_player[\"public\"][\"num_cards\"]\n    hand_cards = current_player[\"facedown_cards\"][\"hand\"]\n\n    # Evaluate the potential of the current action\n    # Only attempt to access 'args' if it exists in the action\n    if \"args\" in action and \"card_index\" in action[\"args\"]:\n        card_to_play = hand_cards[action[\"args\"][\"card_index\"]]\n        rank_of_card = card_to_play[\"rank\"]\n    else:\n        return 0.0  # In case of an action that is not directly playing a card\n\n    # Initiate reward factors\n    score_playable_cards_ratio = 0.0\n    score_total_sevens_held = 0.0\n    score_chips_potential_loss = 0.0\n\n    # Playable Cards Ratio\n    playable_positions = 0\n    for suit, cards in played_cards.items():\n        for card in cards:\n            if card[\"rank\"] in [\"7\", \"6\", \"8\"]:\n                playable_positions += 1\n    \n    if playable_positions > 0:\n        score_playable_cards_ratio = 1.0 / playable_positions\n\n    # Total Sevens Held (Sevens are strategic)\n    total_sevens_held = [card for card in hand_cards if card[\"rank\"] == \"7\"]\n    score_total_sevens_held = len(total_sevens_held) / 4.0\n\n    # Chips Potential Loss - losing less is better\n    score_chips_potential_loss = 1.0 - (num_cards / (num_players * 13))\n\n    # Final reward calculation combining all factors\n    result_score = (\n        0.5 * score_playable_cards_ratio +\n        0.3 * score_total_sevens_held +\n        0.2 * score_chips_potential_loss\n    )\n\n    # Ensure the result score is within the bound [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extracting common and player-specific details from state\n    common_state = state[\"common\"]\n    players_state = state[\"players\"]\n    current_player = common_state[\"current_player\"]\n    current_player_data = players_state[current_player]\n    \n    # Extract the cards from the current player's hand\n    current_hand = current_player_data[\"facedown_cards\"][\"hand\"]\n    \n    # Determine how many cards have been played in each suit\n    played_cards = common_state[\"played_cards\"]\n    \n    # Calculate the playable cards ratio as the number of playable cards over total cards\n    playable_cards = 0\n    for suit, cards in played_cards.items():\n        if len(cards) > 0:\n            top_card = cards[-1][\"rank\"]\n            bottom_card = cards[0][\"rank\"]\n            top_sequence = [\"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"]\n            bottom_sequence = [\"6\", \"5\", \"4\", \"3\", \"2\", \"A\"]\n            \n            for card in current_hand:\n                if card[\"suit\"] == suit:\n                    if card[\"rank\"] in top_sequence and top_card in top_sequence and top_sequence.index(card[\"rank\"]) == top_sequence.index(top_card) + 1:\n                        playable_cards += 1\n                    elif card[\"rank\"] in bottom_sequence and bottom_card in bottom_sequence and bottom_sequence.index(card[\"rank\"]) == bottom_sequence.index(bottom_card) - 1:\n                        playable_cards += 1\n\n    # Compute the playable cards ratio\n    playable_cards_ratio = playable_cards / len(current_hand) if current_hand else 0\n    \n    # Handling action rewards\n    action_rewards = {\n        \"play\": 0.8 * playable_cards_ratio,\n        \"pass\": 0.2 * (1 - playable_cards_ratio)\n    }\n    \n    if action[\"action\"] in action_rewards:\n        result_score = action_rewards[action[\"action\"]]\n    else:\n        result_score = 0.5  # Default score for unknown actions\n    \n    # Apply penalty if the player has sevens not yet played\n    unplayed_sevens = any(card[\"rank\"] == \"7\" for card in current_hand)\n    if action[\"action\"] == \"pass\" and unplayed_sevens:\n        result_score *= 0.5\n    \n    # Normalize score to be between 0 and 1\n    result_score = max(0.0, min(result_score, 1.0))\n\n    return result_score\n"
    ]
}