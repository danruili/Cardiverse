{
    "game_description": "Rank of Cards\n\nThe cards in each suit rank: K (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A.\n\n### The Ante\n\nEach player puts one chip in the pot before each deal.\n\n### The Deal\n\nDeal the cards one at a time face down, beginning with the player on the left. All the cards are dealt, and some players may receive fewer cards than others. It is customary for each player with fewer cards to ante one additional chip.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all of their cards.\n\n### The Play\n\nBeginning to the left of the dealer, each person must play a card if possible.\n\nAll cards played remain face up on the table, arranged in four rows of the four suits.\n\nThe plays that may be made are:\n\nAny seven or any card in suit and sequence to a card previously played.\n\nAs the sevens are played, they are placed in a row in the center of the table.\n\nThe sixes are placed in another row to the right - the fives and lower cards in sequence are piled on the sixes.\n\nThe eights are placed on the left of the sevens in their respective suits - nines and higher cards in sequence are piled on the eights.\n\nEach player must play a card during their turn if possible; if the person cannot play, they put one chip in the pot and the turn passes to the left. The game ends when one player gets rid of all of their cards. Each opponent then pays the pot one chip for each card remaining in their hand, and the winner takes the pot.\n\n### Irregularities\n\nIf a player passes when they could have played, the offender must pay three chips into the pot. If the player passed when they were able to play a seven, they must pay an additional five chips to the players holding the six and the eight of the same suit.\n\n### How to Keep Score\n\nOne can play a series of rounds, scoring 1 point for each card each player has remaining at the end of each round. When one player reaches 100 points, the game is over and the player who then has the smallest score is the overall winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 5, \"played_cards\": {\"hearts\": [{\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}], \"diamonds\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}], \"clubs\": [], \"spades\": [{\"rank\": \"7\", \"suit\": \"spades\"}]}, \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 2}, \"facedown_cards\": {\"hand_size\": 12}}, {\"public\": {\"num_cards\": 11, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 11}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}]}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 12}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_index: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 plays 7 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 10}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_index: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 3's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays 7 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 0}, \"id\": 0}, \"msg\": \"Player 0 decides to: play-(card_index: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 0's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 plays 8 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 11}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(card_index: 11)\"}, {\"type\": \"info\", \"msg\": \"Player 1's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 now has 11 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing state variables that are shared across all players.\", \"common.num_players\": \"An integer representing the number of players in the game, which is 4 in this example.\", \"common.current_player\": \"An integer indexing the player who is supposed to take the next action, which is player 2 in this example.\", \"common.pot\": \"An integer representing the total number of chips in the pot, which is 5 in this example.\", \"common.played_cards\": \"An object where keys are suit names ('hearts', 'diamonds', 'clubs', 'spades') and values are lists of card objects representing the cards that have been played and sorted by rank.\", \"common.is_over\": \"A boolean indicating whether the game is over or not.\", \"common.winner\": \"The index of the player who has won the game, or null if the game hasn't ended yet.\", \"common.facedown_cards\": \"An object containing information about the deck; 'deck_size' is used to indicate the number of cards remaining in the deck, which is 0 in this example.\", \"players\": \"A list where each element is a dictionary of a player's state information.\", \"players[i].public\": \"An object containing public information about player i, such as 'num_cards', 'score', and 'chips_contributed'.\", \"players[i].public.num_cards\": \"An integer representing the number of cards player i holds, which is the same as 'hand_size' for undealt hands in this example.\", \"players[i].public.chips_contributed\": \"The total number of chips that player i has contributed to the pot.\", \"players[i].facedown_cards\": \"An object containing private information about player i's current hand, with 'hand_size' indicating the number of cards held.\", \"players[i].facedown_cards.hand\": \"A list of card objects player i has in their hand. This list details the cards for the current player.\", \"recent_history\": \"A list of events that occurred recently in the game. Each event is a dictionary with a 'type' and potentially other descriptive fields.\", \"recent_history[i].type\": \"The type of the event, such as 'action' or 'info'.\", \"recent_history[i].player_id\": \"The ID of the player involved in the event.\", \"recent_history[i].action\": \"An object containing details of the action taken by the player, including the action type and arguments.\", \"recent_history[i].msg\": \"A text message describing the event that took place.\", \"legal_actions\": \"A list of possible actions the current player can legally perform, with each action represented as an object containing an 'action' and 'args'.\"}",
    "policy_list": [
        "**Playable Cards Ratio**\nThe ratio of cards in hand that can currently be played according to the game rules. A higher ratio indicates a better position to play more cards and get closer to winning the round.",
        "**Total Sevens Held**\nThe number of sevens currently held by the player. Holding sevens is advantageous as they allow starting new sequences, thus reducing the player's hand size directly and providing strategic options.",
        "**Opponent Blocking Potential**\nA measure of the player's ability to block opponents from playing, based on the current lay of cards. This could be determined by the player's control over sequences and strategic card plays that limit opponents' options.",
        "**Chips Potential Loss**\nThe estimated number of chips a player might lose based on their current hand and inability to play cards. This considers not only the current inability to play but also potential future penalties, influencing risk management and decision-making."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract current player information and game state\n    player_id = state[\"common\"][\"current_player\"]\n    hand = state[\"players\"][player_id][\"facedown_cards\"][\"hand\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    \n    # Initialize playable card count\n    playable_count = 0\n    \n    # Check, for each card, if it can be played\n    for card in hand:\n        rank = card[\"rank\"]\n        suit = card[\"suit\"]\n        \n        # Play any seven\n        if rank == \"7\":\n            playable_count += 1\n            continue\n        \n        # Play cards in sequence if adjacent card is already down\n        try:\n            rank_order = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"]\n            rank_index = rank_order.index(rank)\n            \n            # Check adjacent cards\n            if rank_index > 0 and any(c[\"rank\"] == rank_order[rank_index-1] for c in played_cards[suit]):\n                playable_count += 1\n            elif rank_index < len(rank_order) - 1 and any(c[\"rank\"] == rank_order[rank_index+1] for c in played_cards[suit]):\n                playable_count += 1\n        \n        except ValueError:\n            # Rank not found in rank order, should not happen\n            continue\n    \n    # Calculate the playable ratio\n    playable_ratio = playable_count / len(hand) if len(hand) > 0 else 0\n    \n    # Ensure the score is between 0 and 1\n    result_score = min(max(playable_ratio, 0), 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_id = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_id]\n    hand = current_player[\"facedown_cards\"][\"hand\"]\n\n    # Base reward calculations\n    reward = 0.0\n\n    # Check if action is legal\n    legal_actions = state[\"legal_actions\"]\n    if action not in legal_actions:\n        return 0.0  # If the action is illegal, return 0.\n\n    # Number of sevens held\n    sevens_held = sum(1 for card in hand if card[\"rank\"] == \"7\")\n    if sevens_held > 0:\n        reward += 0.2 * sevens_held\n\n    # Fewer cards mean a better winning chance\n    num_cards = current_player[\"public\"][\"num_cards\"]\n    max_cards = max(player[\"public\"][\"num_cards\"] for player in state[\"players\"])\n    reward += (max_cards - num_cards) / max_cards * 0.3\n\n    # Minimize chips contributed (less chips = more plays)\n    min_chips_contributed = min(player[\"public\"][\"chips_contributed\"] for player in state[\"players\"])\n    chips_contributed = current_player[\"public\"][\"chips_contributed\"]\n    reward += (min_chips_contributed / max(chips_contributed, 1)) * 0.1\n\n    # Evaluate immediate action impact\n    played_card = hand[action[\"args\"][\"card_index\"]]\n    if played_card[\"rank\"] == \"7\":\n        reward += 0.1  # Additional advantage for playing a seven.\n\n    # Normalize the score to the 0-1 range, just as a precaution\n    result_score = min(max(reward, 0.0), 1.0)\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Retrieve necessary game state information\n    current_player = state[\"common\"][\"current_player\"]\n    num_players = state[\"common\"][\"num_players\"]\n    pot = state[\"common\"][\"pot\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    player_hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n    num_cards_current_player = state[\"players\"][current_player][\"public\"][\"num_cards\"]\n\n    # Calculate number of playable cards\n    playable_cards = set()\n    for suit, cards in played_cards.items():\n        for card in cards:\n            if card[\"rank\"] == \"7\":\n                # Sevens can be played freely\n                playable_cards.add((\"6\", suit))\n                playable_cards.add((\"8\", suit))\n            else:\n                if card[\"rank\"].isdigit():\n                    rank_number = int(card[\"rank\"])\n                else:\n                    rank_number = {'J': 11, 'Q': 12, 'K': 13}[card[\"rank\"]]\n\n                if rank_number < 7:\n                    playable_cards.add((str(rank_number - 1), suit))\n                else:\n                    playable_cards.add((str(rank_number + 1), suit))\n\n    # Check if action is to play a card and if it's a playable one\n    if action[\"action\"] == \"play\":\n        card_index = action[\"args\"][\"card_index\"]\n        card_to_play = player_hand[card_index]\n        if (card_to_play[\"rank\"], card_to_play[\"suit\"]) in playable_cards:\n            # Block potential: Check how this action potentially blocks opponents\n            opponents_remaining_cards = sum(\n                state[\"players\"][i][\"public\"][\"num_cards\"]\n                for i in range(num_players) if i != current_player\n            )\n            result_score = (1 - (num_cards_current_player / sum(\n                player[\"public\"][\"num_cards\"] for player in state[\"players\"]\n            ))) * (opponents_remaining_cards / (opponents_remaining_cards + num_cards_current_player))\n        else:\n            result_score = 0.1  # Very low chance if trying illegal play\n\n    else:\n        # If not playing, default chance is low, but some increase for each card able to be played\n        result_score = 0.1\n        for card in player_hand:\n            if (card[\"rank\"], card[\"suit\"]) in playable_cards:\n                result_score += (0.8 / num_cards_current_player)  # Slight bump for each playable card\n\n    # Normalize to ensure score is between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize base score parameters\n    max_chips_possible = sum(player[\"public\"][\"num_cards\"] for player in state[\"players\"])\n    current_player_idx = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_idx]\n    pot = state[\"common\"][\"pot\"]\n    num_cards_in_hand = current_player[\"public\"][\"num_cards\"]\n    num_players = state[\"common\"][\"num_players\"]\n\n    # Calculate number of playable cards in hand\n    def is_playable(card, played_cards):\n        suit = card[\"suit\"]\n        rank = card[\"rank\"]\n        if rank == \"7\":\n            return True\n        played_suit_cards = [c[\"rank\"] for c in played_cards.get(suit, [])]\n\n        next_rank = {\"6\": \"7\", \"5\": \"6\", \"8\": \"9\", \"9\": \"8\", \"10\": \"9\", \"J\": \"10\", \n                     \"Q\": \"J\", \"K\": \"Q\", \"A\": \"K\"}\n        \n        if rank in next_rank.keys():\n            if next_rank[rank] in played_suit_cards:\n                return True\n\n            # A playable card sequence in the opposite direction as the game permits playing sequence in both directions\n            if rank in [\"6\", \"5\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]:\n                if played_suit_cards:\n                    high_smarter = max(played_suit_cards)\n                    low_smarter = min(played_suit_cards)\n                    \n                    if high_smarter in next_rank.values() and rank in next_rank.keys():\n                        if rank in next_rank.keys() and (next_rank[rank] == high_smarter or rank == high_smarter):\n                            return True\n            return False\n\n        return False\n\n    # Calculate potential chips loss\n    playable_cards = 0\n    for card in current_player[\"facedown_cards\"][\"hand\"]:\n        if is_playable(card, state[\"common\"][\"played_cards\"]):\n            playable_cards += 1\n\n    chips_potential_loss = num_cards_in_hand - playable_cards\n\n    # Compute a raw score\n    if chips_potential_loss == 0:\n        raw_score = 1.0  # Greatest chance of playing or winning\n    else:\n        # Potential score is reduced by potential chips loss vs pot size and compared against max possible\n        raw_score = max(0, (1 - (chips_potential_loss / max(num_cards_in_hand, 1))))\n\n    # Factor in pot and how much the player has contributed\n    contribution_factor = 1 - (current_player[\"public\"][\"chips_contributed\"] / max(pot, 1))\n    reward_score = raw_score * contribution_factor\n\n    result_score = reward_score\n    return result_score\n"
    ]
}