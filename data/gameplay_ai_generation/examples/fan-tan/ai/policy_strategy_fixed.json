{
    "game_description": "Rank of Cards\n\nThe cards in each suit rank: K (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A.\n\n### The Ante\n\nEach player puts one chip in the pot before each deal.\n\n### The Deal\n\nDeal the cards one at a time face down, beginning with the player on the left. All the cards are dealt, and some players may receive fewer cards than others. It is customary for each player with fewer cards to ante one additional chip.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all of their cards.\n\n### The Play\n\nBeginning to the left of the dealer, each person must play a card if possible.\n\nAll cards played remain face up on the table, arranged in four rows of the four suits.\n\nThe plays that may be made are:\n\nAny seven or any card in suit and sequence to a card previously played.\n\nAs the sevens are played, they are placed in a row in the center of the table.\n\nThe sixes are placed in another row to the right - the fives and lower cards in sequence are piled on the sixes.\n\nThe eights are placed on the left of the sevens in their respective suits - nines and higher cards in sequence are piled on the eights.\n\nEach player must play a card during their turn if possible; if the person cannot play, they put one chip in the pot and the turn passes to the left. The game ends when one player gets rid of all of their cards. Each opponent then pays the pot one chip for each card remaining in their hand, and the winner takes the pot.\n\n### Irregularities\n\nIf a player passes when they could have played, the offender must pay three chips into the pot. If the player passed when they were able to play a seven, they must pay an additional five chips to the players holding the six and the eight of the same suit.\n\n### How to Keep Score\n\nOne can play a series of rounds, scoring 1 point for each card each player has remaining at the end of each round. When one player reaches 100 points, the game is over and the player who then has the smallest score is the overall winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 5, \"played_cards\": {\"hearts\": [{\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}], \"diamonds\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}], \"clubs\": [], \"spades\": [{\"rank\": \"7\", \"suit\": \"spades\"}]}, \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 2}, \"facedown_cards\": {\"hand_size\": 12}}, {\"public\": {\"num_cards\": 11, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 11}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}]}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 12}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_index: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 plays 7 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 10}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_index: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 3's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays 7 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 0}, \"id\": 0}, \"msg\": \"Player 0 decides to: play-(card_index: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 0's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 plays 8 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 11}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(card_index: 11)\"}, {\"type\": \"info\", \"msg\": \"Player 1's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 now has 11 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing state variables that are shared across all players.\", \"common.num_players\": \"An integer representing the number of players in the game, which is 4 in this example.\", \"common.current_player\": \"An integer indexing the player who is supposed to take the next action, which is player 2 in this example.\", \"common.pot\": \"An integer representing the total number of chips in the pot, which is 5 in this example.\", \"common.played_cards\": \"An object where keys are suit names ('hearts', 'diamonds', 'clubs', 'spades') and values are lists of card objects representing the cards that have been played and sorted by rank.\", \"common.is_over\": \"A boolean indicating whether the game is over or not.\", \"common.winner\": \"The index of the player who has won the game, or null if the game hasn't ended yet.\", \"common.facedown_cards\": \"An object containing information about the deck; 'deck_size' is used to indicate the number of cards remaining in the deck, which is 0 in this example.\", \"players\": \"A list where each element is a dictionary of a player's state information.\", \"players[i].public\": \"An object containing public information about player i, such as 'num_cards', 'score', and 'chips_contributed'.\", \"players[i].public.num_cards\": \"An integer representing the number of cards player i holds, which is the same as 'hand_size' for undealt hands in this example.\", \"players[i].public.chips_contributed\": \"The total number of chips that player i has contributed to the pot.\", \"players[i].facedown_cards\": \"An object containing private information about player i's current hand, with 'hand_size' indicating the number of cards held.\", \"players[i].facedown_cards.hand\": \"A list of card objects player i has in their hand. This list details the cards for the current player.\", \"recent_history\": \"A list of events that occurred recently in the game. Each event is a dictionary with a 'type' and potentially other descriptive fields.\", \"recent_history[i].type\": \"The type of the event, such as 'action' or 'info'.\", \"recent_history[i].player_id\": \"The ID of the player involved in the event.\", \"recent_history[i].action\": \"An object containing details of the action taken by the player, including the action type and arguments.\", \"recent_history[i].msg\": \"A text message describing the event that took place.\", \"legal_actions\": \"A list of possible actions the current player can legally perform, with each action represented as an object containing an 'action' and 'args'.\"}",
    "policy_list": [
        "**Prioritize Playing Sevens**\nAlways play a Seven card if available, as it opens up the possibility to play both higher and lower cards in that suit.",
        "**Play Cards That Create Future Opportunities**\nWhen not able to play a Seven, play cards that will likely facilitate your ability to play more cards in upcoming turns, such as Sixes and Eights, which border Sevens.",
        "**Minimize Chip Penalty by Playing Agile Plays**\nIf you cannot play cards that foster future plays, aim to play any card available to minimize facing a penalty of passing or retaining more cards.",
        "**Awareness of Suit Dynamics**\nUnderstand the distribution and played status of cards within each suit to anticipate what other players might use, helping you plan your plays more strategically."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    import numpy as np\n    \n    # Helper function to check if a Seven card is in hand and can be played\n    def can_play_seven(hand, played_cards):\n        sevens = [card for card in hand if card['rank'] == '7']\n        for seven in sevens:\n            if seven['suit'] not in played_cards:\n                return True\n        return False\n\n    # Get the current player data\n    current_player = state[\"common\"][\"current_player\"]\n    player_hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n\n    # Check if the action is to play a seven (that isn't played yet)\n    playing_a_seven = False\n    if action['action'] == \"play\":\n        card_index = action['args']['card_index']\n        card = player_hand[card_index]\n        if card['rank'] == '7':\n            if card['suit'] not in state[\"common\"][\"played_cards\"] or len(state[\"common\"][\"played_cards\"][card['suit']]) == 0:\n                playing_a_seven = True\n\n    # Basic scoring components\n    num_cards = state[\"players\"][current_player][\"public\"][\"num_cards\"]\n    total_played_cards = sum(len(v) for v in state[\"common\"][\"played_cards\"].values())\n    max_possible_cards = 52 \n\n    # Core calculation for potential winning percentage\n    potential_score = (max_possible_cards - num_cards) / max_possible_cards\n\n    # Score modifiers based on specific strategies\n    if playing_a_seven:\n        potential_score += 0.15  # Give a bonus for playing a Seven\n    \n    # Normalize potential_score to ensure it's between 0 and 1\n    result_score = min(max(potential_score, 0), 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def rank_to_value(rank: str) -> int:\n        rank_order = {'A': 1, '2': 2, '3': 3, '4': 4,\n                      '5': 5, '6': 6, '7': 7, '8': 8,\n                      '9': 9, '10': 10, 'J': 11,\n                      'Q': 12, 'K': 13}\n        return rank_order[rank]\n\n    def calc_player_progress(player_state: dict) -> float:\n        num_cards = player_state['public']['num_cards']\n        max_possible_cards = 13  # Full suit length\n        return (max_possible_cards - num_cards) / max_possible_cards\n\n    def evaluate_card_played(card, played_cards):\n        # Calculate potential impact of playing the card\n        rank_value = rank_to_value(card['rank'])\n        suit = card['suit']\n\n        # Check existing played cards in the suit\n        played_ranks = {rank_to_value(c['rank']) for c in played_cards.get(suit, [])}\n\n        score = 0.0\n        if rank_value == 7:\n            score += 0.4  # Playing a 7 is highly valuable\n        elif rank_value == 6 or rank_value == 8:\n            score += 0.3  # Next to a 7, encourages more plays\n        elif rank_value < 7 and rank_value + 1 in played_ranks:\n            score += 0.1  # Allows moves on lower sequence\n        elif rank_value > 7 and rank_value - 1 in played_ranks:\n            score += 0.1  # Allows moves on higher sequence\n\n        return score\n\n    # Extract relevant information from state\n    current_player = state['common']['current_player']\n    player_state = state['players'][current_player]\n    hand = player_state['facedown_cards']['hand']\n    played_cards = state['common']['played_cards']\n\n    # Identify the card associated with the action\n    card_index = action['id']  # Using 'id' instead of 'args'\n    card_to_play = hand[card_index]\n\n    # Calculate the base score from player progress\n    progress_score = calc_player_progress(player_state)\n\n    # Evaluate the potential of the current action\n    action_value_score = evaluate_card_played(card_to_play, played_cards)\n    \n    # Final score is a weighted sum of progress and action value\n    result_score = 0.5 * progress_score + 0.5 * action_value_score\n\n    # Ensure the result falls within the 0 to 1 range and remains continuous\n    result_score = min(max(result_score, 0), 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Initialize the score\n    result_score = 0.5\n    \n    # Extract common state information\n    num_players = state['common']['num_players']\n    current_player_index = state['common']['current_player']\n    pot = state['common']['pot']\n    \n    # Extract current player information\n    current_player = state['players'][current_player_index]\n    num_cards = current_player['public']['num_cards']\n    chips_contributed = current_player['public']['chips_contributed']\n    hand = current_player['facedown_cards']['hand']\n    \n    # Calculate base score based on the number of cards remaining\n    result_score += (52 - num_cards) / 52  # As more cards are played, better chance of winning\n    \n    # Penalty for the number of chips contributed\n    result_score -= chips_contributed / (3 * num_players)  # Assuming average contribution\n    \n    # Evaluate the specific action\n    if action['action'] == 'play':\n        card_index = action['args']['card_index']\n        card_to_play = hand[card_index]\n        \n        # Increase score if the card is a key card among 7s, 6s, or 8s, facilitating more plays\n        if card_to_play['rank'] in ['7', '6', '8']:\n            result_score += 0.1\n        \n        # Further adjust score based on card rank\n        # Use a complete rank string including 10\n        rank_string = \"A2345678910JQK\"\n        rank_value = rank_string.index(card_to_play['rank']) / len(rank_string)\n\n        result_score += (1 - rank_value) * 0.05  # Prefer playing lower cards early\n    \n    # Bound result score between 0 and 1\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from the state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    pot = state[\"common\"][\"pot\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    is_over = state[\"common\"][\"is_over\"]\n    winner = state[\"common\"][\"winner\"]\n    facedown_cards = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # Check if the game is over\n    if is_over:\n        return 1.0 if winner == current_player else 0.0\n\n    # Update to access card_index from legal_actions\n    if action[\"action\"] == \"pass\":\n        return 0.1  # Minimal score for passing action, as it's likely not strategic to pass.\n    \n    # Determine the index of the card the player intends to play\n    card_index = None\n    for act in legal_actions:\n        if act[\"action\"] == \"play\" and act[\"id\"] == action[\"id\"]:\n            card_index = act[\"args\"][\"card_index\"]\n            break\n    \n    if card_index is None:\n        raise ValueError(\"Card index for play_card not found in legal actions.\")\n\n    card_to_play = facedown_cards[card_index]\n\n    # Calculate the contribution of playing the card towards winning\n    # Analyze the position and potential impact of playing action\n    suits_played = {suit: [card['rank'] for card in suits] for suit, suits in played_cards.items()}\n    suit = card_to_play[\"suit\"]\n    rank = card_to_play[\"rank\"]\n\n    # Heuristic values\n    value_play = 0.1  # Base value for being able to play\n    proximity_to_empty_hand = 1.0 - (len(facedown_cards) / 13.0)  # Based on the cards left\n\n    # Card sequencing factor according to the rules\n    if rank == '7':\n        card_value = 0.8  # High value for playing a seven\n    elif rank == '6' and '7' in suits_played[suit]:\n        card_value = 0.7  # Sequencing after seven\n    elif rank == '8':\n        card_value = 0.7  # Sequencing starts on the other side\n    elif rank == '5' and '6' in suits_played[suit]:\n        card_value = 0.6  # Continue on six-side\n    elif rank == '9' and '8' in suits_played[suit]:\n        card_value = 0.6  # Continue on eight-side\n    else:\n        card_value = 0.0  # Not immediately valuable\n\n    # Reward is calculated based on the ability to play a card and strategic advantage\n    result_score = value_play + (card_value * 0.3) + (proximity_to_empty_hand * 0.6)\n\n    # Normalize and ensure the output range between 0 and 1\n    result_score = max(0.0, min(result_score, 1.0))\n\n    return result_score\n"
    ]
}