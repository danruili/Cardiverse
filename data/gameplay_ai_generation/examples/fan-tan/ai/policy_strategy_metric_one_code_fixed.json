{
    "game_description": "Rank of Cards\n\nThe cards in each suit rank: K (high), Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A.\n\n### The Ante\n\nEach player puts one chip in the pot before each deal.\n\n### The Deal\n\nDeal the cards one at a time face down, beginning with the player on the left. All the cards are dealt, and some players may receive fewer cards than others. It is customary for each player with fewer cards to ante one additional chip.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all of their cards.\n\n### The Play\n\nBeginning to the left of the dealer, each person must play a card if possible.\n\nAll cards played remain face up on the table, arranged in four rows of the four suits.\n\nThe plays that may be made are:\n\nAny seven or any card in suit and sequence to a card previously played.\n\nAs the sevens are played, they are placed in a row in the center of the table.\n\nThe sixes are placed in another row to the right - the fives and lower cards in sequence are piled on the sixes.\n\nThe eights are placed on the left of the sevens in their respective suits - nines and higher cards in sequence are piled on the eights.\n\nEach player must play a card during their turn if possible; if the person cannot play, they put one chip in the pot and the turn passes to the left. The game ends when one player gets rid of all of their cards. Each opponent then pays the pot one chip for each card remaining in their hand, and the winner takes the pot.\n\n### Irregularities\n\nIf a player passes when they could have played, the offender must pay three chips into the pot. If the player passed when they were able to play a seven, they must pay an additional five chips to the players holding the six and the eight of the same suit.\n\n### How to Keep Score\n\nOne can play a series of rounds, scoring 1 point for each card each player has remaining at the end of each round. When one player reaches 100 points, the game is over and the player who then has the smallest score is the overall winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 5, \"played_cards\": {\"hearts\": [{\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"8\", \"suit\": \"hearts\"}], \"diamonds\": [{\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}], \"clubs\": [], \"spades\": [{\"rank\": \"7\", \"suit\": \"spades\"}]}, \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}}, \"players\": [{\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 2}, \"facedown_cards\": {\"hand_size\": 12}}, {\"public\": {\"num_cards\": 11, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 11}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"Q\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}]}}, {\"public\": {\"num_cards\": 12, \"score\": 0, \"chips_contributed\": 1}, \"facedown_cards\": {\"hand_size\": 12}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card_index: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 plays 7 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 10}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(card_index: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 3's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays 7 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 0}, \"id\": 0}, \"msg\": \"Player 0 decides to: play-(card_index: 0)\"}, {\"type\": \"info\", \"msg\": \"Player 0's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 plays 8 of hearts.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 now has 12 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card_index\": 11}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(card_index: 11)\"}, {\"type\": \"info\", \"msg\": \"Player 1's turn with action: play\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8 of diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 now has 11 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card_index\": 4}, \"id\": 0}]}\n\nExplanation: \n{\"common\": \"An object containing state variables that are shared across all players.\", \"common.num_players\": \"An integer representing the number of players in the game, which is 4 in this example.\", \"common.current_player\": \"An integer indexing the player who is supposed to take the next action, which is player 2 in this example.\", \"common.pot\": \"An integer representing the total number of chips in the pot, which is 5 in this example.\", \"common.played_cards\": \"An object where keys are suit names ('hearts', 'diamonds', 'clubs', 'spades') and values are lists of card objects representing the cards that have been played and sorted by rank.\", \"common.is_over\": \"A boolean indicating whether the game is over or not.\", \"common.winner\": \"The index of the player who has won the game, or null if the game hasn't ended yet.\", \"common.facedown_cards\": \"An object containing information about the deck; 'deck_size' is used to indicate the number of cards remaining in the deck, which is 0 in this example.\", \"players\": \"A list where each element is a dictionary of a player's state information.\", \"players[i].public\": \"An object containing public information about player i, such as 'num_cards', 'score', and 'chips_contributed'.\", \"players[i].public.num_cards\": \"An integer representing the number of cards player i holds, which is the same as 'hand_size' for undealt hands in this example.\", \"players[i].public.chips_contributed\": \"The total number of chips that player i has contributed to the pot.\", \"players[i].facedown_cards\": \"An object containing private information about player i's current hand, with 'hand_size' indicating the number of cards held.\", \"players[i].facedown_cards.hand\": \"A list of card objects player i has in their hand. This list details the cards for the current player.\", \"recent_history\": \"A list of events that occurred recently in the game. Each event is a dictionary with a 'type' and potentially other descriptive fields.\", \"recent_history[i].type\": \"The type of the event, such as 'action' or 'info'.\", \"recent_history[i].player_id\": \"The ID of the player involved in the event.\", \"recent_history[i].action\": \"An object containing details of the action taken by the player, including the action type and arguments.\", \"recent_history[i].msg\": \"A text message describing the event that took place.\", \"legal_actions\": \"A list of possible actions the current player can legally perform, with each action represented as an object containing an 'action' and 'args'.\"}",
    "policy_list": [
        "**Playable Cards Ratio**\nThe ratio of cards in hand that can currently be played according to the game rules. A higher ratio indicates a better position to play more cards and get closer to winning the round.\n**Total Sevens Held**\nThe number of sevens currently held by the player. Holding sevens is advantageous as they allow starting new sequences, thus reducing the player's hand size directly and providing strategic options.\n**Opponent Blocking Potential**\nA measure of the player's ability to block opponents from playing, based on the current lay of cards. This could be determined by the player's control over sequences and strategic card plays that limit opponents' options.\n**Chips Potential Loss**\nThe estimated number of chips a player might lose based on their current hand and inability to play cards. This considers not only the current inability to play but also potential future penalties, influencing risk management and decision-making.\n**Prioritize Playing Sevens**\nAlways play a Seven card if available, as it opens up the possibility to play both higher and lower cards in that suit.\n**Play Cards That Create Future Opportunities**\nWhen not able to play a Seven, play cards that will likely facilitate your ability to play more cards in upcoming turns, such as Sixes and Eights, which border Sevens.\n**Minimize Chip Penalty by Playing Agile Plays**\nIf you cannot play cards that foster future plays, aim to play any card available to minimize facing a penalty of passing or retaining more cards.\n**Awareness of Suit Dynamics**\nUnderstand the distribution and played status of cards within each suit to anticipate what other players might use, helping you plan your plays more strategically."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract information\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    pot = state[\"common\"][\"pot\"]\n    played_cards = state[\"common\"][\"played_cards\"]\n    is_over = state[\"common\"][\"is_over\"]\n    winner = state[\"common\"][\"winner\"]\n    facedown_cards = state[\"common\"][\"facedown_cards\"]\n\n    # Get current player's cards\n    player = state[\"players\"][current_player]\n    hand = player[\"facedown_cards\"][\"hand\"]\n    \n    # Policy: Playable Cards Ratio\n    playable_cards = []\n    for card in hand:\n        if card['rank'] == '7':\n            playable_cards.append(card)\n        else:\n            suit = card['suit']\n            rank = card['rank']\n\n            if suit in played_cards:\n                if rank.isdigit():\n                    rank_value = int(rank)\n                else:\n                    rank_value = {\"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 1}[rank]\n                \n                if played_cards[suit]:\n                    played_ranks = [int(c['rank']) if c['rank'].isdigit() else {\"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 1}[c['rank']] for c in played_cards[suit]]\n                    if rank_value - 1 in played_ranks or rank_value + 1 in played_ranks:\n                        playable_cards.append(card)\n\n    playable_cards_ratio = len(playable_cards) / len(hand) if len(hand) > 0 else 0\n\n    # Policy: Total Sevens Held\n    sevens_held = sum(1 for card in hand if card['rank'] == '7')\n\n    # Policy: Opponent Blocking Potential\n    blocking_potential = 0\n    for card in hand:\n        suit = card['suit']\n        rank = card['rank']\n        if played_cards[suit]:\n            played_ranks = [int(c['rank']) if c['rank'].isdigit() else {\"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 1}[c['rank']] for c in played_cards[suit]]\n            blocking_potential += 1 / (1 + len(played_ranks))  # More played cards in that suit, less blocking potential\n\n    # Policy: Chips Potential Loss\n    chips_penalty = 1 / num_players\n    # Safely access 'recent_history'\n    recent_history = state.get(\"recent_history\", [])\n    for event in recent_history:\n        if event['type'] == 'turn_end' and event['player_id'] == current_player:\n            chips_penalty = 0  # If the player managed to play last turn, no extra penalty\n\n    potential_loss = chips_penalty + (len(hand) * 0.01)  # Potential loss based on hand size\n\n    # Calculate the score/action value\n    score_value = (\n        0.4 * playable_cards_ratio +\n        0.3 * (sevens_held / len(hand)) +\n        0.2 * (1 - blocking_potential) +\n        0.1 * (1 - potential_loss)\n    )\n\n    # Determine the action type and adjust the score\n    if action['action'] != 'pass':  # Assuming the action is to play a card\n        card_index = action.get('id')  # Assuming 'id' may correlate with card index, modify if needed\n        card_to_play = hand[card_index] if card_index is not None else None\n        if card_to_play and card_to_play in playable_cards:\n            score_value += 0.05\n        if card_to_play and card_to_play['rank'] == '7':\n            score_value += 0.1\n\n    result_score = min(1.0, max(0.0, score_value))\n    \n    return result_score\n"
    ]
}