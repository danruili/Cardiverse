{
    "game_description": "This document outlines the rules for the card game Gin Rummy, as implemented in the provided code.\n\n### 1. Game Objective\n\nThe primary goal in Gin Rummy is to form a hand where most or all of your cards are part of valid combinations called **melds**. By doing so, you aim to reduce the value of your unmatched cards, known as **deadwood**, to a minimum. A player can win a round by \"going Gin\" (having a hand with zero deadwood) or by \"knocking\" with a low deadwood count.\n\n### 2. Game Setup\n\n* **Players:** The game is designed for two players.\n* **Deck:** A standard 52-card deck is used.\n* **Dealing:**\n    * One player is designated as the dealer.\n    * The non-dealer is dealt 11 cards, and the dealer receives 10 cards.\n    * The remaining cards form the **stock pile**, which is placed face down. The top card of the stock pile is turned face up to start the **discard pile**.\n\n### 3. Gameplay\n\nThe game proceeds in turns, starting with the non-dealer. A player's turn consists of two main actions: a **draw** and a **discard**.\n\n#### 3.1. The Draw\n\nAt the beginning of your turn, you must take one card from either:\n\n* The **stock pile** (the face-down deck).\n* The **discard pile** (the face-up pile of discarded cards). You may only take the top card of the discard pile.\n\n#### 3.2. The Discard\n\nAfter drawing a card, you will have 11 cards in your hand. You must then choose one card to discard, placing it face up on top of the discard pile.\n\n### 4. Melds\n\nA **meld** is a combination of cards in your hand that helps to reduce your deadwood score. There are two types of melds:\n\n* **Set:** Three or four cards of the same rank (e.g., 7 of Hearts, 7 of Clubs, 7 of Spades).\n* **Run:** Three or more cards of the same suit in sequential order (e.g., 4 of Diamonds, 5 of Diamonds, 6 of Diamonds). Aces are always low in a run (e.g., Ace-2-3 is a valid run, but Queen-King-Ace is not).\n\nA single card cannot belong to more than one meld at the same time.\n\n### 5. Card Values (Deadwood)\n\nThe point values of the cards are as follows:\n\n* **Ace:** 1 point\n* **Number Cards (2-9):** Face value (e.g., a 5 is worth 5 points)\n* **Face Cards (10, Jack, Queen, King):** 10 points each\n\nThe **deadwood count** is the total point value of all the cards in your hand that are not part of a valid meld.\n\n### 6. Ending a Round\n\nThere are three ways a round can end:\n\n#### 6.1. Going Gin\n\nIf, after drawing a card, you can form melds with all 10 of your cards (leaving you with a deadwood count of zero), you can \"go Gin.\" You would discard your 11th card and declare \"Gin.\"\n\n* **Scoring for Gin:** You receive a bonus of 25 points, plus the total deadwood count of your opponent's hand.\n\n#### 6.2. Knocking\n\nIf your deadwood count is 10 or less after drawing a card, you may choose to \"knock.\" To do this, you discard your 11th card and lay down your hand, separating your melds from your deadwood.\n\n* **Lay-offs:** The opponent then has the opportunity to \"lay off\" any of their own deadwood cards that can be added to your melds. For example, if you have a meld of three Kings, and your opponent has the fourth King, they can lay it off. If you have a run of 5-6-7 of Hearts, they can lay off the 4 of Hearts or the 8 of Hearts.\n* **Scoring for Knocking:**\n    * **If your deadwood count is lower than your opponent's (after they have laid off their cards):** You score the difference between your deadwood and their remaining deadwood.\n    * **Undercutting:** If your opponent, after laying off cards, has a deadwood count that is less than or equal to yours, they have \"undercut\" you. In this case, the opponent scores a 25-point bonus, plus the difference in your deadwood counts.\n\n#### 6.3. Dead Hand\n\nIf the stock pile is reduced to only two cards and no player has knocked or gone Gin, the round is declared a \"dead hand,\" and no points are awarded to either player.\n\n",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 1, \"dealer_id\": 1, \"phase\": \"discard\", \"end_type\": null, \"going_out_player\": null, \"knock_card\": null, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 30}, \"faceup_cards\": {\"discard_pile\": [{\"rank\": \"T\", \"suit\": \"Clubs\"}], \"final_melds\": {\"player_0\": [], \"player_1\": []}}}, \"players\": [{\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 10}, \"faceup_cards\": {\"melds\": []}}, {\"public\": {\"score\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"Spades\"}, {\"rank\": \"8\", \"suit\": \"Clubs\"}, {\"rank\": \"K\", \"suit\": \"Clubs\"}, {\"rank\": \"4\", \"suit\": \"Clubs\"}, {\"rank\": \"A\", \"suit\": \"Clubs\"}, {\"rank\": \"5\", \"suit\": \"Hearts\"}, {\"rank\": \"9\", \"suit\": \"Spades\"}, {\"rank\": \"Q\", \"suit\": \"Clubs\"}, {\"rank\": \"A\", \"suit\": \"Hearts\"}, {\"rank\": \"9\", \"suit\": \"Diamonds\"}, {\"rank\": \"8\", \"suit\": \"Spades\"}]}, \"faceup_cards\": {\"melds\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"pickup\", \"id\": 1}, \"msg\": \"Player 1 decides to: pickup\"}, {\"type\": \"info\", \"msg\": \"Player 1 picks up 8-Spades from the discard pile.\", \"role\": null}], \"legal_actions\": [{\"action\": \"discard\", \"args\": {\"card\": \"2-Spades\", \"deadwood\": 65}, \"id\": 0}, {\"action\": \"discard\", \"args\": {\"card\": \"8-Clubs\", \"deadwood\": 59}, \"id\": 1}, {\"action\": \"discard\", \"args\": {\"card\": \"K-Clubs\", \"deadwood\": 57}, \"id\": 2}, {\"action\": \"discard\", \"args\": {\"card\": \"4-Clubs\", \"deadwood\": 63}, \"id\": 3}, {\"action\": \"discard\", \"args\": {\"card\": \"A-Clubs\", \"deadwood\": 66}, \"id\": 4}, {\"action\": \"discard\", \"args\": {\"card\": \"5-Hearts\", \"deadwood\": 62}, \"id\": 5}, {\"action\": \"discard\", \"args\": {\"card\": \"9-Spades\", \"deadwood\": 58}, \"id\": 6}, {\"action\": \"discard\", \"args\": {\"card\": \"Q-Clubs\", \"deadwood\": 57}, \"id\": 7}, {\"action\": \"discard\", \"args\": {\"card\": \"A-Hearts\", \"deadwood\": 66}, \"id\": 8}, {\"action\": \"discard\", \"args\": {\"card\": \"9-Diamonds\", \"deadwood\": 58}, \"id\": 9}, {\"action\": \"discard\", \"args\": {\"card\": \"8-Spades\", \"deadwood\": 59}, \"id\": 10}]}\n\nExplanation: \n{\"common\": \"A dictionary containing non-player-specific information about the current game state.\", \"common.num_players\": \"The total number of players in the game, which is 2 for Gin Rummy.\", \"common.current_player\": \"The player ID of the current player whose turn it is to act (0 or 1).\", \"common.dealer_id\": \"The ID of the player who is the dealer for this round; the dealer changes each round.\", \"common.phase\": \"The current phase of the game, which can be 'deal', 'discard', 'draw', or 'game_over'.\", \"common.end_type\": \"Indicates how the round ended: 'knock', 'gin', 'dead_hand', or null if the game is still ongoing.\", \"common.going_out_player\": \"The player ID of the player who is going out by knocking or ginning. Null if no player is going out.\", \"common.knock_card\": \"The card used by a player to indicate they are knocking. Null if there is no knock.\", \"common.winner\": \"The player ID of the winner of the round. Null if the round has not been won.\", \"common.is_over\": \"Boolean indicating whether the game is over or not.\", \"common.facedown_cards\": \"A dictionary containing information about facedown cards, like the deck.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck.\", \"common.faceup_cards\": \"A dictionary containing information about faceup cards.\", \"common.faceup_cards.discard_pile\": \"A list of card objects representing the discard pile. Each card has a 'rank' and a 'suit'.\", \"common.faceup_cards.final_melds\": \"A dictionary recording the final melds for each player ('player_0', 'player_1'), which are filled at the end of the game.\", \"players\": \"A list containing information specific to each player in the game. Each player is represented by a dictionary.\", \"players[n].public\": \"A dictionary containing public information about player n, including their score.\", \"players[n].facedown_cards\": \"A dictionary containing the player's facedown cards, like their hand.\", \"players[n].facedown_cards.hand_size\": \"Specifies the number of cards in the player's hand. Used primarily when only hand size is public.\", \"players[n].faceup_cards\": \"A dictionary containing the player's faceup cards, such as melds revealed at the end of a hand.\", \"players[n].faceup_cards.melds\": \"A list of melds (groups of cards) the player has created from their hand. Empty during the game as melds are shown at the end.\", \"recent_history\": \"A list of the most recent actions taken in the game, stored as dictionaries.\", \"recent_history[].type\": \"The type of entry, such as 'action' or 'info', indicating whether it's player action or game information.\", \"recent_history[].player_id\": \"The ID of the player who performed the action, relevant for 'action' type entries.\", \"recent_history[].action\": \"A dictionary of action details, relevant for 'action' type entries.\", \"recent_history[].msg\": \"A message describing the recent action or event.\", \"legal_actions\": \"A list of dictionaries representing the legal actions the current player can take, each with an 'action' and optionally 'args'.\", \"legal_actions[].action\": \"The type of action a player can take, such as 'discard'.\", \"legal_actions[].args\": \"A dictionary of arguments for the action, such as 'card' to specify a card to discard and 'deadwood' indicating deadwood value after action.\"}",
    "policy_list": [
        "**Potential Meld Completion**\nMeasures the likelihood of completing or extending a meld by drawing a specific card from the discard pile or stock pile. Higher scores are given to moves that contribute to forming or improving existing melds.",
        "**Deadwood Reduction Potential**\nQuantifies how a potential move (draw or discard) affects the total deadwood count in the player's hand. Actions that greatly reduce deadwood are favored.",
        "**Knocking Potential**\nEstimates the ability to knock after a draw, either immediately or in future turns by evaluating potential routes to achieve a deadwood count of 10 or less. Prioritizes actions that would lead to a quick shortcut to knock.",
        "**Opponent Meld Disruption Potential**\nAssesses the strategy of choosing discard cards that could deny or delay the opponent's ability to complete melds, particularly if knowledge can be inferred about their possible meld strategies from the discard history."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Evaluate the likelihood of winning after a specific action based on the potential to complete or extend melds.\n    \n    :param state: The current game state including public and private information.\n    :param action: A specific planned action to evaluate in the form of a dictionary.\n    :return: A float score between 0 and 1 representing the estimated probability of winning.\n    \"\"\"\n    \n    current_player_id = state[\"common\"][\"current_player\"]\n    current_hand = state[\"players\"][current_player_id][\"facedown_cards\"][\"hand\"]\n    \n    # Extract the card involved in the action\n    card_to_discard = action[\"args\"][\"card\"]\n    \n    # Define functions to check for potential sets and runs\n    def potential_set_score(hand, card):\n        # Count cards of the same rank\n        rank_counts = {}\n        for card in hand:\n            rank_counts[card[\"rank\"]] = rank_counts.get(card[\"rank\"], 0) + 1\n        potential = rank_counts.get(card[\"rank\"], 0)\n        return potential / 4  # Based on maximum of 4 possible in a set\n\n    def potential_run_score(hand, card):\n        # Check for potential runs of the same suit\n        suit_cards = [c for c in hand if c[\"suit\"] == card[\"suit\"]]\n        suit_cards.append(card)  # Consider the card being evaluated\n        ranks = [card_to_rank(c[\"rank\"]) for c in suit_cards]\n        ranks = sorted(ranks)\n        \n        # Check sequences\n        run_length = 1\n        max_run_length = 1\n        for i in range(1, len(ranks)):\n            if ranks[i] == ranks[i-1] + 1:\n                run_length += 1\n                max_run_length = max(max_run_length, run_length)\n            else:\n                run_length = 1\n        \n        return max_run_length / 7  # Based on possible maximum run length (Ace-2-3...8)\n\n    def card_to_rank(rank):\n        # Convert card rank to a numeric value\n        if rank == \"A\":\n            return 1\n        elif rank in [\"J\", \"Q\", \"K\"]:\n            return 10\n        elif rank.isdigit():\n            return int(rank)\n        elif rank == \"T\":\n            return 10\n\n    # Calculate the scores for the potential set and run completions\n    set_score = potential_set_score(current_hand, card_to_discard)\n    run_score = potential_run_score(current_hand, card_to_discard)\n    \n    # Weighted averaging of the meld opportunity evaluations\n    result_score = 0.5 * set_score + 0.5 * run_score\n    \n    return result_score\n\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Retrieve the player's hand and the action-specific deadwood count\n    player_hand = state[\"players\"][state[\"common\"][\"current_player\"]][\"facedown_cards\"][\"hand\"]\n    action_deadwood = action[\"args\"][\"deadwood\"]\n\n    # Calculate the initial deadwood count of the player's hand\n    card_values = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                   '8': 8, '9': 9, 'T': 10, 'J': 10, 'Q': 10, 'K': 10}\n\n    initial_deadwood = sum(card_values[card[\"rank\"]] for card in player_hand)\n\n    # Calculate the potential reduction in deadwood from making this action\n    deadwood_reduction = initial_deadwood - action_deadwood\n\n    # Derive score as a function of deadwood reduction\n    # Normalize the score: more reduction means higher score\n    if initial_deadwood > 0:\n        result_score = max(0, min(1, deadwood_reduction / initial_deadwood))\n    else:\n        result_score = 0  # If there's no deadwood initially, no point in measuring reduction\n\n    return result_score\n\n# Example usage\nstate_example = {\n    \"common\": {\n        \"num_players\": 2, \n        \"current_player\": 1, \n        \"dealer_id\": 1, \n        \"phase\": \"discard\", \n        \"end_type\": None, \n        \"going_out_player\": None, \n        \"knock_card\": None, \n        \"winner\": None, \n        \"is_over\": False, \n        \"facedown_cards\": {\"deck_size\": 30}, \n        \"faceup_cards\": {\"discard_pile\": [{\"rank\": \"T\", \"suit\": \"Clubs\"}], \"final_melds\": {\"player_0\": [], \"player_1\": []}}\n    }, \n    \"players\": [\n        {\"public\": {\"score\": 0}, \"facedown_cards\": {\"hand_size\": 10}, \"faceup_cards\": {\"melds\": []}},\n        {\"public\": {\"score\": 0, \"current_player\": True}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"Spades\"}, {\"rank\": \"8\", \"suit\": \"Clubs\"}, {\"rank\": \"K\", \"suit\": \"Clubs\"}, {\"rank\": \"4\", \"suit\": \"Clubs\"}, {\"rank\": \"A\", \"suit\": \"Clubs\"}, {\"rank\": \"5\", \"suit\": \"Hearts\"}, {\"rank\": \"9\", \"suit\": \"Spades\"}, {\"rank\": \"Q\", \"suit\": \"Clubs\"}, {\"rank\": \"A\", \"suit\": \"Hearts\"}, {\"rank\": \"9\", \"suit\": \"Diamonds\"}, {\"rank\": \"8\", \"suit\": \"Spades\"}]}, \"faceup_cards\": {\"melds\": []}}\n    ], \n    \"recent_history\": [\n        {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"pickup\", \"id\": 1}, \"msg\": \"Player 1 decides to: pickup\"}, \n        {\"type\": \"info\", \"msg\": \"Player 1 picks up 8-Spades from the discard pile.\", \"role\": None}\n    ], \n    \"legal_actions\": [\n        {\"action\": \"discard\", \"args\": {\"card\": \"2-Spades\", \"deadwood\": 65}, \"id\": 0}, \n        {\"action\": \"discard\", \"args\": {\"card\": \"8-Clubs\", \"deadwood\": 59}, \"id\": 1}, \n        # ... other legal actions ...\n    ]\n}\n\naction_example = {\"action\": \"discard\", \"args\": {\"card\": \"8-Clubs\", \"deadwood\": 59}, \"id\": 1}\n\n# Call the scoring function\n#print(score(state_example, action_example))  # returns the score between 0 and 1\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Function to get the value of a card\n    def card_value(card):\n        if card['rank'] in ['J', 'Q', 'K', 'T']:\n            return 10\n        elif card['rank'] == 'A':\n            return 1\n        else:\n            return int(card['rank'])\n    \n    # Calculate deadwood for a given hand of cards\n    def calculate_deadwood(hand):\n        return sum(card_value(card) for card in hand)\n    \n    # Extract the player's hand and the planned discard action\n    current_player = state[\"common\"][\"current_player\"]\n    player_hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n    planned_discard = action['args']['card']\n    \n    # Calculate the deadwood count if the planned action is taken\n    new_hand = [card for card in player_hand if (card['rank'] + '-' + card['suit']) != planned_discard]\n    potential_deadwood = calculate_deadwood(new_hand)\n    \n    # Determine knocking potential. Lower deadwood means higher knocking potential.\n    max_knock_deadwood = 10  # Threshold for knocking\n    if potential_deadwood <= 0:\n        # Going Gin scenario\n        result_score = 1.0\n    elif potential_deadwood <= max_knock_deadwood:\n        # High potential to knock\n        score = (max_knock_deadwood - potential_deadwood) / max_knock_deadwood\n        result_score = 0.75 + 0.25 * score\n    else:\n        # Evaluate the decrease in deadwood from current state for potential blocking\n        original_deadwood = calculate_deadwood(player_hand)\n        improvement = (original_deadwood - potential_deadwood) / original_deadwood\n        result_score = max(0, 0.5 * improvement)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract relevant data from the state\n    current_player_id = state['common']['current_player']\n    legal_actions = state['legal_actions']\n    discard_pile = state['common']['faceup_cards']['discard_pile']\n    player_hand = state['players'][current_player_id]['facedown_cards']['hand']\n\n    # Determine the card to be discarded based on the action\n    card_to_discard = None\n    for legal_action in legal_actions:\n        if legal_action['action'] == 'discard' and legal_action['args']['card'] == action:\n            card_to_discard = action\n            current_deadwood = legal_action['args']['deadwood']\n            break\n\n    if not card_to_discard:\n        return 0.0  # Return low score if action is not valid\n\n    # Opponent's potential meld construction based on discard pile\n    opponent_meld_potential = 0\n    for card in discard_pile:\n        if card['rank'] == card_to_discard.split('-')[0]:\n            opponent_meld_potential += 1\n\n    # Calculate potential score for the action\n    # The score should reflect the balance between reducing current deadwood\n    # and potentially disrupting the opponent's melds\n    max_deadwood = 100  # Arbitrary high value representing a worst deadwood scenario\n    deadwood_score = (max_deadwood - current_deadwood) / max_deadwood\n\n    # Factor in opponent disruption potential\n    disruption_penalty = opponent_meld_potential / len(discard_pile) if len(discard_pile) > 0 else 0\n\n    # Combine the two scores\n    result_score = deadwood_score * (1 - disruption_penalty)\n    \n    # Ensure the result is in the probability range [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n\n# This function evaluates the potential action of discarding a specific card based on its\n# impact on deadwood reduction and risks associated with opponent meld completion.\n"
    ]
}