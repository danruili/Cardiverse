{
    "game_description": "Go Fish is a fun game that will amuse and entertain even the youngest card players. It is similar to the game Authors.\n\n### The Pack\n\nThe standard 52-card pack is used. Some cards will be dealt and the rest will form the stock pile.\n\nShop our Hoyle 6 in 1 Fun Pack\n\n### Object of the Game\n\nThe goal is to win the most \"books\" of cards. A book is any four of a kind, such as four kings, four aces, and so on.\n\n### Rank of Cards\n\nThe cards rank from ace (high) to two (low). The suits are not important, only the card numbers are relevant, such as two 3s, two 10s, and so on.\n\n### The Deal\n\nAny player deals one card face up to each player. The player with the lowest card is the dealer. The dealer shuffles the cards, and the player to the right cuts them.\n\nThe dealer completes the cut and deals the cards clockwise one at a time, face down, beginning with the player to the left. If two or three people are playing, each player receives seven cards. If four or five people are playing, each receives five cards. The remainder of the pack is placed face down on the table to form the stock.\n\n### The Play\n\nThe player to the left of the dealer looks directly at any opponent and says, for example, \"Give me your kings,\" usually addressing the opponent by name and specifying the rank that they want, from ace down to two. The player who is \"fishing \u201cmust have at least one card of the rank that was asked for in their hand. The player who is addressed must hand over all the cards requested. If the player has none, they say, \"Go fish!\" and the player who made the request draws the top card of the stock and places it in their hand.\n\nIf a player gets one or more cards of the named rank that was asked for, they are entitled to ask the same or another player for a card. The player can ask for the same card or a different one. So long as the player succeeds in getting cards (makes a catch), their turn continues. When a player makes a catch, they must reveal the card so that the catch is verified. If a player gets the fourth card of a book, the player shows all four cards, places them on the table face up in front of everyone, and plays again.\n\nIf the player goes fishing without \"making a catch\" (does not receive a card he asked for), the turn passes to the left.\n\nThe game ends when all thirteen books have been won. The winner is the player with the most books. During the game, if a player is left without cards, they may (when it's their turn to play), draw from the stock and then ask for cards of that rank. If there are no cards left in the stock, they are out of the game.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 0, \"winner\": null, \"is_over\": false, \"books\": [0, 0, 0, 0], \"facedown_cards\": {\"stock_size\": 28}}, \"players\": [{\"public\": {\"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"Q\"}, {\"rank\": \"Q\"}, {\"rank\": \"8\"}, {\"rank\": \"Q\"}]}, \"faceup_cards\": {\"books\": []}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 7}, \"faceup_cards\": {\"books\": []}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 7}, \"faceup_cards\": {\"books\": []}}, {\"public\": {}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {\"books\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"Q\"}}, \"msg\": \"Player 0 decides to: request-(target_player: 3, rank: Q)\"}, {\"type\": \"info\", \"msg\": \"Player 0 takes an action: {'action': 'request', 'args': {'target_player': 3, 'rank': 'Q'}}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 requests rank Q from Player 3.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 says 'Go Fish!'.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws 3 from stock.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 1.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"3\"}, \"id\": 2}, \"msg\": \"Player 1 decides to: request-(target_player: 0, rank: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 1 takes an action: {'action': 'request', 'args': {'target_player': 0, 'rank': '3'}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 requests rank 3 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gives 1 card(s) to Player 1.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"9\"}, \"id\": 3}, \"msg\": \"Player 1 decides to: request-(target_player: 0, rank: 9)\"}, {\"type\": \"info\", \"msg\": \"Player 1 takes an action: {'action': 'request', 'args': {'target_player': 0, 'rank': '9'}, 'id': 3}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 requests rank 9 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 says 'Go Fish!'.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws 4 from stock.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 2.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"K\"}, \"id\": 0}, \"msg\": \"Player 2 decides to: request-(target_player: 0, rank: K)\"}, {\"type\": \"info\", \"msg\": \"Player 2 takes an action: {'action': 'request', 'args': {'target_player': 0, 'rank': 'K'}, 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 requests rank K from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 gives 1 card(s) to Player 2.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 0, \"rank\": \"7\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: request-(target_player: 0, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 2 takes an action: {'action': 'request', 'args': {'target_player': 0, 'rank': '7'}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 requests rank 7 from Player 0.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 says 'Go Fish!'.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 draws 6 from stock.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"5\"}, \"id\": 9}, \"msg\": \"Player 3 decides to: request-(target_player: 1, rank: 5)\"}, {\"type\": \"info\", \"msg\": \"Player 3 takes an action: {'action': 'request', 'args': {'target_player': 1, 'rank': '5'}, 'id': 9}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 requests rank 5 from Player 1.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 says 'Go Fish!'.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 draws 8 from stock.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player is Player 0.\", \"role\": null}], \"legal_actions\": [{\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"Q\"}, \"id\": 0}, {\"action\": \"request\", \"args\": {\"target_player\": 1, \"rank\": \"8\"}, \"id\": 1}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"Q\"}, \"id\": 2}, {\"action\": \"request\", \"args\": {\"target_player\": 2, \"rank\": \"8\"}, \"id\": 3}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"Q\"}, \"id\": 4}, {\"action\": \"request\", \"args\": {\"target_player\": 3, \"rank\": \"8\"}, \"id\": 5}, {\"action\": \"draw\", \"id\": 6}]}\n\nExplanation: \n{\"common\": \"A dictionary containing common information about the game shared among all players.\", \"common.num_players\": \"The total number of players in the game.\", \"common.current_player\": \"The index of the player whose turn it is currently.\", \"common.winner\": \"The index of the winning player or null if the game is not over yet.\", \"common.is_over\": \"A boolean indicating if the game is over.\", \"common.books\": \"A list where each element represents the number of books completed by each player.\", \"common.facedown_cards.stock_size\": \"The number of cards remaining in the stock pile.\", \"players\": \"A list of dictionaries containing information about each player.\", \"players[i].public.current_player\": \"A boolean indicating whether the player 'i' is the current player.\", \"players[i].facedown_cards.hand\": \"The list of cards currently held by the player 'i', visible only to the player.\", \"players[i].facedown_cards.hand_size\": \"The number of cards in player's 'i' hand, visible to other players but without specific card details.\", \"players[i].faceup_cards.books\": \"A list of completed books by the player 'i', visible to all players.\", \"recent_history\": \"A list of actions, information and turn end logs for tracking the history of recent events and moves in the game.\", \"recent_history[i].type\": \"The type of entry in the recent history: 'action', 'info', or 'turn_end'.\", \"recent_history[i].player_id\": \"The ID of the player associated with the recent history entry, applicable for actions or turn end.\", \"recent_history[i].action\": \"A dictionary detailing the action taken by a player, if the entry type is 'action'.\", \"recent_history[i].msg\": \"A text message providing details about the history entry.\", \"recent_history[i].role\": \"The role or source of the information in the history entry, typically null.\", \"legal_actions\": \"A list of legal actions that the current player can take, including action type and arguments.\", \"legal_actions[i].action\": \"The type of action that can be taken, such as 'request' or 'draw'.\", \"legal_actions[i].args\": \"Additional arguments required for taking the action, if applicable.\", \"legal_actions[i].id\": \"A unique identifier for the action within the legal actions list.\"}",
    "policy_list": [
        "**Memory Tracking**\nKeep track of all requests and responses involving ranks including opponent responses of 'Go Fish'. Use this information to deduce potential cards in opponents' hands and avoid redundant requests.",
        "**Priority on Completing Books**\nFocus on asking for cards of ranks that the AI has multiple cards of in its hand, prioritizing those with three cards first, then two.",
        "**Opponent Weakness Exploitation**\nIdentify opponents who appear to be low in cards or targeted by other players frequently and focus on them for requests, as they might have fewer options to respond with a 'Go Fish\u2019.",
        "**Balanced Stock Utilization**\nWhen drawing from the stock, balance picks by assessing game history and adjusting probability estimations of completing books, drawing cards that make completing books more probable."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common info\n    num_players = state['common']['num_players']\n    current_player_index = state['common']['current_player']\n    stock_size = state['common']['facedown_cards']['stock_size']\n    player = state['players'][current_player_index]\n    \n    # Calculate opponent status based on history\n    history = state['recent_history']\n    opponent_knowledge = {i: {} for i in range(num_players) if i != current_player_index}\n    \n    for entry in history:\n        if entry['type'] == 'info' and \"requests rank\" in entry['msg']:\n            requester = entry['player_id']\n            if requester != current_player_index:\n                target_message = entry['msg']\n                rank_requested = target_message.split(\"requests rank \")[1][0]\n                \n                if \"Go Fish\" in target_message:\n                    for opponent_index in opponent_knowledge:\n                        if opponent_index == requester:\n                            if rank_requested not in opponent_knowledge[opponent_index]:\n                                opponent_knowledge[opponent_index][rank_requested] = False\n                else:\n                    if rank_requested in opponent_knowledge[requester]:\n                        opponent_knowledge[requester][rank_requested] = True\n\n    # Hand analysis\n    player_ranks = {}\n    for card in player['facedown_cards']['hand']:\n        if card['rank'] not in player_ranks:\n            player_ranks[card['rank']] = 0\n        player_ranks[card['rank']] += 1\n    \n    # Analyzing provided action\n    if action['action'] == 'request':\n        rank = action['args']['rank']\n        target_player = action['args']['target_player']\n        \n        if target_player in opponent_knowledge and rank in opponent_knowledge[target_player]:\n            if opponent_knowledge[target_player][rank]:\n                result_score = 0.9\n            else:\n                result_score = 0.3\n        else:\n            if rank in player_ranks:\n                result_score = 0.7 + (0.1 * player_ranks[rank])\n            else:\n                result_score = 0.2\n\n    elif action['action'] == 'draw':\n        result_score = (1 - stock_size / 52) * 0.5\n\n    else:\n        result_score = 0.5\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract common game information\n    num_players = state['common']['num_players']\n    current_player_idx = state['common']['current_player']\n    is_game_over = state['common']['is_over']\n    books = state['common']['books']\n    stock_size = state['common']['facedown_cards']['stock_size']\n    \n    # Extract current player's information\n    current_player = state['players'][current_player_idx]\n    player_hand = current_player['facedown_cards']['hand']\n    \n    # Initialize the score\n    result_score = 0.0\n    \n    # If game is over, the score is 0 because no actions can be taken\n    if is_game_over:\n        return result_score\n    \n    # Create a frequency dictionary for the current player's hand\n    rank_count = {}\n    for card in player_hand:\n        rank = card['rank']\n        if rank in rank_count:\n            rank_count[rank] += 1\n        else:\n            rank_count[rank] = 1\n    \n    # Unpack action details\n    action_type = action['action']\n    \n    # Prioritize actions that help complete books\n    if action_type == 'request':\n        target_rank = action['args']['rank']\n        \n        # Checking if the action rank helps complete a book\n        if target_rank in rank_count:\n            # More cards of the same rank, higher the priority (score)\n            count = rank_count[target_rank]\n            if count == 3:\n                # Best case: asking for a card to complete a book\n                result_score += 0.8\n            elif count == 2:\n                # Asking for a card that helps move toward completing a book\n                result_score += 0.5\n            else:\n                # Any additional card is less key to creating a book\n                result_score += 0.2\n    \n    # Consider the cards remaining in stock\n    if stock_size > 0:\n        # Account for actions when stock cards are still available\n        result_score += (0.2 * (stock_size / 52))\n    \n    # Normalize the result score to ensure it's within [0, 1]\n    result_score = min(max(result_score, 0.0), 1.0)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common game information\n    num_players = state['common']['num_players']\n    current_player = state['common']['current_player']\n    total_books = sum(state['common']['books'])\n    stock_size = state['common']['facedown_cards']['stock_size']\n    recent_history = state['recent_history']\n    \n    # Extract player hands and books\n    players = state['players']\n    current_hand_size = len(players[current_player]['facedown_cards']['hand'])\n\n    # Determine potential targets and their weakness level\n    player_weakness = [0] * num_players\n    for history in recent_history:\n        if history['type'] == 'action' and history['action']['action'] == 'request':\n            target_player = history['action']['args']['target_player']\n            player_weakness[target_player] += 1\n            if history['msg'].endswith(\"says 'Go Fish!'.\"):\n                player_weakness[target_player] -= 0.5  # Adjust slightly down if they successfully avoided giving a card\n\n    # Calculate a base score based on completing more books\n    base_score = (sum(players[current_player]['faceup_cards']['books']) + 1) / (13 + 1)\n    \n    # Calculate additional potential based on hand size and stock size\n    hand_score = current_hand_size / (stock_size + 1) if stock_size > 0 else 0\n\n    # Focus on the targeted player by \"Opponent Weakness Exploitation\"\n    target_player = action['args']['target_player']\n    weakness_score = (player_weakness[target_player] / 5.0) if player_weakness[target_player] > 0 else 0\n    \n    # Combine all scores into a continuous reward function ranging from 0 to 1\n    result_score = 0.2 * base_score + 0.5 * weakness_score + 0.3 * hand_score\n    result_score = min(1.0, max(0.0, result_score))  # Ensure the score is within [0, 1]\n    \n    return result_score\n",
        "\ndef score(state: dict, action_id: int) -> float:\n    # Extract the relevant parts of the state\n    common = state['common']\n    current_player_id = common['current_player']\n    num_players = common['num_players']\n    books = common['books']\n    stock_size = common['facedown_cards']['stock_size']\n    players = state['players']\n    recent_history = state['recent_history']\n    legal_actions = state['legal_actions']\n\n    # Get the current player's data\n    current_player = players[current_player_id]\n    current_hand = current_player['facedown_cards']['hand']\n    current_books = current_player['faceup_cards']['books']\n    num_current_books = len(current_books)\n    \n    # Get the action from the ID\n    action = next((a for a in legal_actions if a['id'] == action_id), None)\n    if not action:\n        return 0.0\n\n    # Assess the probability of forming a book based on the current action\n    if action['action'] == 'request':\n        requested_rank = action['args']['rank']\n        cards_of_rank = sum(1 for card in current_hand if card['rank'] == requested_rank)\n        \n        # Score based on the number of cards of the requested rank\n        base_probability = {0: 0.1, 1: 0.3, 2: 0.6, 3: 0.9}.get(cards_of_rank, 0.0)\n    \n    elif action['action'] == 'draw':\n        # Drawing from the stock should balance completion of books\n        base_probability = 0.5\n\n    # Adjust the probability based on the game progress\n    progress_factor = num_current_books / 13.0 if stock_size else num_current_books / 13.0 + (1 - stock_size / 52.0)\n\n    # Calculate the result score\n    result_score = min(1.0, max(0.0, base_probability * (1 + progress_factor) / 2))\n    \n    return result_score\n"
    ]
}