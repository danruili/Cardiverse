{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in the player\u2019s hand.\n\n### Card Values/scoring\n\nThe first player to get rid of all of their cards wins the game. The winner collects from each other player the pip value of the cards remaining in that player\u2019s hand. Aces count 1 point each, face cards count 10 points each, and other cards count their pip value.\n\n### The Deal\n\nDeal seven cards to each player, one at a time, starting with the player to the left. The remainder of the pack is placed face down in the center of the table to form the stock.\n\n### The Play\n\nThe player to the left of the dealer leads and may play any card. Each player in turn must either follow suit or play a card of the same rank as the card lead.\n\nExample: If the jack of diamonds is lead, each player must play a diamond or any jack.\n\nIf a player cannot follow suit or play a card of the same rank, the player must draw from the stock until a play can be made. When the stock is exhausted and the player cannot play, the player simply does not play to the trick.\n\nThe highest card of the suit lead wins each trick.\u00a0The winner of each trick leads next.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 24}, \"faceup_cards\": {\"trick\": [{\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}], \"lead_card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}}, \"players\": [{\"public\": {\"played_cards\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}], \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"3\", \"suit\": \"diamonds\"}]}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card: K-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays K-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card: 3-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 3-diamonds\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick resolved. Player 3 wins the trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(card: A-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays A-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"A-clubs is the lead card of this trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, \"id\": 0}, \"msg\": \"Player 1 decides to: play-(card: 4-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 4-clubs\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"spades\"}}, \"id\": 0}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players participating in the game. This is set to 4 in this game instance.\", \"current_player\": \"The index of the player whose turn it is to act. Currently, it is player 2's turn.\", \"winner\": \"The index of the winning player if the game is over; otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game is over. Set to false as the game is still ongoing.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck that have not been drawn or dealt. There are 24 cards left.\"}, \"faceup_cards\": {\"trick\": \"A list of cards that have been played in the current trick. The cards include 'A of clubs' and '4 of clubs' in the current trick.\", \"lead_card\": \"The card that led the current trick. It is 'A of clubs'.\"}}, \"players\": [{\"public\": {\"played_cards\": \"A list of cards that the player has played publicly. For player 0, these are 'J of diamonds' and 'A of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"The number of cards in the player's hand that are not visible to others. Player 0 has 5 cards.\"}}, {\"public\": {\"played_cards\": \"Player 1's publicly played cards: 'A of diamonds' and '4 of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 1 has 5 cards in their hand.\"}}, {\"public\": {\"played_cards\": \"Player 2 has played 'K of diamonds'.\"}, \"current_player\": \"A boolean indicating that this player, player 2, is the current player.\", \"facedown_cards\": {\"hand\": \"A list of cards that player 2 possesses but are not visible to others, which include: 'A of spades', 'J of spades', '4 of spades', '7 of hearts', '10 of hearts', and '6 of hearts'.\"}}, {\"public\": {\"played_cards\": \"Player 3 has played '3 of diamonds'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 3 has 6 cards in their hand.\"}}], \"recent_history\": \"A list of recent actions or events in the game, including the player who acted, the action type (play, info, turn end), and details about each action. This includes actions like plays of specific cards and resolution of tricks.\", \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": \"The card that player 2 can legally play next based on the game rules. It specifies 'A of spades' as a valid play.\"}}]}",
    "policy_list": [
        "**Play High Cards Early**\nIn applying the 'Play High Cards Early' strategy, prioritize playing high-value cards at the earliest possible occasion in a trick when following suit or playing the same rank, particularly when the 'Risk of Drawing Penalty' is low, suggesting the hand is capable of responding to a variety of lead suits without needing to draw. Additionally, enhance your lead decisions by capitalizing on high 'Winning Potential' whenever your high cards are likely to win tricks and subsequently lead in a control-advantageous manner based on the 'Lead Control Value.' This involves playing a high card if the hand diversity allows flexibility and the hand contains cards which are currently among the highest in the context of gameplay, reducing the overall point count while setting strategic leads for future rounds.",
        "**Enhanced Lead Strategy with Diverse Suit Selection**\nWhen you have control of the lead, first assess your 'Hand Diversity Score'. If your hand is diverse, prioritize leading with a suit that you have fewer cards in, as it maximizes the disruption potential for opponents who may have less coverage in that suit. Additionally, factor in the 'Lead Control Value' to determine if leading with a new suit can pave the way for future favorable plays. This is particularly critical when the available stock is low, and you anticipate others may lack the necessary suit cards to follow, forcing them into unfavorable draw scenarios. By strategically leveraging both the diversity of your hand and the control value, you optimize the opportunity to gain a superior position throughout the subsequent plays.",
        "**Track Played Cards**\nTo refine the strategy of 'Track Played Cards,' integrate it dynamically with game state metrics: Use Hand Diversity Score to track card counts effectively, apply Winning Potential to decide when to employ suits/ranks that have likely remaining advantageous cards, and use Lead Control Value to determine when leading a favorable suit could provide strategic superiority. Prioritize tracking towards game's end when opponents' options significantly narrow.",
        "**Refined Delay Playing Aces**\nHold onto Aces until reaching a mid-to-late game stage, identified when fewer than half of the stock remains or multiple players have reduced card counts in hand. Prioritize using Aces when the 'Lead Control Value' is high, indicating an opportunity to control the suit selection for subsequent rounds, and maximize their trick-winning potential without jeopardizing winning higher-value cards. Additionally, consider the 'Hand Diversity Score'; a lower score indicates a more uniform hand, making it preferable to use the Ace to secure a trick while maintaining other suit options. Lastly, if the 'Winning Potential' is high with an Ace due to absence of higher cards of the same suit among visible plays, use it to seize the lead effectively."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card):\n        \"\"\"Helper function to determine the value of a card.\"\"\"\n        rank_to_value = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8,\n                         '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10}\n        return rank_to_value.get(card['rank'], 0)\n\n    def hand_value(hand):\n        \"\"\"Calculate the total value of a hand.\"\"\"\n        return sum(card_value(card) for card in hand)\n\n    def high_card_count(hand):\n        \"\"\"Count the number of high-value cards (10, J, Q, K) in hand.\"\"\"\n        high_cards = {'10', 'J', 'Q', 'K'}\n        return sum(1 for card in hand if card['rank'] in high_cards)\n    \n    def is_lead_card_high(card, current_trick, num_playing_players):\n        \"\"\"Determine if this card has potential to win the trick.\"\"\"\n        # If it is of the same suit as the lead card, check if it's the highest\n        lead_card = state['common']['faceup_cards']['lead_card']\n        if card['suit'] == lead_card['suit']:\n            lead_rank_value = card_value(lead_card)\n            current_trick_values = [card_value(trick_card) for trick_card in current_trick if trick_card['suit'] == lead_card['suit']]\n            return card_value(card) > lead_rank_value and card_value(card) >= max(current_trick_values, default=0)\n        return False\n\n    # Extract relevant information\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['facedown_cards']['hand']\n    current_trick = state['common']['faceup_cards']['trick']\n    num_players = state['common']['num_players']\n    \n    # Action proposed card\n    proposed_card = action['args']['card']\n\n    # Initial score based on playing high cards early strategy\n    initial_score = 0.3 + 0.2 * (high_card_count(player_hand) / len(player_hand))\n\n    # Increase score if the proposed card will win the lead\n    if is_lead_card_high(proposed_card, current_trick, num_players):\n        initial_score += 0.3\n\n    # Consider hand flexibility and number of cards\n    hand_value_score = (52 - hand_value(player_hand)) / 52\n    flexibility_score = len(set(card['suit'] for card in player_hand)) / 4\n\n    # Combine a weighted score to return continuity\n    result_score = initial_score * 0.4 + hand_value_score * 0.3 + flexibility_score * 0.2\n\n    # Ensure the score is within 0 to 1 range\n    return max(0.0, min(1.0, result_score))\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Calculate a reward value indicating the probability of winning the game \n    based on the current game state and planned action.\n    \n    :param state: The current state of the game.\n    :param action: The planned action to evaluate.\n    :return: A float score between 0.0 and 1.0, indicating the estimated \n             probability of winning.\n    \"\"\"\n\n    def hand_diversity_score(hand):\n        \"\"\"Calculates the diversity of the hand based on suits.\"\"\"\n        suits = [card['suit'] for card in hand]\n        unique_suits = len(set(suits))\n        return unique_suits / max(1, len(hand))  # Avoid division by zero\n\n    def lead_control_value(lead_card, hand):\n        \"\"\"Determine the control value of taking the lead with current hand.\"\"\"\n        leading_suit = lead_card['suit']\n        # Count number of cards in the leading suit\n        count_lead_suit_cards = sum(1 for card in hand if card['suit'] == leading_suit)\n        return 1 - (count_lead_suit_cards / len(hand))\n\n    # Extract current player information\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n    hand = current_player['facedown_cards']['hand']\n\n    # Extract relevant game state information\n    lead_card = state['common']['faceup_cards']['lead_card']\n    deck_size = state['common']['facedown_cards']['deck_size']\n\n    # Extract the specific action card\n    action_card = action['args']['card']\n    \n    # Calculate hand diversity score\n    diversity_score = hand_diversity_score(hand)\n    \n    # Calculate control value if not following the suit\n    if action_card['suit'] != lead_card['suit']:\n        control_value = lead_control_value(lead_card, hand)\n    else:\n        control_value = 0  # No gain in control as we follow suit\n    \n    # Adjust control value based on deck size\n    if deck_size < 10:\n        control_value *= 1.5  # Increase the impact as the deck size is lower\n\n    # Combine the scores\n    result_score = 0.5 * diversity_score + 0.5 * control_value\n\n    # Normalize the result to [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n    \n    def card_value(card):\n        rank = card['rank']\n        if rank in ['J', 'Q', 'K']:\n            return 10\n        elif rank == 'A':\n            return 1\n        else:\n            return int(rank)\n        \n    # Calculate played cards\n    played_suits_ranks = [card for player in state['players'] for card in player['public']['played_cards']]\n    played_suits, played_ranks = zip(*[(card['suit'], card['rank']) for card in played_suits_ranks]) if played_suits_ranks else ([], [])\n    played_suits_count = np.unique(played_suits, return_counts=True)[1] if played_suits else np.array([])\n    \n    current_player_hand = state['players'][state['common']['current_player']]['facedown_cards']['hand']\n    \n    # Calculate hand diversity\n    hand_suits = [card['suit'] for card in current_player_hand]\n    unique_suits, suits_count = np.unique(hand_suits, return_counts=True)\n    hand_diversity_score = len(unique_suits) / 4.0\n    \n    # Calculate winning potential\n    high_cards_count = sum(1 for card in current_player_hand if card_value(card) >= 10)\n    winning_potential = high_cards_count / len(current_player_hand) if current_player_hand else 0\n    \n    # Determine Lead Control Value\n    lead_suit = state['common']['faceup_cards']['lead_card']['suit']\n    has_lead_suit = any(card['suit'] == lead_suit for card in current_player_hand)\n    lead_control_value = 1.0 if not has_lead_suit else 0.5\n    \n    # Calculate remaining cards reward\n    other_players_hand_sizes = sum(player['facedown_cards']['hand_size'] for player in state['players'] if player != state['players'][state['common']['current_player']])\n    remaining_cards_reward = 1.0 - (len(current_player_hand) / (len(current_player_hand) + other_players_hand_sizes))\n    \n    # Calculate the final score\n    result_score = 0.25 * hand_diversity_score + 0.35 * winning_potential + 0.25 * lead_control_value + 0.15 * remaining_cards_reward\n    result_score = max(0, min(result_score, 1))  # Ensure result is in [0, 1]\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract common state details\n    common_state = state[\"common\"]\n    num_players = common_state[\"num_players\"]\n    current_player = common_state[\"current_player\"]\n    deck_size = common_state[\"facedown_cards\"][\"deck_size\"]\n    lead_card = common_state[\"faceup_cards\"][\"lead_card\"]\n    trick = common_state[\"faceup_cards\"][\"trick\"]\n    \n    # Extract current player's state\n    player_state = state[\"players\"][current_player]\n    hand = player_state[\"facedown_cards\"][\"hand\"]\n    \n    # Legal action details (assume single action to play the given card)\n    legal_action = state[\"legal_actions\"][0]\n    play_card = legal_action[\"args\"][\"card\"]\n    \n    # Check if the action involves playing an Ace\n    if play_card[\"rank\"] == \"A\":\n        is_playing_ace = True\n    else:\n        is_playing_ace = False\n    \n    # Calculate factors affecting reward\n    # Stock size to determine if we are in mid-to-late game stage\n    stock_threshold = (52 - 7 * num_players) // 2\n    \n    is_mid_to_late_game = deck_size < stock_threshold\n    \n    # Calculate hand diversity - based on distribution of suits\n    suit_count = {}\n    for card in hand:\n        suit = card[\"suit\"]\n        if suit not in suit_count:\n            suit_count[suit] = 0\n        suit_count[suit] += 1\n    hand_diversity_score = len(suit_count) / len(hand)\n    \n    # Calculate lead control value\n    # Simulate control by checking if playing this card would lead the trick\n    lead_control_value = 0\n    if play_card[\"suit\"] == lead_card[\"suit\"]:\n        lead_value = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}\n        max_card = max(trick, key=lambda x: lead_value[x[\"rank\"]])\n        if lead_value[play_card[\"rank\"]] > lead_value[max_card[\"rank\"]]:\n            lead_control_value = 1\n    \n    # Calculate winning potential for an Ace\n    winning_potential = 0\n    if is_playing_ace:\n        # Check visibility of higher cards\n        suits_in_trick = [card[\"suit\"] for card in trick]\n        if play_card[\"suit\"] not in suits_in_trick:\n            winning_potential = 1\n    \n    # Calculate reward based on policy\n    result_score = 0.5  # Base probability\n    if is_playing_ace:\n        if is_mid_to_late_game or len(state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]) <= 3:\n            result_score += 0.1  # Increase chance if we are in mid-to-late stage\n        result_score += 0.2 * lead_control_value  # Higher if can control\n        result_score += 0.3 * (1 - hand_diversity_score)  # Higher if low hand diversity\n        result_score += 0.2 * winning_potential  # Higher if good winning potential\n\n    # Ensure result_score is between 0 and 1\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n"
    ]
}