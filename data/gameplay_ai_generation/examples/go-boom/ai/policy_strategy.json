{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in the player\u2019s hand.\n\n### Card Values/scoring\n\nThe first player to get rid of all of their cards wins the game. The winner collects from each other player the pip value of the cards remaining in that player\u2019s hand. Aces count 1 point each, face cards count 10 points each, and other cards count their pip value.\n\n### The Deal\n\nDeal seven cards to each player, one at a time, starting with the player to the left. The remainder of the pack is placed face down in the center of the table to form the stock.\n\n### The Play\n\nThe player to the left of the dealer leads and may play any card. Each player in turn must either follow suit or play a card of the same rank as the card lead.\n\nExample: If the jack of diamonds is lead, each player must play a diamond or any jack.\n\nIf a player cannot follow suit or play a card of the same rank, the player must draw from the stock until a play can be made. When the stock is exhausted and the player cannot play, the player simply does not play to the trick.\n\nThe highest card of the suit lead wins each trick.\u00a0The winner of each trick leads next.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 24}, \"faceup_cards\": {\"trick\": [{\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}], \"lead_card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}}, \"players\": [{\"public\": {\"played_cards\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}], \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"3\", \"suit\": \"diamonds\"}]}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card: K-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays K-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card: 3-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 3-diamonds\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick resolved. Player 3 wins the trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(card: A-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays A-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"A-clubs is the lead card of this trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, \"id\": 0}, \"msg\": \"Player 1 decides to: play-(card: 4-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 4-clubs\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"spades\"}}, \"id\": 0}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players participating in the game. This is set to 4 in this game instance.\", \"current_player\": \"The index of the player whose turn it is to act. Currently, it is player 2's turn.\", \"winner\": \"The index of the winning player if the game is over; otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game is over. Set to false as the game is still ongoing.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck that have not been drawn or dealt. There are 24 cards left.\"}, \"faceup_cards\": {\"trick\": \"A list of cards that have been played in the current trick. The cards include 'A of clubs' and '4 of clubs' in the current trick.\", \"lead_card\": \"The card that led the current trick. It is 'A of clubs'.\"}}, \"players\": [{\"public\": {\"played_cards\": \"A list of cards that the player has played publicly. For player 0, these are 'J of diamonds' and 'A of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"The number of cards in the player's hand that are not visible to others. Player 0 has 5 cards.\"}}, {\"public\": {\"played_cards\": \"Player 1's publicly played cards: 'A of diamonds' and '4 of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 1 has 5 cards in their hand.\"}}, {\"public\": {\"played_cards\": \"Player 2 has played 'K of diamonds'.\"}, \"current_player\": \"A boolean indicating that this player, player 2, is the current player.\", \"facedown_cards\": {\"hand\": \"A list of cards that player 2 possesses but are not visible to others, which include: 'A of spades', 'J of spades', '4 of spades', '7 of hearts', '10 of hearts', and '6 of hearts'.\"}}, {\"public\": {\"played_cards\": \"Player 3 has played '3 of diamonds'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 3 has 6 cards in their hand.\"}}], \"recent_history\": \"A list of recent actions or events in the game, including the player who acted, the action type (play, info, turn end), and details about each action. This includes actions like plays of specific cards and resolution of tricks.\", \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": \"The card that player 2 can legally play next based on the game rules. It specifies 'A of spades' as a valid play.\"}}]}",
    "policy_list": [
        "**Play High Cards Early**\nWhen following suit or playing the same rank, prioritize playing high-value cards, especially face cards. This can reduce your point count faster in case others win tricks.",
        "**Lead with Diverse Suits When Winning**\nWhen leading a trick after winning the previous one, choose a suit that hasn't been played much or at all yet. This can force other players to draw from the stock if they cannot follow.",
        "**Track Played Cards**\nKeep a mental note or simple tracking of the cards that have already been played. Use this information to make tactical decisions on which cards to play or lead.",
        "**Delay Playing Aces**\nKeep Aces in your hand until there\u2019s significant progress in the game with reduced stock and played cards. Use them to win crucial tricks later in the game when players have fewer cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card):\n        ''' Helper function to assign values to cards. '''\n        rank_value = {'A': 1, 'J': 10, 'Q': 10, 'K': 10}\n        if card['rank'] in rank_value:\n            return rank_value[card['rank']]\n        return int(card['rank'])\n    \n    # Extract necessary information from state and action\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n    current_hand = current_player['facedown_cards']['hand']\n    play_card = action['args']['card']\n\n    # Calculate hand metrics\n    total_hand_value = sum(card_value(card) for card in current_hand)\n    num_cards_in_hand = len(current_hand)\n   \n    # Determine the card to be played value\n    played_card_value = card_value(play_card)\n\n    # Advantage calculation based on high-value card play\n    high_card_advantage = played_card_value / 10  # high-value face cards give more potential winning opportunity\n\n    # Base score components\n    hand_size_factor = 1 - (num_cards_in_hand / 7)  # if fewer cards, closer to winning\n    potential_point_reduction = played_card_value / total_hand_value\n\n    # Calculate score as a combination of these factors\n    result_score = high_card_advantage * 0.4 + potential_point_reduction * 0.4 + hand_size_factor * 0.2\n\n    # Ensure score is bounded between 0 and 1\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    \"\"\"\n    Calculate the action-value score based on the current game state and the planned game action.\n    \n    Arguments:\n    state -- a dictionary representing the current state of the game.\n    action -- a string representing the planned action to be evaluated.\n    \n    Return:\n    result_score -- a float between 0 and 1 representing the probability of winning the game based on the action.\n    \"\"\"\n    # Extract relevant information from the state\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_player_hand = state[\"players\"][current_player_index][\"facedown_cards\"][\"hand\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # Extract cards that have already been played in the trick and lead card\n    played_trick = state[\"common\"][\"faceup_cards\"][\"trick\"]\n    lead_card = state[\"common\"][\"faceup_cards\"][\"lead_card\"]\n\n    # Count suits and ranks in the trick to identify diversity\n    suit_count = {}\n    for card in played_trick:\n        suit_count[card[\"suit\"]] = suit_count.get(card[\"suit\"], 0) + 1\n\n    # Define a function for card value\n    def card_value(card):\n        if card[\"rank\"].isdigit():\n            return int(card[\"rank\"])\n        elif card[\"rank\"] == \"A\":\n            return 1\n        else:\n            return 10\n        \n    # Get the card details for the current planned action\n    action_card = None\n    for la in legal_actions:\n        if la[\"action\"] == \"play\" and la[\"args\"][\"card\"][\"rank\"] == action.split(\"-\")[0] and la[\"args\"][\"card\"][\"suit\"] == action.split(\"-\")[1]:\n            action_card = la[\"args\"][\"card\"]\n            break\n\n    if action_card is None:\n        return 0.0\n\n    # Heuristic 1: Prefer playing highest possible card\n    card_score = card_value(action_card) / 10.0\n    \n    # Heuristic 2: Prefer leading with less-used suits if starting a trick\n    suit_diversity_score = 1.0 / (suit_count.get(action_card[\"suit\"], 0) + 1)\n    \n    # Considering if the action_card diverges from the lead_card suit\n    is_leading_trick = (lead_card is None)\n    if is_leading_trick:\n        suit_diversity_score *= 2  # Boost if initiating with minimal suit repeats\n\n    # Combine heuristics into a single reward score\n    result_score = 0.5 * card_score + 0.5 * suit_diversity_score\n    result_score = max(0.0, min(1.0, result_score))  # Ensure it's within [0, 1]\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n    \n    # Track played cards\n    played_cards = set()\n    for player in state['players']:\n        for card in player['public']['played_cards']:\n            played_cards.add((card['rank'], card['suit']))\n\n    # Validate the action\n    if action['action'] == 'play':\n        card_to_play = action['args']['card']\n        if (card_to_play['rank'], card_to_play['suit']) in played_cards:\n            return 0  # Trying to play an already played card\n\n    # Card value calculation inline\n    remaining_cards_value = 0\n    for card in current_player['facedown_cards']['hand']:\n        if card['rank'] in ['J', 'Q', 'K', '10']:\n            remaining_cards_value += 10\n        elif card['rank'] == 'A':\n            remaining_cards_value += 1\n        else:\n            remaining_cards_value += int(card['rank'])\n\n    # Adjust value for action\n    if action['action'] == 'play':\n        if card_to_play['rank'] in ['J', 'Q', 'K', '10']:\n            remaining_cards_value -= 10\n        elif card_to_play['rank'] == 'A':\n            remaining_cards_value -= 1\n        else:\n            remaining_cards_value -= int(card_to_play['rank'])\n        # Decrease hand size\n        player_hand_size = current_player['facedown_cards']['hand_size'] - 1\n    else:\n        player_hand_size = current_player['facedown_cards']['hand_size']\n\n    # Heuristic: A player is likely to win if their hand value is low, and they have fewer cards\n    if state['common']['is_over']:\n        return 1 if state['common']['winner'] == current_player_index else 0\n\n    # The action-value based on hand size and card values\n    result_score = (1 - remaining_cards_value / 50) * (1 - player_hand_size / 7)\n\n    # Ensuring the result score is within the range of 0 to 1\n    result_score = max(0, min(1, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract relevant game state information\n    common_state = state[\"common\"]\n    players_state = state[\"players\"]\n    current_player_index = common_state[\"current_player\"]\n    current_player_state = players_state[current_player_index]\n    \n    # Extract relevant player and card information\n    legal_cards = [act[\"args\"][\"card\"] for act in state[\"legal_actions\"] if act[\"action\"] == \"play\"]\n    hand_cards = current_player_state[\"facedown_cards\"][\"hand\"]\n    played_cards = current_player_state[\"public\"][\"played_cards\"]\n    trick_cards = common_state[\"faceup_cards\"][\"trick\"]\n    lead_card = common_state[\"faceup_cards\"][\"lead_card\"]\n    deck_size = common_state[\"facedown_cards\"][\"deck_size\"]\n    \n    # Determine if the action involves playing an Ace and evaluate the policy\n    if action == \"play\" and action in legal_cards:\n        card_to_play = action[\"args\"][\"card\"]\n        is_ace_play = card_to_play[\"rank\"] == \"A\"\n        \n        # Check the current game progress\n        number_of_played_cards = sum(player[\"facedown_cards\"][\"hand_size\"] for player in players_state)\n        \n        # Calculate a basic score factor:\n        # - Avoid playing Aces too early as per the policy\n        ace_penalty_factor = 1\n        if is_ace_play and deck_size > 10:\n            ace_penalty_factor = 0.5  # Penalize if playing Ace when the stock/deck is still sizable\n        \n        # Basic winning estimation strategy\n        # Reward for leading trick: +0.1 if winning card of the same suit\n        lead_factor = 0.0\n        if card_to_play[\"suit\"] == lead_card[\"suit\"]:\n            lead_factor = 0.1 if card_to_play[\"rank\"] == \"A\" or card_to_play[\"rank\"] == \"K\" else 0.05\n        \n        # Reward smaller hand size (closer to winning)\n        hand_size_factor = 1 - (len(hand_cards) / 7)  # Assuming max hand size of 7\n        \n        # Reward based on the number of played cards:\n        progress_factor = number_of_played_cards / 36  # Estimate of total play, doesn't exceed 1\n        \n        # Calculate score with weights for each factors\n        result_score = (0.4 * ace_penalty_factor +\n                        0.3 * lead_factor +\n                        0.2 * hand_size_factor +\n                        0.1 * progress_factor)\n    else:\n        # If action doesn't involve playing a card, return minimum score\n        result_score = 0.0\n    \n    return result_score\n"
    ]
}