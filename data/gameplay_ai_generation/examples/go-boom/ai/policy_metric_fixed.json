{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in the player\u2019s hand.\n\n### Card Values/scoring\n\nThe first player to get rid of all of their cards wins the game. The winner collects from each other player the pip value of the cards remaining in that player\u2019s hand. Aces count 1 point each, face cards count 10 points each, and other cards count their pip value.\n\n### The Deal\n\nDeal seven cards to each player, one at a time, starting with the player to the left. The remainder of the pack is placed face down in the center of the table to form the stock.\n\n### The Play\n\nThe player to the left of the dealer leads and may play any card. Each player in turn must either follow suit or play a card of the same rank as the card lead.\n\nExample: If the jack of diamonds is lead, each player must play a diamond or any jack.\n\nIf a player cannot follow suit or play a card of the same rank, the player must draw from the stock until a play can be made. When the stock is exhausted and the player cannot play, the player simply does not play to the trick.\n\nThe highest card of the suit lead wins each trick.\u00a0The winner of each trick leads next.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 24}, \"faceup_cards\": {\"trick\": [{\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}], \"lead_card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}}, \"players\": [{\"public\": {\"played_cards\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}], \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"3\", \"suit\": \"diamonds\"}]}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card: K-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays K-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card: 3-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 3-diamonds\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick resolved. Player 3 wins the trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(card: A-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays A-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"A-clubs is the lead card of this trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, \"id\": 0}, \"msg\": \"Player 1 decides to: play-(card: 4-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 4-clubs\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"spades\"}}, \"id\": 0}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players participating in the game. This is set to 4 in this game instance.\", \"current_player\": \"The index of the player whose turn it is to act. Currently, it is player 2's turn.\", \"winner\": \"The index of the winning player if the game is over; otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game is over. Set to false as the game is still ongoing.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck that have not been drawn or dealt. There are 24 cards left.\"}, \"faceup_cards\": {\"trick\": \"A list of cards that have been played in the current trick. The cards include 'A of clubs' and '4 of clubs' in the current trick.\", \"lead_card\": \"The card that led the current trick. It is 'A of clubs'.\"}}, \"players\": [{\"public\": {\"played_cards\": \"A list of cards that the player has played publicly. For player 0, these are 'J of diamonds' and 'A of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"The number of cards in the player's hand that are not visible to others. Player 0 has 5 cards.\"}}, {\"public\": {\"played_cards\": \"Player 1's publicly played cards: 'A of diamonds' and '4 of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 1 has 5 cards in their hand.\"}}, {\"public\": {\"played_cards\": \"Player 2 has played 'K of diamonds'.\"}, \"current_player\": \"A boolean indicating that this player, player 2, is the current player.\", \"facedown_cards\": {\"hand\": \"A list of cards that player 2 possesses but are not visible to others, which include: 'A of spades', 'J of spades', '4 of spades', '7 of hearts', '10 of hearts', and '6 of hearts'.\"}}, {\"public\": {\"played_cards\": \"Player 3 has played '3 of diamonds'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 3 has 6 cards in their hand.\"}}], \"recent_history\": \"A list of recent actions or events in the game, including the player who acted, the action type (play, info, turn end), and details about each action. This includes actions like plays of specific cards and resolution of tricks.\", \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": \"The card that player 2 can legally play next based on the game rules. It specifies 'A of spades' as a valid play.\"}}]}",
    "policy_list": [
        "**Hand Diversity Score**\nMeasures how diverse the hand is in terms of suits and ranks. A more diverse hand provides more flexibility in following suits or playing high cards of the same rank, which can increase the chance of winning a trick. The score decreases as the hand becomes more homogenized in suit or reliant on specific ranks.",
        "**Winning Potential**\nEvaluates the potential to win the current trick based on the highest card of the led suit or matching rank available in hand. Higher values are assigned when the player holds the highest or near-highest cards of the current suit or matching ranks, indicating a greater chance of winning the trick.",
        "**Risk of Drawing Penalty**\nAssesses the likelihood and potential cost of needing to draw from the stock before being able to play. Factors include current hand suit distribution and remaining stock size. A high value indicates a greater risk of drawing, thus delaying the chance to play cards and decreasing the likelihood of winning the game quickly.",
        "**Lead Control Value**\nDetermines the strategic advantage gained by leading the next trick. Evaluates the current hand's capability to take control by winning the trick and thereby allowing the selection of a beneficial suit or rank for the next round. The value is higher when the player has cards that can be well-utilized to set up favorable subsequent plays."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract the current player's hand\n    current_player_index = state['common']['current_player']\n    current_player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    \n    # Compute Hand Diversity Score\n    suits = [card['suit'] for card in current_player_hand]\n    ranks = [card['rank'] for card in current_player_hand]\n    unique_suits = len(set(suits))\n    unique_ranks = len(set(ranks))\n\n    max_hand_diversity = 4  # ideally one card from each suit\n    diversity_score = (unique_suits / max_hand_diversity) * 0.5\n    \n    # Account for flexibility provided by ranks\n    max_rank_diversity = 13  # ideally one card of each rank\n    rank_diversity_score = (unique_ranks / max_rank_diversity) * 0.5\n    \n    # Combining both diversity scores\n    hand_diversity_score = diversity_score + rank_diversity_score\n    \n    # Evaluate game action - check if it's a card playing action\n    action_score = 0.0\n    if 'args' in action and 'card' in action['args']:\n        legal_action_card = action['args']['card']\n        lead_card = state['common']['faceup_cards']['lead_card']\n        \n        can_win_trick = False\n        # Check if lead_card is not None\n        if lead_card is not None:\n            can_win_trick = (legal_action_card['suit'] == lead_card['suit'] and legal_action_card['rank'] > lead_card['rank'])\n\n        # If the action card can win the trick, increase the score\n        action_score = 0.3 if can_win_trick else 0.0\n\n    # Estimate a continuous probability between 0 and 1\n    result_score = hand_diversity_score + action_score\n    \n    # Clamping between 0 and 1 as probabilities\n    result_score = max(0.0, min(result_score, 1.0))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card):\n        \"\"\"Assign a numerical value to a card for comparison.\"\"\"\n        values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\n                  'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return values[card['rank']]\n\n    def evaluate_hand_strength(lead_card, hand):\n        \"\"\"Evaluate the strength of player's hand relative to the lead card.\"\"\"\n        lead_suit = lead_card['suit']\n        lead_value = card_value(lead_card)\n        matching_suit_cards = [card for card in hand if card['suit'] == lead_suit]\n        \n        if not matching_suit_cards:\n            # If no matching suit, evaluate based on value\n            hand_values = [card_value(card) for card in hand]\n            return max(hand_values, default=0) / 14\n            \n        highest_matching_card = max(matching_suit_cards, key=card_value)\n        return card_value(highest_matching_card) / 14\n    \n    # Retrieve necessary information from the state\n    current_player_index = state['common']['current_player']\n    lead_card = state['common']['faceup_cards']['lead_card']\n    player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    \n    # Check if action involves playing a card\n    if action.get(\"action\") == \"play\" and \"card\" in action:\n        played_card = action[\"card\"]\n    else:\n        # If no specific card is indicated (such as drawing), exit evaluation\n        return 0.0\n    \n    played_card_value = card_value(played_card)\n\n    # Calculate the maximum card value of the same suit as the lead to compare potential to win the trick\n    lead_suit = lead_card['suit']\n    trick_cards = state['common']['faceup_cards']['trick']\n    same_suit_cards = [card for card in trick_cards if card['suit'] == lead_suit]\n    highest_card_in_trick = max(same_suit_cards, key=card_value, default={'rank': '0', 'suit': lead_suit})\n    highest_value_in_trick = card_value(highest_card_in_trick)\n\n    # Calculate winning potential based on the suggested action\n    if played_card['suit'] == lead_suit:\n        # Check how strong the played card is in relation to the current trick cards of the same suit\n        action_potential = played_card_value / 14\n    else:\n        # If playing a card without matching the suit, its potential is less likely to win the trick\n        action_potential = played_card_value / 28  # Divided by 28 to de-emphasize non-suit cards\n\n    # Determine the hand strength based on available high-ranking cards\n    hand_strength = evaluate_hand_strength(lead_card, player_hand)\n    \n    # Combine both factors to get a final score\n    result_score = 0.7 * action_potential + 0.3 * hand_strength\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    lead_card = state['common']['faceup_cards'].get('lead_card', None)\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['facedown_cards'].get('hand', [])\n    deck_size = state['common']['facedown_cards']['deck_size']\n\n    # Calculate hand strength by suit distribution and playable cards\n    suit_count = {}\n    for card in player_hand:\n        suit = card['suit']\n        if suit is not None:\n            suit_count[suit] = suit_count.get(suit, 0) + 1\n\n    lead_suit = lead_card['suit'] if lead_card is not None else None\n    penalty = 0 if lead_suit in suit_count and suit_count[lead_suit] > 0 else 1\n    hand_strength = max(suit_count.values(), default=0) - penalty\n\n    # Calculate drawing risk\n    playable_cards = {\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"}\n    cards_can_play = [card for card in player_hand if card['rank'] in playable_cards]\n    drawing_risk = len(player_hand) / (len(cards_can_play) + 1) * (deck_size / 52)\n\n    # Calculate raw score with hand strength affecting drawing risk impact\n    raw_score = max(0, 1 - (drawing_risk / 10) + (hand_strength / 10))\n\n    # Ensure the score is in bounds\n    result_score = max(0, min(1, raw_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    if 'args' not in action or 'card' not in action['args']:\n        # Handle the case where the action does not involve playing a card\n        return 0.0\n\n    player_index = state['common']['current_player']\n    player_hand = state['players'][player_index]['facedown_cards']['hand']\n    lead_card = state['common']['faceup_cards']['lead_card']\n    action_card = action['args']['card']\n    \n    # Convert rank to values for easier comparison\n    rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                   '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n    # Calculate base control potential\n    def calculate_card_value(card):\n        return rank_values[card['rank']]\n    \n    action_card_value = calculate_card_value(action_card)\n\n    can_control = False\n    lead_control_value = 0.2  # Initialize default lead control value\n\n    if lead_card is not None:\n        lead_card_value = calculate_card_value(lead_card)\n        # Check if the action card can win over the lead card in the current suit\n        can_control = (action_card['suit'] == lead_card['suit'] and \n                       action_card_value > lead_card_value)\n    else:\n        # If there's no lead card, the player automatically gains control when playing\n        can_control = True\n\n    # Gain based on leading trick next\n    if can_control:\n        lead_control_value = 0.5\n\n    # Factor in how many strong cards are left in the hand that follow the current suit\n    if lead_card is not None:\n        strong_cards = sum(1 for card in player_hand \n                           if card['suit'] == action_card['suit'] and \n                           calculate_card_value(card) > lead_card_value)\n    else:\n        strong_cards = sum(1 for card in player_hand \n                           if card['suit'] == action_card['suit'] and \n                           calculate_card_value(card) > action_card_value)\n\n    lead_control_value += 0.1 * strong_cards\n\n    # Normalize based on number of cards in hand (fewer cards is better)\n    hand_size = len(player_hand)\n    hand_advantage = 1 / (hand_size + 1)\n\n    # We weight these components differently to create a continuous output\n    result_score = 0.5 * lead_control_value + 0.5 * hand_advantage\n\n    # Ensure the result is a float between 0 and 1\n    result_score = min(1.0, max(0.0, result_score))\n    \n    return result_score\n"
    ]
}