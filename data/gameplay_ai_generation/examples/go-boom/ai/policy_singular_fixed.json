{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe goal is to be the first player to get rid of all the cards in the player\u2019s hand.\n\n### Card Values/scoring\n\nThe first player to get rid of all of their cards wins the game. The winner collects from each other player the pip value of the cards remaining in that player\u2019s hand. Aces count 1 point each, face cards count 10 points each, and other cards count their pip value.\n\n### The Deal\n\nDeal seven cards to each player, one at a time, starting with the player to the left. The remainder of the pack is placed face down in the center of the table to form the stock.\n\n### The Play\n\nThe player to the left of the dealer leads and may play any card. Each player in turn must either follow suit or play a card of the same rank as the card lead.\n\nExample: If the jack of diamonds is lead, each player must play a diamond or any jack.\n\nIf a player cannot follow suit or play a card of the same rank, the player must draw from the stock until a play can be made. When the stock is exhausted and the player cannot play, the player simply does not play to the trick.\n\nThe highest card of the suit lead wins each trick.\u00a0The winner of each trick leads next.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 24}, \"faceup_cards\": {\"trick\": [{\"rank\": \"A\", \"suit\": \"clubs\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}], \"lead_card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}}, \"players\": [{\"public\": {\"played_cards\": [{\"rank\": \"J\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"A\", \"suit\": \"diamonds\"}, {\"rank\": \"4\", \"suit\": \"clubs\"}]}, \"facedown_cards\": {\"hand_size\": 5}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"K\", \"suit\": \"diamonds\"}], \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"4\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"10\", \"suit\": \"hearts\"}, {\"rank\": \"6\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"played_cards\": [{\"rank\": \"3\", \"suit\": \"diamonds\"}]}, \"facedown_cards\": {\"hand_size\": 6}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 2 decides to: play-(card: K-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays K-diamonds\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"3\", \"suit\": \"diamonds\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play-(card: 3-diamonds)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 3-diamonds\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick resolved. Player 3 wins the trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"clubs\"}}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(card: A-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays A-clubs\", \"role\": null}, {\"type\": \"info\", \"msg\": \"A-clubs is the lead card of this trick.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"4\", \"suit\": \"clubs\"}}, \"id\": 0}, \"msg\": \"Player 1 decides to: play-(card: 4-clubs)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 4-clubs\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": {\"rank\": \"A\", \"suit\": \"spades\"}}, \"id\": 0}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players participating in the game. This is set to 4 in this game instance.\", \"current_player\": \"The index of the player whose turn it is to act. Currently, it is player 2's turn.\", \"winner\": \"The index of the winning player if the game is over; otherwise, it is null.\", \"is_over\": \"A boolean indicating whether the game is over. Set to false as the game is still ongoing.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck that have not been drawn or dealt. There are 24 cards left.\"}, \"faceup_cards\": {\"trick\": \"A list of cards that have been played in the current trick. The cards include 'A of clubs' and '4 of clubs' in the current trick.\", \"lead_card\": \"The card that led the current trick. It is 'A of clubs'.\"}}, \"players\": [{\"public\": {\"played_cards\": \"A list of cards that the player has played publicly. For player 0, these are 'J of diamonds' and 'A of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"The number of cards in the player's hand that are not visible to others. Player 0 has 5 cards.\"}}, {\"public\": {\"played_cards\": \"Player 1's publicly played cards: 'A of diamonds' and '4 of clubs'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 1 has 5 cards in their hand.\"}}, {\"public\": {\"played_cards\": \"Player 2 has played 'K of diamonds'.\"}, \"current_player\": \"A boolean indicating that this player, player 2, is the current player.\", \"facedown_cards\": {\"hand\": \"A list of cards that player 2 possesses but are not visible to others, which include: 'A of spades', 'J of spades', '4 of spades', '7 of hearts', '10 of hearts', and '6 of hearts'.\"}}, {\"public\": {\"played_cards\": \"Player 3 has played '3 of diamonds'.\"}, \"facedown_cards\": {\"hand_size\": \"Player 3 has 6 cards in their hand.\"}}], \"recent_history\": \"A list of recent actions or events in the game, including the player who acted, the action type (play, info, turn end), and details about each action. This includes actions like plays of specific cards and resolution of tricks.\", \"legal_actions\": [{\"action\": \"play\", \"args\": {\"card\": \"The card that player 2 can legally play next based on the game rules. It specifies 'A of spades' as a valid play.\"}}]}",
    "policy_list": [
        "**Optimal Card Play**\nThis strategy involves selecting the optimal card to play based on the current game state. The AI will prioritize playing high cards within the led suit if it has them, to try and win the trick. If it has no cards in the led suit, it will try to play a card of the same rank as the leading card. If it cannot play any card, it will draw from the stock until it can make a move. If the AI wins a trick and needs to lead, it will lead with a low-value card to preserve high-value cards for future potential tricks where winning could be more advantageous."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Evaluates a given game state and action to return a probability estimate of winning.\n\n    Parameters:\n    state (dict): The current game state.\n    action (dict): The proposed game action.\n\n    Returns:\n    float: Estimated probability of winning, ranging from 0 to 1.\n    \"\"\"\n    # Fix the access to the hand and lead card information\n    hand = state['players'][state['common']['current_player']]['facedown_cards']['hand']\n    lead_card = state['common']['faceup_cards'].get('lead_card')\n    deck_size = state['common']['facedown_cards']['deck_size']\n\n    # Extract details from the action\n    if action['action'] == 'draw':\n        # Handle the case when the action is drawing a card\n        return 0.4  # Example score for draw action, adjust based on strategy\n    else:\n        proposed_card = action['args']['card']\n\n    # Initialize the estimated score\n    result_score = 0.5  # Base neutral probability\n\n    # Evaluation logic\n    # 1. Check if the proposed card can win the current trick\n    if lead_card and proposed_card['suit'] == lead_card['suit']:\n        # Playing a high-value card is beneficial if it follows the suit\n        high_card_ranks = ['K', 'Q', 'J', '10', '9']\n        if proposed_card['rank'] in high_card_ranks:\n            result_score += 0.2\n    elif lead_card and proposed_card['rank'] == lead_card['rank']:\n        # Matching the rank could disrupt opponents' strategy\n        result_score += 0.1\n\n    # 2. Consider the rank value towards game-winning potential\n    if proposed_card['rank'] in ['A', 'K', 'Q']:\n        result_score += 0.1  # Favorable high-point cards\n\n    # 3. Check overall hand strategy\n    high_card_ranks = ['K', 'Q', 'J', '10', '9']\n    non_lead_high_card_count = sum(1 for card in hand if card['rank'] in high_card_ranks and (lead_card is None or card['suit'] != lead_card['suit']))\n    if non_lead_high_card_count >= 3:\n        result_score -= 0.1  # Unplayed high cards could mean losing potential in future\n\n    # 4. Consider game completion based on deck size and tricks\n    remaining_tricks = deck_size // 4\n    current_hand_size = len(hand)\n    if current_hand_size - remaining_tricks <= 0:\n        result_score += 0.1  # Favor potential to finish the game quicker\n\n    # Ensure result_score is bounded between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n"
    ]
}