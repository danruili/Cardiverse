{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Energy Pool:** Total mana chips contributed by all players, representing communal magical energy.\n- **Sacred Board:** Displays all runes (cards) played, grouped by the four elements (Earth, Fire, Water, Air).\n- **Turn Information:** Displays current player's turn and any special actions performed.\n- **Player Order:** Sequence in which players take turns, visible to all.\n\n#### **Player-Specific Information:**\n- **Public**:\n    - **Visible Runes:** Runes played on the sacred board.\n    - **Confluences:** Completed Confluence Spells and drawn new runes.\n- **Private**:\n    - **Player Hand:** Runes (cards) held by a player, only visible to them.\n    - **Mana Chips:** Number of mana chips in the player's possession.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A}.\n- **Elemental Suit:** One of {Earth, Fire, Water, Air}.\n- **Special Abilities:**\n  - **Seven Rune:** Allows merge actions or special plays.\n  - **Fusion Power:** Created through merge actions, can be part of a Confluence Spell.\n\n#### **Card States:**\n- **Face-down:** Cards in the player\u2019s hand.\n- **Face-up:** Runes played on the sacred board.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard deck with 52 runes (4 elements, 13 ranks each, following traditional card ranks).\n\n#### **Initial Dealing:**\n- Each player receives 7 runes.\n- Players with fewer cards must ante an additional mana chip.\n- Remaining runes form a mystical reserve (deck).\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Rune:**\n   - Place a rune in alignment with previously played runes of the same element by rank or complete a sequence.\n2. **Use Merge Action:**\n   - Merge two adjacent runes of the same element to form a more powerful rune.\n   - Outcome: Draw a new rune from the mystical reserve.\n3. **Create a Confluence Spell:**\n   - Complete a sequence of four consecutive runes including a merged rune. \n   - Outcome: Reinforce ability to draw and play more effectively.\n4. **Aid an Opponent:**\n   - Donate a rune to another player strategically.\n   - Pre-requisite: Consider impact on game balance.\n5. **Pass:**\n   - Skip playing a rune.\n   - Consequence: Contribute mana chips to the pool for missed opportunities.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player to the left of the dealer initiates the round.\n2. Players take turns in clockwise order.\n3. Each turn involves:\n   - Playing a rune or using a merge action.\n   - Optionally assisting another player with a rune donation.\n   - Passing if no action is chosen, incurring a mana penalty.\n4. Play continues until:\n   - A player successfully merges all their runes.\n   - OR a player reaches 100 points due to unplayed runes.\n\n#### **Winning Conditions:**\n- The game ends when a player's score surpasses 100.\n- The player with the fewest points is the overall winner, declared Master Sorcerer.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Passing Penalty:** Missing a chance to play or merge costs players three mana chips.\n- **Seven Rune Penalty:** Missing the opportunity with a seven rune incurs a five-mana chip distribution to players holding adjacent key runes.\n- **Cooperative Dynamics:** Players can form temporary alliances to balance game dynamics and hinder leading players.\n- **Deck Reformation:** If runes are depleted, discarded runes (except those on the board) are reshuffled back into the reserve.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Their own runes.\n- The sacred board's top rune.\n- Confluence Spells completed by all players.\n- Mana chips in the energy pool.\n- Actions performed by other players.\n\n#### **Hidden Information:**\n- Runes in the reserve deck.\n- Runes held by opponents.\n- Other players' mana chip totals.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Players accrue points from unplayed runes left in their hand at round\u2019s end.\n- Each unplayed rune is worth 1 point.\n\n#### **Winning Player\u2019s Reward:**\n- The player with the lowest score after 100 points is reached is declared the Master Sorcerer, winning the game.\n\n#### **Tie Resolution:**\n- If the score is tied, the player with fewer unplayed runes in hand at the end is declared the winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"energy_pool\": 4, \"sacred_board\": {\"Earth\": [], \"Fire\": [], \"Water\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"Air\": []}, \"player_order\": [0, 1, 2, 3], \"faceup_cards\": {\"completed_confluences\": []}, \"facedown_cards\": {\"mystical_reserve_size\": 24}}, \"players\": [{\"public\": {\"visible_runes\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"8\", \"element\": \"Air\"}, {\"rank\": \"6\", \"element\": \"Water\"}, {\"rank\": \"5\", \"element\": \"Air\"}, {\"rank\": \"J\", \"element\": \"Air\"}, {\"rank\": \"K\", \"element\": \"Fire\"}, {\"rank\": \"5\", \"element\": \"Water\"}, {\"rank\": \"3\", \"element\": \"Air\"}, {\"rank\": \"Q\", \"element\": \"Air\"}], \"mana_chips\": 5}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 21}, \"msg\": \"Player 2 decides to: aid_opponent-(target_player: 0, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 2 aids Player 0 with 9-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 3}, \"id\": 23}, \"msg\": \"Player 3 decides to: aid_opponent-(target_player: 2, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 aids Player 2 with 3-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"pass\", \"args\": {}, \"id\": 35}, \"msg\": \"Player 0 decides to: pass-()\"}, {\"type\": \"info\", \"msg\": \"Player 0 passes and contributes 3 mana chips to the energy pool.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 1.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 1}, \"id\": 14}, \"msg\": \"Player 1 decides to: aid_opponent-(target_player: 2, rune_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 1 aids Player 2 with Q-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 2.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_rune\", \"args\": {\"rune_idx\": 0}, \"id\": 0}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 2}, \"id\": 1}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 3}, \"id\": 2}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 4}, \"id\": 3}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 6}, \"id\": 4}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 7}, \"id\": 5}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 2]}, \"id\": 6}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 3]}, \"id\": 7}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 6]}, \"id\": 8}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 7]}, \"id\": 9}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 3]}, \"id\": 10}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 6]}, \"id\": 11}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 7]}, \"id\": 12}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 6]}, \"id\": 13}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 7]}, \"id\": 14}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [6, 7]}, \"id\": 15}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [1, 5]}, \"id\": 16}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 0}, \"id\": 17}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 0}, \"id\": 18}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 0}, \"id\": 19}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 1}, \"id\": 20}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 1}, \"id\": 21}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 1}, \"id\": 22}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 2}, \"id\": 23}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 2}, \"id\": 24}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 2}, \"id\": 25}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 26}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 3}, \"id\": 27}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 3}, \"id\": 28}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 4}, \"id\": 29}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 4}, \"id\": 30}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 4}, \"id\": 31}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 5}, \"id\": 32}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 5}, \"id\": 33}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 5}, \"id\": 34}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 6}, \"id\": 35}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 6}, \"id\": 36}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 6}, \"id\": 37}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 7}, \"id\": 38}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 7}, \"id\": 39}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 7}, \"id\": 40}, {\"action\": \"pass\", \"args\": {}, \"id\": 41}]}\n\nExplanation: \n{\"common\": \"An object holding shared game state information relevant to all players.\", \"common.num_players\": \"The number of players participating in the game. It is an integer.\", \"common.current_player\": \"The index of the player whose turn it currently is. It is an integer.\", \"common.winner\": \"Indicates the index of the winning player if the game is over, or null if there is no winner yet.\", \"common.is_over\": \"A boolean indicating whether the game has concluded.\", \"common.energy_pool\": \"Tracks the total number of mana chips contributed to the central pool. It is an integer.\", \"common.sacred_board\": \"An object storing arrays of runes currently played on the board, categorized by their elements (Earth, Fire, Water, Air).\", \"common.player_order\": \"A list of player indices representing the order of play.\", \"common.faceup_cards\": \"An object containing notably visible cards on the board.\", \"common.faceup_cards.completed_confluences\": \"An array tracking the indices of players who completed confluence spells.\", \"common.facedown_cards\": \"An object containing cards that are not currently visible to players.\", \"common.facedown_cards.mystical_reserve_size\": \"An integer representing the number of remaining runes in the mystical reserve deck.\", \"players\": \"An array containing objects for each player, which includes public and private information.\", \"players[].public.visible_runes\": \"An array containing runes that the player has played visibly on the board.\", \"players[].public.confluences\": \"An array listing the confluence spells a player has completed.\", \"players[].public.current_player\": \"A boolean indicating true when this is the current player's turn.\", \"players[].private.hand\": \"An array representing the runes currently held in the player's hand.\", \"players[].private.mana_chips\": \"The number of mana chips currently held by the player.\", \"recent_history\": \"A list of recent actions and events in the game, with details like type, player, action, and message.\", \"recent_history[].type\": \"The category of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player associated with the event or action.\", \"recent_history[].action\": \"Details of a specific action taken, including type and any arguments.\", \"recent_history[].msg\": \"A message string describing the action or event for human readability.\", \"legal_actions\": \"An array of dictionaries detailing all legal actions available to the current player.\", \"legal_actions[].action\": \"The type of action that can be taken ('play_rune', 'merge_runes', etc.).\", \"legal_actions[].args\": \"Arguments necessary for the action, specific to the type of action, such as 'rune_idx' or 'target_player'.\", \"legal_actions[].id\": \"A unique identifier for the legal action, usually for tracking purposes.\"}",
    "policy_list": [
        "**Efficient Rune Management Refined**\nTo refine the Efficient Rune Management strategy, the AI should prioritize playing high-ranking runes when the 'Board Alignment Potential' is high, especially if these actions avoid common penalties and align on the sacred board. Additionally, the AI should identify critical moments defined by high 'Merge Opportunity Scores' to focus on merging and potentially drawing new runes, or by maximizing 'Confluence Spell Readiness'. The strategic emphasis should be on forming Confluence Spells when the player's hand aligns well with the current board state, utilizing 'Mana Efficiency Ratios' to ensure low penalty costs through efficient rune management. By dynamically assessing these metrics, the AI can effectively mitigate penalty points and enhance its competitive positioning.",
        "**Refined Strategic Rune Donation**\nThe refined strategy involves the AI player evaluating critical moments for donating a rune using the following criteria: 1) An opponent is visibly close to completing a Confluence Spell, either by having three consecutive runes visible on the board or based on their play patterns suggesting readiness. 2) The AI\u2019s hand includes runes less useful for its own current strategy, as indicated by a low Board Alignment Potential or Merge Opportunity Score. 3) The AI needs to balance the game dynamics due to an opponent's lead or seeks to form an alliance, considering the Mana Efficiency Ratio impact of holding versus donating. 4) The strategic donation should aim to either delay an opponent's advantage or build diplomatic leverage in future rounds. By integrating these decision points with game metrics, more precise and impactful rune donations can be made.",
        "**Clarified Aggressive Merge and Draw Strategy**\nThe refined 'Aggressive Merge and Draw' strategy should focus on two main elements: maximizing the Merge Opportunity Score by continuously seeking opportunities to merge adjacent runes of the same element, and enhancing Board Alignment Potential by ensuring that newly drawn runes from merges optimize upcoming turns. When the Merge Opportunity Score is high (indicating two or more adjacent matching runes in hand), prioritize merge actions. High Board Alignment Potential suggests a promising opportunity to play these new runes immediately or to complete sequences, justifying the aggressive draw. In all cases, merging should be conditioned on not jeopardizing the current balance with the possibility of aiding opponents unless it indirectly benefits the AI's strategic pressure on gameplay.",
        "**Controlled Passing for Mana Management**\nTo implement 'Controlled Passing for Mana Management,' the AI player should pass when the Board Alignment Potential is low, indicating few play options with the current hand; the Merge Opportunity Score does not suggest merging options on the next turn; and the Confluence Spell Readiness is far from completion, recommending focus on maintaining versatile cards. Conditioned by the Mana Efficiency Ratio, the AI player should weigh the cost of penalties against the potential to improve hand composition by conserving current runes for future strategic plays. Overall, passing should focus on maintaining card diversity and maximizing future game positioning, rather than immediate rewards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def board_alignment_potential(hand, board):\n        \"\"\"Estimate potential to align hand runes with the board.\"\"\"\n        alignment_score = 0\n        for rune in hand:\n            element_board = board.get(rune['element'], [])\n            # Check if by playing this rune we complete or start a sequence\n            if any(rune['rank'] == board_rune['rank'] for board_rune in element_board):\n                alignment_score += 0.1\n            elif not element_board:  # If empty, it's a good start\n                alignment_score += 0.05\n        return alignment_score\n\n    def merge_opportunity_score(hand):\n        \"\"\"Estimate potential to merge runes together.\"\"\"\n        mergeable_count = 0\n        elements_in_hand = {}\n        for rune in hand:\n            elements_in_hand.setdefault(rune['element'], []).append(rune['rank'])\n        for element_ranks in elements_in_hand.values():\n            for rank in set(element_ranks):\n                if element_ranks.count(rank) > 1:\n                    mergeable_count += 1\n        return min(mergeable_count * 0.1, 1.0)  # Cap at max score of 1.0\n\n    def confluence_spell_readiness(hand):\n        \"\"\"Estimate readiness for forming a confluence spell.\"\"\"\n        sequence_count = 0\n        elements_in_hand = {}\n        for rune in hand:\n            elements_in_hand.setdefault(rune['element'], []).append(rune['rank'])\n        for ranks in elements_in_hand.values():\n            ranks = sorted(ranks)\n            for i in range(len(ranks) - 3):\n                if ranks[i:i+4] == list(range(ranks[i], ranks[i]+4)):\n                    sequence_count += 1\n        return min(sequence_count * 0.2, 1.0)  # Cap at max score of 1.0\n\n    def mana_efficiency(mana_chips):\n        \"\"\"Estimate penalty avoidance ability based on mana chips.\"\"\"\n        return max(0, min(1, 1 - (mana_chips * 0.01)))  # The more mana, lower penalty cost\n\n    # Parsing input state\n    current_player_data = state['players'][state['common']['current_player']]['private']\n    player_hand = current_player_data['hand']\n    player_mana_chips = current_player_data['mana_chips']\n    sacred_board = state['common']['sacred_board']\n\n    # Calculate different strategic metrics\n    alignment_potential = board_alignment_potential(player_hand, sacred_board)\n    merge_score = merge_opportunity_score(player_hand)\n    confluence_ready = confluence_spell_readiness(player_hand)\n    mana_eff = mana_efficiency(player_mana_chips)\n\n    # Combine metrics to estimate winning probability\n    # Assume a naive linear combination for simplicity:\n    result_score = alignment_potential * 0.3 + merge_score * 0.3 + confluence_ready * 0.2 + mana_eff * 0.2\n\n    # Ensure result is within bounds\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def evaluate_hand_strength(hand):\n        # Basic evaluation logic: More varied suiting and rank implies higher potential\n        ranks = {card['rank'] for card in hand}\n        elements = {card['element'] for card in hand}\n        return len(ranks) * len(elements)\n\n    def evaluate_merge_potential(hand):\n        # Check for adjacent ranks for same element to estimate merge potential\n        elements = {}\n        for card in hand:\n            elements.setdefault(card['element'], []).append(card['rank'])\n        \n        merge_score = 0\n        for el in elements:\n            ranks = sorted(elements[el], key=lambda r: 'A23456789JQK'.index(r))\n            for i in range(len(ranks) - 1):\n                if 'A23456789JQK'.index(ranks[i+1]) - 'A23456789JQK'.index(ranks[i]) == 1:\n                    merge_score += 1\n        \n        return merge_score\n\n    # Extract game state information\n    current_player = state['common']['current_player']\n    player_info = state['players'][current_player]\n    hand = player_info['private']['hand']\n\n    # Evaluate the current player's hand strength and potential for merging\n    hand_strength = evaluate_hand_strength(hand)\n    merge_potential = evaluate_merge_potential(hand)\n\n    # Calculate probability adjustment based on action type\n    action_type = action['action']\n    action_probability = 0.0\n\n    # Simple heuristic values for potential action impacts\n    if action_type == 'play_rune':\n        action_probability = 0.25\n    elif action_type == 'merge_runes':\n        action_probability = 0.4\n    elif action_type == 'aid_opponent':\n        target_player = action['args']['target_player']\n        if state['players'][target_player]['public']['visible_runes']:\n            action_probability = 0.2\n        else:\n            action_probability = -0.1  # Discourage aiding too much if no immediate visible need\n    elif action_type == 'pass':\n        action_probability = -0.3  # Discourage passing as it increases the energy pool\n\n    # Hand strength and merge potential influence\n    strength_score = hand_strength / 13.0  # normalize based on maximum rank diversity\n    merge_score = merge_potential / 5.0   # arbitrary normalization, adjust based on game balance\n\n    # This scoring combines strategy potential with immediate action impact\n    result_score = max(0.0, min(1.0, action_probability + 0.3 * strength_score + 0.4 * merge_score))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract entities\n    current_player_index = state[\"common\"][\"current_player\"]\n    player_state = state[\"players\"][current_player_index]\n    hand_runes = player_state[\"private\"][\"hand\"]\n    mana_chips = player_state[\"private\"][\"mana_chips\"]\n    sacred_board = state[\"common\"][\"sacred_board\"]\n    mystical_reserve_size = state[\"common\"][\"facedown_cards\"][\"mystical_reserve_size\"]\n    \n    action_type = action[\"action\"]\n    action_args = action[\"args\"]\n\n    # Initialize the score\n    result_score = 0.0\n\n    # Calculate the Merge Opportunity Score\n    merge_opportunity = 0\n    if action_type == \"merge_runes\" and action_args:\n        rune_indices = action_args[\"rune_indices\"]\n        runes_in_action = [hand_runes[i] for i in rune_indices]\n        # Check if runes can be merged\n        if len(runes_in_action) == 2 and runes_in_action[0][\"element\"] == runes_in_action[1][\"element\"]:\n            merge_opportunity += 1\n\n    # Calculate Board Alignment Potential\n    board_alignment_potential = 0\n    if action_type == \"play_rune\":\n        rune_idx = action_args[\"rune_idx\"]\n        if rune_idx < len(hand_runes):\n            rune_to_play = hand_runes[rune_idx]\n            # Check if playing rune aligns with the board for sequences\n            element = rune_to_play[\"element\"]\n            rank = rune_to_play[\"rank\"]\n            if element in sacred_board and rank not in [r[\"rank\"] for r in sacred_board[element]]:\n                board_alignment_potential += 1\n\n    # Include some heuristic based on mana and reserve size\n    mana_factor = mana_chips / 20.0  \n    reserve_factor = mystical_reserve_size / 52.0\n\n    # Calculate the final score with weights\n    score_from_merge = merge_opportunity * 0.4\n    score_from_alignment = board_alignment_potential * 0.3\n    score_from_mana = mana_factor * 0.2\n    score_from_reserve = reserve_factor * 0.1\n\n    result_score = score_from_merge + score_from_alignment + score_from_mana + score_from_reserve\n\n    # Ensure the score is between 0 and 1\n    result_score = min(max(result_score, 0.0), 1.0)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    player = state['players'][state['common']['current_player']]\n    player_hand = player['private']['hand']\n    energy_pool = state['common']['energy_pool']\n    sacred_board = state['common']['sacred_board']\n    current_mana = player['private']['mana_chips']\n    \n    # Calculate Board Alignment Potential\n    alignment_score = 0\n    for rune in player_hand:\n        if rune['rank'] in [r['rank'] for r in sacred_board[rune['element']]]:\n            alignment_score += 1\n    board_alignment_potential = alignment_score / len(player_hand) if player_hand else 0\n\n    # Calculate Merge Opportunity Score\n    merge_count = 0\n    element_groups = {}\n    for rune in player_hand:\n        if rune['element'] not in element_groups:\n            element_groups[rune['element']] = []\n        element_groups[rune['element']].append(rune['rank'])\n    \n    for ranks in element_groups.values():\n        unique_ranks = set(ranks)\n        merge_count += len(ranks) - len(unique_ranks)\n    \n    potential_multiples = sum(len(ranks) for ranks in element_groups.values() if len(ranks) > 1)\n    merge_opportunity_score = merge_count / potential_multiples if potential_multiples else 0\n\n    # Calculate Confluence Spell Readiness\n    readiness_score = 0\n    for element, runes in sacred_board.items():\n        unique_ranks = set(rune['rank'] for rune in runes)\n        readiness_score += min(len(unique_ranks) / 4, 1)\n    confluence_spell_readiness = readiness_score / 4\n\n    # Calculate Mana Efficiency Ratio\n    mana_efficiency_ratio = current_mana / (current_mana + energy_pool) if energy_pool else 1\n\n    # Calculate Pass Score\n    pass_score = (\n        1 - board_alignment_potential\n    ) * (\n        1 - merge_opportunity_score\n    ) * (\n        1 - confluence_spell_readiness\n    ) * mana_efficiency_ratio\n\n    # Determine score\n    if action['action'] == 'pass':\n        result_score = pass_score\n    else:\n        # Placeholder logic for other types of actions\n        result_score = 0.5  # Needs further elaboration based on game specifics\n\n    return result_score\n"
    ]
}