{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Energy Pool:** Total mana chips contributed by all players, representing communal magical energy.\n- **Sacred Board:** Displays all runes (cards) played, grouped by the four elements (Earth, Fire, Water, Air).\n- **Turn Information:** Displays current player's turn and any special actions performed.\n- **Player Order:** Sequence in which players take turns, visible to all.\n\n#### **Player-Specific Information:**\n- **Public**:\n    - **Visible Runes:** Runes played on the sacred board.\n    - **Confluences:** Completed Confluence Spells and drawn new runes.\n- **Private**:\n    - **Player Hand:** Runes (cards) held by a player, only visible to them.\n    - **Mana Chips:** Number of mana chips in the player's possession.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A}.\n- **Elemental Suit:** One of {Earth, Fire, Water, Air}.\n- **Special Abilities:**\n  - **Seven Rune:** Allows merge actions or special plays.\n  - **Fusion Power:** Created through merge actions, can be part of a Confluence Spell.\n\n#### **Card States:**\n- **Face-down:** Cards in the player\u2019s hand.\n- **Face-up:** Runes played on the sacred board.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard deck with 52 runes (4 elements, 13 ranks each, following traditional card ranks).\n\n#### **Initial Dealing:**\n- Each player receives 7 runes.\n- Players with fewer cards must ante an additional mana chip.\n- Remaining runes form a mystical reserve (deck).\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Rune:**\n   - Place a rune in alignment with previously played runes of the same element by rank or complete a sequence.\n2. **Use Merge Action:**\n   - Merge two adjacent runes of the same element to form a more powerful rune.\n   - Outcome: Draw a new rune from the mystical reserve.\n3. **Create a Confluence Spell:**\n   - Complete a sequence of four consecutive runes including a merged rune. \n   - Outcome: Reinforce ability to draw and play more effectively.\n4. **Aid an Opponent:**\n   - Donate a rune to another player strategically.\n   - Pre-requisite: Consider impact on game balance.\n5. **Pass:**\n   - Skip playing a rune.\n   - Consequence: Contribute mana chips to the pool for missed opportunities.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player to the left of the dealer initiates the round.\n2. Players take turns in clockwise order.\n3. Each turn involves:\n   - Playing a rune or using a merge action.\n   - Optionally assisting another player with a rune donation.\n   - Passing if no action is chosen, incurring a mana penalty.\n4. Play continues until:\n   - A player successfully merges all their runes.\n   - OR a player reaches 100 points due to unplayed runes.\n\n#### **Winning Conditions:**\n- The game ends when a player's score surpasses 100.\n- The player with the fewest points is the overall winner, declared Master Sorcerer.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Passing Penalty:** Missing a chance to play or merge costs players three mana chips.\n- **Seven Rune Penalty:** Missing the opportunity with a seven rune incurs a five-mana chip distribution to players holding adjacent key runes.\n- **Cooperative Dynamics:** Players can form temporary alliances to balance game dynamics and hinder leading players.\n- **Deck Reformation:** If runes are depleted, discarded runes (except those on the board) are reshuffled back into the reserve.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Their own runes.\n- The sacred board's top rune.\n- Confluence Spells completed by all players.\n- Mana chips in the energy pool.\n- Actions performed by other players.\n\n#### **Hidden Information:**\n- Runes in the reserve deck.\n- Runes held by opponents.\n- Other players' mana chip totals.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Players accrue points from unplayed runes left in their hand at round\u2019s end.\n- Each unplayed rune is worth 1 point.\n\n#### **Winning Player\u2019s Reward:**\n- The player with the lowest score after 100 points is reached is declared the Master Sorcerer, winning the game.\n\n#### **Tie Resolution:**\n- If the score is tied, the player with fewer unplayed runes in hand at the end is declared the winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"energy_pool\": 4, \"sacred_board\": {\"Earth\": [], \"Fire\": [], \"Water\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"Air\": []}, \"player_order\": [0, 1, 2, 3], \"faceup_cards\": {\"completed_confluences\": []}, \"facedown_cards\": {\"mystical_reserve_size\": 24}}, \"players\": [{\"public\": {\"visible_runes\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"8\", \"element\": \"Air\"}, {\"rank\": \"6\", \"element\": \"Water\"}, {\"rank\": \"5\", \"element\": \"Air\"}, {\"rank\": \"J\", \"element\": \"Air\"}, {\"rank\": \"K\", \"element\": \"Fire\"}, {\"rank\": \"5\", \"element\": \"Water\"}, {\"rank\": \"3\", \"element\": \"Air\"}, {\"rank\": \"Q\", \"element\": \"Air\"}], \"mana_chips\": 5}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 21}, \"msg\": \"Player 2 decides to: aid_opponent-(target_player: 0, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 2 aids Player 0 with 9-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 3}, \"id\": 23}, \"msg\": \"Player 3 decides to: aid_opponent-(target_player: 2, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 aids Player 2 with 3-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"pass\", \"args\": {}, \"id\": 35}, \"msg\": \"Player 0 decides to: pass-()\"}, {\"type\": \"info\", \"msg\": \"Player 0 passes and contributes 3 mana chips to the energy pool.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 1.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 1}, \"id\": 14}, \"msg\": \"Player 1 decides to: aid_opponent-(target_player: 2, rune_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 1 aids Player 2 with Q-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 2.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_rune\", \"args\": {\"rune_idx\": 0}, \"id\": 0}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 2}, \"id\": 1}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 3}, \"id\": 2}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 4}, \"id\": 3}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 6}, \"id\": 4}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 7}, \"id\": 5}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 2]}, \"id\": 6}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 3]}, \"id\": 7}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 6]}, \"id\": 8}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 7]}, \"id\": 9}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 3]}, \"id\": 10}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 6]}, \"id\": 11}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 7]}, \"id\": 12}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 6]}, \"id\": 13}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 7]}, \"id\": 14}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [6, 7]}, \"id\": 15}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [1, 5]}, \"id\": 16}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 0}, \"id\": 17}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 0}, \"id\": 18}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 0}, \"id\": 19}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 1}, \"id\": 20}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 1}, \"id\": 21}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 1}, \"id\": 22}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 2}, \"id\": 23}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 2}, \"id\": 24}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 2}, \"id\": 25}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 26}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 3}, \"id\": 27}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 3}, \"id\": 28}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 4}, \"id\": 29}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 4}, \"id\": 30}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 4}, \"id\": 31}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 5}, \"id\": 32}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 5}, \"id\": 33}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 5}, \"id\": 34}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 6}, \"id\": 35}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 6}, \"id\": 36}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 6}, \"id\": 37}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 7}, \"id\": 38}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 7}, \"id\": 39}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 7}, \"id\": 40}, {\"action\": \"pass\", \"args\": {}, \"id\": 41}]}\n\nExplanation: \n{\"common\": \"An object holding shared game state information relevant to all players.\", \"common.num_players\": \"The number of players participating in the game. It is an integer.\", \"common.current_player\": \"The index of the player whose turn it currently is. It is an integer.\", \"common.winner\": \"Indicates the index of the winning player if the game is over, or null if there is no winner yet.\", \"common.is_over\": \"A boolean indicating whether the game has concluded.\", \"common.energy_pool\": \"Tracks the total number of mana chips contributed to the central pool. It is an integer.\", \"common.sacred_board\": \"An object storing arrays of runes currently played on the board, categorized by their elements (Earth, Fire, Water, Air).\", \"common.player_order\": \"A list of player indices representing the order of play.\", \"common.faceup_cards\": \"An object containing notably visible cards on the board.\", \"common.faceup_cards.completed_confluences\": \"An array tracking the indices of players who completed confluence spells.\", \"common.facedown_cards\": \"An object containing cards that are not currently visible to players.\", \"common.facedown_cards.mystical_reserve_size\": \"An integer representing the number of remaining runes in the mystical reserve deck.\", \"players\": \"An array containing objects for each player, which includes public and private information.\", \"players[].public.visible_runes\": \"An array containing runes that the player has played visibly on the board.\", \"players[].public.confluences\": \"An array listing the confluence spells a player has completed.\", \"players[].public.current_player\": \"A boolean indicating true when this is the current player's turn.\", \"players[].private.hand\": \"An array representing the runes currently held in the player's hand.\", \"players[].private.mana_chips\": \"The number of mana chips currently held by the player.\", \"recent_history\": \"A list of recent actions and events in the game, with details like type, player, action, and message.\", \"recent_history[].type\": \"The category of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player associated with the event or action.\", \"recent_history[].action\": \"Details of a specific action taken, including type and any arguments.\", \"recent_history[].msg\": \"A message string describing the action or event for human readability.\", \"legal_actions\": \"An array of dictionaries detailing all legal actions available to the current player.\", \"legal_actions[].action\": \"The type of action that can be taken ('play_rune', 'merge_runes', etc.).\", \"legal_actions[].args\": \"Arguments necessary for the action, specific to the type of action, such as 'rune_idx' or 'target_player'.\", \"legal_actions[].id\": \"A unique identifier for the legal action, usually for tracking purposes.\"}",
    "policy_list": [
        "**Efficient Rune Management**\nPrioritize playing or merging high-ranking runes to minimize future penalty points, while maintaining a focus on creating Confluence Spells.",
        "**Strategic Rune Donation**\nOccasionally donate a strategic rune to an opponent to disrupt their strategy or to form temporary alliances against leading players.",
        "**Aggressive Merge and Draw**\nFocus on merge actions to continually replenish the hand with fresh runes from the mystical reserve and create higher potential for powerful plays.",
        "**Controlled Passing for Mana Management**\nPass strategically to conserve valuable runes, while calculating the trade-off with mana chips lost to the pool."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def evaluate_rune_value(rune):\n        # Assign values to runes based on rank, higher ranks have higher values\n        rune_values = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n                       '10': 10, 'J': 11, 'Q': 12, 'K': 13}\n        return rune_values[rune['rank']]\n\n    def possible_merges(hand):\n        # Check best merge options to form confluence spells using hand\n        # Higher score if a confluence spell can be achieved\n        merge_score = 0\n        elements = {'Earth': [], 'Fire': [], 'Water': [], 'Air': []}\n        for card in hand:\n            elements[card['element']].append(card)\n\n        for elem_cards in elements.values():\n            elem_cards.sort(key=lambda x: evaluate_rune_value(x))\n            if len(elem_cards) >= 2:\n                for i in range(len(elem_cards)-1):\n                    if evaluate_rune_value(elem_cards[i+1]) - evaluate_rune_value(elem_cards[i]) == 1:\n                        # Advantageous to merge consecutive cards\n                        merge_score += 0.1\n\n        return merge_score\n\n    def evaluate_potential_confluence(hand):\n        # Evaluate the potential to form Confluence spells\n        confluence_potential = 0\n        elements = {'Earth': [], 'Fire': [], 'Water': [], 'Air': []}\n        for card in hand:\n            elements[card['element']].append(card)\n\n        for elem_cards in elements.values():\n            if len(elem_cards) >= 4:\n                elem_cards.sort(key=lambda x: evaluate_rune_value(x))\n                for i in range(len(elem_cards) - 3):\n                    if all(evaluate_rune_value(elem_cards[i+j]) == evaluate_rune_value(elem_cards[i]) + j for j in range(4)):\n                        confluence_potential += 0.3  # Higher reward for potential Confluence combinations\n\n        return confluence_potential\n\n    # Extract player info and specific action details\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['private']['hand']\n    mana_chips = state['players'][current_player]['private']['mana_chips']\n\n    # Determine the effect of the specific action\n    action_type = action['action']\n    if action_type == 'play_rune':\n        rune_idx = action['args']['rune_idx']\n        rune_played = player_hand[rune_idx]\n        play_score = evaluate_rune_value(rune_played) / 13  # Normalize based on highest rank\n    elif action_type == 'merge_runes':\n        rune_indices = action['args']['rune_indices']\n        runes_merged = [player_hand[i] for i in rune_indices]\n        play_score = sum(evaluate_rune_value(r) for r in runes_merged) / 26  # Reflecting potential benefit of merging\n    elif action_type == 'aid_opponent':\n        play_score = 0.1  # Minimal score, consider as strategic choice\n    elif action_type == 'pass':\n        play_score = -0.3  # Penalize for passing opportunity\n    elif action_type == 'create_confluence':\n        play_score = 0.5  # High score for successfully creating confluence\n\n    # Evaluate other strategic factors\n    merge_score = possible_merges(player_hand)\n    confluence_potential = evaluate_potential_confluence(player_hand)\n    mana_resource = mana_chips / 10 if mana_chips > 0 else 0  # normalize by a small number of chips for strategy\n\n    # Combine scores to calculate the action's potential to win\n    result_score = play_score + merge_score + confluence_potential + mana_resource\n    result_score = min(max(result_score, 0), 1)  # Ensure the result is within [0, 1]\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information from the state\n    current_player_id = state[\"common\"][\"current_player\"]\n    current_player = state[\"players\"][current_player_id]\n    player_hand = current_player[\"private\"][\"hand\"]\n    mana_chips = current_player[\"private\"][\"mana_chips\"]\n    energy_pool = state[\"common\"][\"energy_pool\"]\n    legal_actions = state[\"legal_actions\"]\n    \n    # Determine current strategic context\n    num_players = state[\"common\"][\"num_players\"]\n    board_state = state[\"common\"][\"sacred_board\"]\n    completed_confluences = state[\"common\"][\"faceup_cards\"][\"completed_confluences\"]\n    \n    # Initialize base reward\n    result_score = 0.5  # Neutral starting point\n    \n    # Evaluate action-specific changes to the score\n    action_type = action[\"action\"]\n    action_args = action.get(\"args\", {})\n    \n    if action_type == \"play_rune\":\n        rune_idx = action_args.get(\"rune_idx\")\n        rune_played = player_hand[rune_idx]\n        element = rune_played[\"element\"]\n        \n        # Check if it contributes to a confluence\n        board_element = board_state[element]\n        if len(board_element) > 0 and board_element[-1][\"rank\"] == rune_played[\"rank\"]:\n            result_score += 0.1  # Increase score if rune completes a sequence in its element\n            \n        result_score += 0.05  # General bonus for playing a rune, promoting active play\n    \n    elif action_type == \"merge_runes\":\n        result_score += 0.15  # Higher reward for merging as it leads to more complex plays\n    \n    elif action_type == \"create_confluence\":\n        result_score += 0.2  # Significant boost for completing a confluence spell\n    \n    elif action_type == \"aid_opponent\":\n        target_player = action_args.get(\"target_player\")\n        rune_idx = action_args.get(\"rune_idx\")\n        \n        # Evaluate strategic rune donation\n        if target_player != current_player_id and mana_chips > 3:\n            result_score += 0.05 * ((num_players - len(completed_confluences)) / num_players) \n            # Encourage aiding when it might balance the game dynamics and with enough personal resources\n    \n    elif action_type == \"pass\":\n        result_score -= 0.1  # Penalize passing, as it incurs a mana penalty and misses strategic opportunities\n    \n    # Normalize the result to the range [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['private']['hand']\n    player_mana = state['players'][current_player]['private']['mana_chips']\n    mystical_reserve_size = state['common']['facedown_cards']['mystical_reserve_size']\n    energy_pool = state['common']['energy_pool']\n    sacred_board = state['common']['sacred_board']\n    \n    # Start with a base score\n    result_score = 0.5\n    \n    # Factor in available mana\n    if player_mana > 5:\n        result_score += 0.1\n    elif player_mana < 3:\n        result_score -= 0.1\n\n    # Factor in the action type and priority based on aggressive strategy\n    if action['action'] == \"merge_runes\":\n        result_score += 0.3  # Prioritize merging runes\n    elif action['action'] == \"play_rune\":\n        result_score += 0.1  # Playing a rune is good but not as preferred\n    elif action['action'] == \"aid_opponent\":\n        result_score -= 0.2  # Generally less preferred unless beneficial\n    elif action['action'] == \"pass\":\n        result_score -= 0.3  # Passing is usually negative since it incurs penalties\n\n    # Check the mystical reserve to assess potential for drawing new runes\n    if mystical_reserve_size > 10:\n        result_score += 0.05  # More reserve means more potential draws\n\n    # Consider the state of the sacred board\n    for element in sacred_board:\n        if len(sacred_board[element]) >= 3:\n            result_score += 0.05  # Near completion of a confluence boosts the score\n\n    # Normalize the score within bounds 0 to 1\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    num_players = state['common']['num_players']\n    current_player_id = state['common']['current_player']\n    energy_pool = state['common']['energy_pool']\n    current_player = state['players'][current_player_id]\n\n    # Initializing factors for scoring\n    hand_size_factor = len(current_player['private']['hand']) / 7\n    mana_chips_factor = current_player['private']['mana_chips'] / max(1, energy_pool)\n    visible_runes_factor = sum(len(player['public']['visible_runes']) for player in state['players']) / (num_players * 4)\n    \n    # Encourage passing action if conserving valuable runes, but consider mana loss\n    if action == 'pass':\n        pass_penalty = 0.05 * len(current_player['private']['hand'])\n        result_score = 1 - pass_penalty\n    else:\n        # Assess the action's impact\n        if 'play_rune' in action:\n            result_score = min(0.8 + visible_runes_factor, 1.0)\n        elif 'merge_runes' in action:\n            result_score = min(0.7 + mana_chips_factor, 1.0)\n        elif 'aid_opponent' in action:\n            # Penalize unnecessary aid to opponents\n            result_score = 0.3 if energy_pool > 5 else 0.4\n        else:\n            # Default for unrecognized actions\n            result_score = 0.5\n    \n    # Ensure the result is within [0, 1]\n    result_score = max(0.0, min(result_score, 1.0))\n    \n    return result_score\n"
    ]
}