{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Energy Pool:** Total mana chips contributed by all players, representing communal magical energy.\n- **Sacred Board:** Displays all runes (cards) played, grouped by the four elements (Earth, Fire, Water, Air).\n- **Turn Information:** Displays current player's turn and any special actions performed.\n- **Player Order:** Sequence in which players take turns, visible to all.\n\n#### **Player-Specific Information:**\n- **Public**:\n    - **Visible Runes:** Runes played on the sacred board.\n    - **Confluences:** Completed Confluence Spells and drawn new runes.\n- **Private**:\n    - **Player Hand:** Runes (cards) held by a player, only visible to them.\n    - **Mana Chips:** Number of mana chips in the player's possession.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A}.\n- **Elemental Suit:** One of {Earth, Fire, Water, Air}.\n- **Special Abilities:**\n  - **Seven Rune:** Allows merge actions or special plays.\n  - **Fusion Power:** Created through merge actions, can be part of a Confluence Spell.\n\n#### **Card States:**\n- **Face-down:** Cards in the player\u2019s hand.\n- **Face-up:** Runes played on the sacred board.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard deck with 52 runes (4 elements, 13 ranks each, following traditional card ranks).\n\n#### **Initial Dealing:**\n- Each player receives 7 runes.\n- Players with fewer cards must ante an additional mana chip.\n- Remaining runes form a mystical reserve (deck).\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Rune:**\n   - Place a rune in alignment with previously played runes of the same element by rank or complete a sequence.\n2. **Use Merge Action:**\n   - Merge two adjacent runes of the same element to form a more powerful rune.\n   - Outcome: Draw a new rune from the mystical reserve.\n3. **Create a Confluence Spell:**\n   - Complete a sequence of four consecutive runes including a merged rune. \n   - Outcome: Reinforce ability to draw and play more effectively.\n4. **Aid an Opponent:**\n   - Donate a rune to another player strategically.\n   - Pre-requisite: Consider impact on game balance.\n5. **Pass:**\n   - Skip playing a rune.\n   - Consequence: Contribute mana chips to the pool for missed opportunities.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player to the left of the dealer initiates the round.\n2. Players take turns in clockwise order.\n3. Each turn involves:\n   - Playing a rune or using a merge action.\n   - Optionally assisting another player with a rune donation.\n   - Passing if no action is chosen, incurring a mana penalty.\n4. Play continues until:\n   - A player successfully merges all their runes.\n   - OR a player reaches 100 points due to unplayed runes.\n\n#### **Winning Conditions:**\n- The game ends when a player's score surpasses 100.\n- The player with the fewest points is the overall winner, declared Master Sorcerer.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Passing Penalty:** Missing a chance to play or merge costs players three mana chips.\n- **Seven Rune Penalty:** Missing the opportunity with a seven rune incurs a five-mana chip distribution to players holding adjacent key runes.\n- **Cooperative Dynamics:** Players can form temporary alliances to balance game dynamics and hinder leading players.\n- **Deck Reformation:** If runes are depleted, discarded runes (except those on the board) are reshuffled back into the reserve.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Their own runes.\n- The sacred board's top rune.\n- Confluence Spells completed by all players.\n- Mana chips in the energy pool.\n- Actions performed by other players.\n\n#### **Hidden Information:**\n- Runes in the reserve deck.\n- Runes held by opponents.\n- Other players' mana chip totals.\n\n---\n\n### 8. **Payoffs**\n\n#### **Endgame Scoring:**\n- Players accrue points from unplayed runes left in their hand at round\u2019s end.\n- Each unplayed rune is worth 1 point.\n\n#### **Winning Player\u2019s Reward:**\n- The player with the lowest score after 100 points is reached is declared the Master Sorcerer, winning the game.\n\n#### **Tie Resolution:**\n- If the score is tied, the player with fewer unplayed runes in hand at the end is declared the winner.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"winner\": null, \"is_over\": false, \"energy_pool\": 4, \"sacred_board\": {\"Earth\": [], \"Fire\": [], \"Water\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"Air\": []}, \"player_order\": [0, 1, 2, 3], \"faceup_cards\": {\"completed_confluences\": []}, \"facedown_cards\": {\"mystical_reserve_size\": 24}}, \"players\": [{\"public\": {\"visible_runes\": [{\"rank\": \"J\", \"element\": \"Water\"}], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}, {\"public\": {\"visible_runes\": [], \"confluences\": [], \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"8\", \"element\": \"Air\"}, {\"rank\": \"6\", \"element\": \"Water\"}, {\"rank\": \"5\", \"element\": \"Air\"}, {\"rank\": \"J\", \"element\": \"Air\"}, {\"rank\": \"K\", \"element\": \"Fire\"}, {\"rank\": \"5\", \"element\": \"Water\"}, {\"rank\": \"3\", \"element\": \"Air\"}, {\"rank\": \"Q\", \"element\": \"Air\"}], \"mana_chips\": 5}}, {\"public\": {\"visible_runes\": [], \"confluences\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 21}, \"msg\": \"Player 2 decides to: aid_opponent-(target_player: 0, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 2 aids Player 0 with 9-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 3.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 3}, \"id\": 23}, \"msg\": \"Player 3 decides to: aid_opponent-(target_player: 2, rune_idx: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 aids Player 2 with 3-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 0.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"pass\", \"args\": {}, \"id\": 35}, \"msg\": \"Player 0 decides to: pass-()\"}, {\"type\": \"info\", \"msg\": \"Player 0 passes and contributes 3 mana chips to the energy pool.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 1.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 2, \"rune_idx\": 1}, \"id\": 14}, \"msg\": \"Player 1 decides to: aid_opponent-(target_player: 2, rune_idx: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 1 aids Player 2 with Q-Air.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Next player's turn: Player 2.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_rune\", \"args\": {\"rune_idx\": 0}, \"id\": 0}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 2}, \"id\": 1}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 3}, \"id\": 2}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 4}, \"id\": 3}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 6}, \"id\": 4}, {\"action\": \"play_rune\", \"args\": {\"rune_idx\": 7}, \"id\": 5}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 2]}, \"id\": 6}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 3]}, \"id\": 7}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 6]}, \"id\": 8}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [0, 7]}, \"id\": 9}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 3]}, \"id\": 10}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 6]}, \"id\": 11}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [2, 7]}, \"id\": 12}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 6]}, \"id\": 13}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [3, 7]}, \"id\": 14}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [6, 7]}, \"id\": 15}, {\"action\": \"merge_runes\", \"args\": {\"rune_indices\": [1, 5]}, \"id\": 16}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 0}, \"id\": 17}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 0}, \"id\": 18}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 0}, \"id\": 19}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 1}, \"id\": 20}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 1}, \"id\": 21}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 1}, \"id\": 22}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 2}, \"id\": 23}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 2}, \"id\": 24}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 2}, \"id\": 25}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 3}, \"id\": 26}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 3}, \"id\": 27}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 3}, \"id\": 28}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 4}, \"id\": 29}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 4}, \"id\": 30}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 4}, \"id\": 31}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 5}, \"id\": 32}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 5}, \"id\": 33}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 5}, \"id\": 34}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 6}, \"id\": 35}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 6}, \"id\": 36}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 6}, \"id\": 37}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 0, \"rune_idx\": 7}, \"id\": 38}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 1, \"rune_idx\": 7}, \"id\": 39}, {\"action\": \"aid_opponent\", \"args\": {\"target_player\": 3, \"rune_idx\": 7}, \"id\": 40}, {\"action\": \"pass\", \"args\": {}, \"id\": 41}]}\n\nExplanation: \n{\"common\": \"An object holding shared game state information relevant to all players.\", \"common.num_players\": \"The number of players participating in the game. It is an integer.\", \"common.current_player\": \"The index of the player whose turn it currently is. It is an integer.\", \"common.winner\": \"Indicates the index of the winning player if the game is over, or null if there is no winner yet.\", \"common.is_over\": \"A boolean indicating whether the game has concluded.\", \"common.energy_pool\": \"Tracks the total number of mana chips contributed to the central pool. It is an integer.\", \"common.sacred_board\": \"An object storing arrays of runes currently played on the board, categorized by their elements (Earth, Fire, Water, Air).\", \"common.player_order\": \"A list of player indices representing the order of play.\", \"common.faceup_cards\": \"An object containing notably visible cards on the board.\", \"common.faceup_cards.completed_confluences\": \"An array tracking the indices of players who completed confluence spells.\", \"common.facedown_cards\": \"An object containing cards that are not currently visible to players.\", \"common.facedown_cards.mystical_reserve_size\": \"An integer representing the number of remaining runes in the mystical reserve deck.\", \"players\": \"An array containing objects for each player, which includes public and private information.\", \"players[].public.visible_runes\": \"An array containing runes that the player has played visibly on the board.\", \"players[].public.confluences\": \"An array listing the confluence spells a player has completed.\", \"players[].public.current_player\": \"A boolean indicating true when this is the current player's turn.\", \"players[].private.hand\": \"An array representing the runes currently held in the player's hand.\", \"players[].private.mana_chips\": \"The number of mana chips currently held by the player.\", \"recent_history\": \"A list of recent actions and events in the game, with details like type, player, action, and message.\", \"recent_history[].type\": \"The category of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player associated with the event or action.\", \"recent_history[].action\": \"Details of a specific action taken, including type and any arguments.\", \"recent_history[].msg\": \"A message string describing the action or event for human readability.\", \"legal_actions\": \"An array of dictionaries detailing all legal actions available to the current player.\", \"legal_actions[].action\": \"The type of action that can be taken ('play_rune', 'merge_runes', etc.).\", \"legal_actions[].args\": \"Arguments necessary for the action, specific to the type of action, such as 'rune_idx' or 'target_player'.\", \"legal_actions[].id\": \"A unique identifier for the legal action, usually for tracking purposes.\"}",
    "policy_list": [
        "**Board Alignment Potential**\nEvaluates how well a player's current hand cards align with the visible runes on the sacred board. A high score indicates potential for immediate play or sequence completion.",
        "**Merge Opportunity Score**\nAssesses the potential to execute merge actions on the player's next turn by considering adjacent runes of the same element in hand. This metric encourages strategic planning for drawing additional runes.",
        "**Confluence Spell Readiness**\nMeasures how close the player is to completing a Confluence Spell by evaluating the proximity and sequence of playable runes in hand, including potential merges required.",
        "**Mana Efficiency Ratio**\nDetermines the efficiency of the player's actions relative to their mana chip expenditures. A higher score implies maintaining a lower penalty cost and strategically using or conserving mana."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize score variables\n    alignment_score = 0.0\n    strategic_value = 0.0\n    \n    # Extract common game state and player-specific data\n    current_player_index = state[\"common\"][\"current_player\"]\n    current_hand = state[\"players\"][current_player_index][\"private\"][\"hand\"]\n    sacred_board = state[\"common\"][\"sacred_board\"]\n    \n    # Extract action details\n    action_type = action[\"action\"]\n    action_args = action[\"args\"]\n    \n    # Function for counting how well a rune aligns with the board for each element\n    def calculate_alignment(rune, board):\n        element = rune[\"element\"]\n        rank = rune[\"rank\"]\n        # Get runes of the same element already on the board\n        existing_runes = board[element]\n        alignment = 0\n        \n        # Check if rune can create a sequence or merge\n        if existing_runes:\n            existing_ranks = [card[\"rank\"] for card in existing_runes]\n            if rank in existing_ranks:\n                alignment = 1.0\n            else:\n                # Check for possible sequential alignment\n                existing_ranks_sorted = sorted(existing_ranks)\n                for i in range(1, len(existing_ranks_sorted)):\n                    if rank > existing_ranks_sorted[i-1] and rank < existing_ranks_sorted[i]:\n                        alignment = 0.5\n                        break\n        return alignment\n    \n    # Evaluate action based on type\n    if action_type == \"play_rune\":\n        rune_idx = action_args[\"rune_idx\"]\n        selected_rune = current_hand[rune_idx]\n        alignment_score = calculate_alignment(selected_rune, sacred_board)\n      \n    elif action_type == \"merge_runes\":\n        rune_indices = action_args[\"rune_indices\"]\n        selected_runes = [current_hand[i] for i in rune_indices]\n        if selected_runes[0][\"rank\"] == selected_runes[1][\"rank\"]:\n            # More valuable merge\n            strategic_value += 0.5\n        else:\n            # Less valuable merge\n            strategic_value += 0.25\n    \n    elif action_type == \"aid_opponent\":\n        # Helping another player can be strategic if it balances play\n        strategic_value += 0.1\n    \n    elif action_type == \"pass\":\n        # Passing incurs a penalty and is usually a last resort\n        strategic_value = -0.3\n    \n    # Combine scores for final result, weighting alignment slightly more\n    result_score = max(0.0, min(1.0, 0.7 * alignment_score + 0.3 * strategic_value))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Assess the potential reward of performing a specific game action based on the current state.\n\n    Args:\n    - state (dict): A dictionary containing the current game state.\n    - action (dict): A dictionary outlining the action being evaluated.\n\n    Returns:\n    - result_score (float): A score between 0 and 1 estimating the probability of winning.\n    \"\"\"\n    \n    # Extract necessary information from the game state\n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['private']['hand']\n    player_mana = state['players'][current_player]['private']['mana_chips']\n    legal_actions = state['legal_actions']\n    sacred_board = state['common']['sacred_board']\n\n    # Initialize variables to collect scoring metrics\n    merge_opportunity_score = 0.0\n    strategic_bonus_score = 0.0\n\n    # Helper function to find consecutive runes for merging\n    def find_mergeable_pairs(player_hand):\n        mergeable_pairs = []\n        element_groups = {}\n        for idx, card in enumerate(player_hand):\n            if card['element'] not in element_groups:\n                element_groups[card['element']] = []\n            element_groups[card['element']].append((idx, card['rank']))\n\n        for element, cards in element_groups.items():\n            # Sort cards by rank within each element for easy consecutive checking\n            sorted_cards = sorted(cards, key=lambda x: x[1])\n            for i in range(len(sorted_cards) - 1):\n                # Check for consecutive ranks (this is a simplified check; customize as needed)\n                if abs(ord(sorted_cards[i][1]) - ord(sorted_cards[i + 1][1])) == 1:\n                    mergeable_pairs.append((sorted_cards[i][0], sorted_cards[i + 1][0]))\n\n        return mergeable_pairs\n\n    # Calculate potential reward for each legal action\n    if action['action'] == 'merge_runes':\n        # Check if the action results in a new merge\n        rune_indices = action['args']['rune_indices']\n        for pair in find_mergeable_pairs(player_hand):\n            if set(pair) == set(rune_indices):\n                merge_opportunity_score = 1.0\n                break\n    elif action['action'] == 'play_rune':\n        # Playing a rune might create future opportunities by adding a rune to a sequence\n        rune_idx = action['args']['rune_idx']\n        played_rune = player_hand[rune_idx]\n        board_runes = sacred_board[played_rune['element']]\n        ranks = [rune['rank'] for rune in board_runes]\n        if played_rune['rank'] not in ranks:\n            # Improve score if it complements an existing sequence but is unplayed\n            strategic_bonus_score = 0.5\n\n    # Adjust the final score by considering the current energy pool and player mana\n    energy_factor = min(state['common']['energy_pool'] / 10, 0.5)  # Normalize between 0 and 0.5\n    mana_factor = min(player_mana / 10, 0.5)  # Normalize between 0 and 0.5\n\n    # Final score combines merge potential, strategic moves, and resource availability\n    result_score = merge_opportunity_score * 0.5 + strategic_bonus_score * 0.3 + energy_factor + mana_factor\n    result_score = min(result_score, 1.0)  # Ensure the score is between 0 and 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def rank_value(rank: str) -> int:\n        rank_order = {'A': 1, '2': 2, '3': 3, '4': 4,\n                      '5': 5, '6': 6, '7': 7, '8': 8,\n                      '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13}\n        return rank_order[rank]\n\n    def evaluate_hand_for_confluence(hand: list) -> float:\n        elements = ['Earth', 'Fire', 'Water', 'Air']\n        counts = {element: [0] * 14 for element in elements}\n\n        for rune in hand:\n            element, rank = rune['element'], rune['rank']\n            counts[element][rank_value(rank)] += 1\n        \n        confluence_score = 0\n        for element in elements:\n            consecutive = 0\n            for i in range(2, 15):\n                if counts[element][i]:\n                    consecutive += 1\n                    if consecutive == 4:\n                        confluence_score += 1\n                        consecutive -= 1  # Allow overlapping sequences\n                else:\n                    consecutive = 0\n        \n        return min(1.0, confluence_score / 3)\n\n    def confluence_readiness(state: dict) -> float:\n        current_player = state['common']['current_player']\n        private_hand = state['players'][current_player]['private']['hand']\n        return evaluate_hand_for_confluence(private_hand)\n    \n    def action_impact(action: dict, state: dict) -> float:\n        act_type = action['action']\n        if act_type == 'merge_runes':\n            return 0.6\n        elif act_type == 'create_confluence':\n            return 1.0\n        elif act_type == 'play_rune':\n            return 0.4\n        elif act_type == 'aid_opponent':\n            return -0.3\n        elif act_type == 'pass':\n            return -0.5\n        return 0.0\n    \n    readiness_score = confluence_readiness(state)\n    action_score = action_impact(action, state)\n    \n    result_score = readiness_score * 0.7 + action_score * 0.3\n    result_score = max(0.0, min(1.0, result_score))  # Ensure within [0, 1]\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information from the state\n    current_player_idx = state['common']['current_player']\n    energy_pool = state['common']['energy_pool']\n    player_hand_size = len(state['players'][current_player_idx]['private']['hand'])\n    player_mana = state['players'][current_player_idx]['private']['mana_chips']\n    mystical_reserve_size = state['common']['facedown_cards']['mystical_reserve_size']\n    \n    # Evaluate the action\n    action_type = action['action']\n    action_args = action['args']\n    \n    # Initial score based on mana efficiency and action type\n    result_score = 0.0\n    \n    # Basic logic for different actions\n    if action_type == 'play_rune':\n        rune_idx = action_args['rune_idx']\n        selected_rune = state['players'][current_player_idx]['private']['hand'][rune_idx]\n        # Favor actions that align with played runes on the sacred board (e.g., completing sequences)\n        element_runes = state['common']['sacred_board'][selected_rune['element']]\n        if len(element_runes) == 0 or selected_rune['rank'] in ['A', '2', '3', '4', '5']:\n            result_score += 0.1 # Favor playing low rank cards early for positional plays\n    \n    elif action_type == 'merge_runes':\n        # Attempt to create Confluence potential and manage hand size\n        if player_hand_size > 2:\n            result_score += 0.3\n    \n    elif action_type == 'aid_opponent':\n        target_player = action_args['target_player']\n        # Be cautious aiding opponents with significantly higher scores\n        opponent_hand = len(state['players'][target_player]['private']['hand'])\n        result_score -= 0.1 * (opponent_hand / player_hand_size)\n    \n    elif action_type == 'pass':\n        # Passing is usually less favorable due to mana penalty unless it avoids a major unwise move\n        result_score -= 0.3\n    \n    # Adjusting score based on strategy\n    if player_mana > 10:\n        # Reward players with higher mana control\n        result_score += 0.2\n    \n    if mystic_reserve_size < 10:\n        # Emphasize completing game elements as draw potential diminishes\n        result_score += 0.1\n    \n    # Cap the result between 0 and 1\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n"
    ]
}