{
    "game_description": "Leduc Hold'em is a smaller version of Limit Texas Hold'em (first introduced in Bayes' Bluff: Opponent Modeling in Poker). The deck consists only two pairs of King, Queen and Jack, six cards in total. Each game is fixed with two players, two rounds, two-bet maximum and raise amounts of 2 and 4 in the first and second round. In the first round, one player is randomly choosed to put 1 unit in pot as small blind while the other puts 2 unit as big blind, and each player is dealt one card, then starts betting. The player with small blind acts first. In the second round, one public card is revealed first, then the players bet again. Finally, the player whose hand has the same rank as the public card is the winner. If neither, then the one with higher rank wins. Other rules such as 'fold' can refer to Limit Texas hold'em.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 1, \"round\": 1, \"num_raises\": 1, \"last_raise\": 2, \"small_blind_player\": 0, \"big_blind_player\": 1, \"winner\": 0, \"is_over\": true, \"facedown_cards\": {\"deck_size\": 4}, \"faceup_cards\": {\"public_card\": null}}, \"players\": [{\"public\": {\"folded\": false, \"total_pot_contribution\": 4, \"round_pot_contribution\": 4, \"final_showdown\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"Q\"}]}}, {\"public\": {\"folded\": true, \"total_pot_contribution\": 2, \"round_pot_contribution\": 2, \"current_player\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"fold\", \"id\": 0}, \"msg\": \"Player 1 decides to: fold\"}, {\"type\": \"info\", \"msg\": \"Player 1 chose action: fold\", \"role\": null}], \"legal_actions\": [{\"action\": \"fold\", \"id\": 0}, {\"action\": \"call\", \"id\": 1}, {\"action\": \"raise\", \"id\": 2}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The total number of players in the game, which is 2 for Leduc Hold'em.\", \"current_player\": \"The ID of the player whose turn it is currently. In this case, it's player 1.\", \"round\": \"Indicates which betting round is currently active. Round 1 or 2 are possible values.\", \"num_raises\": \"The number of raises that have occurred in the current round. Here it's 1.\", \"last_raise\": \"The amount of the last raise that was made. The value is 2 in this state.\", \"small_blind_player\": \"The ID of the player assigned as the small blind. Here it is player 0.\", \"big_blind_player\": \"The ID of the player assigned as the big blind. Here it is player 1.\", \"winner\": \"The ID of the player who won the game, or 'tie' if the game was a draw. In this case, player 0 is the winner.\", \"is_over\": \"A boolean indicating whether the game is over or not. Here it is true, meaning the game has ended.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck. Here it is 4 cards.\"}, \"faceup_cards\": {\"public_card\": \"The public card revealed to all players, having no value implies it hasn't been revealed yet.\"}}, \"players\": [{\"public\": {\"folded\": \"A boolean that indicates whether the player has folded. False means player 0 has not folded.\", \"total_pot_contribution\": \"The total amount that the player has contributed to the pot. Here player 0 has contributed 4.\", \"round_pot_contribution\": \"The amount that the player has contributed to the pot in the current round, which is 4 for player 0.\", \"final_showdown\": \"A custom attribute that might suggest whether player 0 participated in the final showdown. The actual code doesn't define this attribute.\"}, \"facedown_cards\": {\"hand\": [{\"rank\": \"The rank of a card in the player's hand. Here, player 0 has a card with rank 'Q'.\"}]}}, {\"public\": {\"folded\": \"A boolean indicating whether the player has folded. True means player 1 has folded.\", \"total_pot_contribution\": \"The total amount that player 1 has contributed to the pot, which is 2.\", \"round_pot_contribution\": \"The amount that player 1 has contributed to the pot in the current round, which is also 2.\", \"current_player\": \"A custom attribute perhaps indicating player 1 was expected to act or was the last to act; however, not standard as per the code.\"}, \"facedown_cards\": {\"hand\": [{\"rank\": \"The rank of a card in the player's hand. In this instance, player 1 has a card with rank 'K'.\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"fold\", \"id\": 0}, \"msg\": \"A message indicating that player 1 decided to fold.\"}, {\"type\": \"info\", \"msg\": \"A message confirming player 1 chose the fold action.\", \"role\": \"Potentially indicates the role of the message in the game, but is null here.\"}], \"legal_actions\": [{\"action\": \"fold\", \"id\": 0}, {\"action\": \"call\", \"id\": 1}, {\"action\": \"raise\", \"id\": 2}]}",
    "policy_list": [
        "**Aggressive First-Round Strategy with Caution in Second Round**\nThe AI should play aggressively during the first round if it receives a King or Queen as its private card, maximizing betting and raising to apply pressure on the opponent. In the second round, if the public card is not a King or Queen, the AI should adopt a cautious approach, primarily calling or folding depending on the opponent's actions, unless it has a high-confidence read on the opponent's hand value from previous action patterns."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    # Extract some game states\n    current_player = state[\"common\"][\"current_player\"]\n    round_number = state[\"common\"][\"round\"]\n    public_card = state[\"common\"][\"faceup_cards\"][\"public_card\"]\n    player_card = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"][0][\"rank\"]\n    num_raises = state[\"common\"][\"num_raises\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # Determine if playing aggressively or cautiously\n    is_aggressive = player_card in ['K', 'Q']\n    is_safe = (public_card is not None) and (public_card == player_card)\n\n    if round_number == 1:\n        # First-round strategy\n        # Aggression with K or Q\n        if is_aggressive:\n            if action == \"raise\" and num_raises < 2:\n                result_score = 0.8  # High score for aggressive raise\n            elif action == \"call\":\n                result_score = 0.7  # Moderate score for calling\n            else:\n                result_score = 0.1  # Low score for folding\n        else:\n            # If card is not K or Q, cautious in raising\n            if action == \"fold\":\n                result_score = 0.7  # High score for folding with lower card\n            elif action == \"call\":\n                result_score = 0.5  # Moderately safe to call\n            else:\n                result_score = 0.3  # Low score for raise\n    else:\n        # Second-round strategy (round == 2)\n        if is_safe:\n            # If public card is matching player's card, good to continue\n            if action == \"raise\" and num_raises < 2:\n                result_score = 0.9  # Very high score for raise\n            elif action == \"call\":\n                result_score = 0.8  # High score for calling\n            else:\n                result_score = 0.4  # Lower score for folding\n        else:\n            # Cautious strategy when public card is not beneficial\n            if action == \"fold\":\n                result_score = 0.6  # Moderate score for folding non-matching hands\n            elif action == \"call\":\n                result_score = 0.4  # Low confidence in merely calling\n            elif \"raise\" in [a[\"action\"] for a in legal_actions]:\n                result_score = 0.2  # Very low score for raise when not safe\n\n    return result_score\n"
    ]
}