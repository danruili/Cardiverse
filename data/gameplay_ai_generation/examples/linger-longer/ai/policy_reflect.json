{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe player who lingers longer than the rest and is the last player holding cards is the winner.\n\n### The Deal\n\nEach player receives as many cards as there are players in the game. For example, if there are five players, each player gets five cards.\n\nThe dealer shuffles the cards and deals them one at a time face down to the players. The remaining cards are placed in a stack in the center of the players. This stack becomes the stock.\n\nOnce all players have their cards, the dealer takes the last card they dealt to themselves and turns it over, showing all the other players, then places it back into their hand. The card shown is the trump suit for the game.\n\n### The Play\n\nThe player directly to the left of the dealer goes first, putting any card in the trump suit in the middle of the table. If a trump card cannot be played, the player can play any card in his hand.\n\nThe next player goes by playing the suit or a trump card. You are trying to win the trick, so play the highest ranking card possible.\n\nPlay continues to the left until every player has played their card.\n\nWhichever player played the highest card or highest trump card, if a trump card was played, wins the trick. The cards from the finished trick are placed to the side and the winner of the trick takes the top card from the stock adding it to their hand. The winner then plays the first card starting the next trick.\n\nIf at any time during the game a player runs out of cards, they immediately withdraw from the game",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"trump_suit\": \"hearts\", \"is_over\": false, \"faceup_cards\": {\"current_trick\": [[{\"rank\": \"7\", \"suit\": \"hearts\"}, 0], [{\"rank\": \"8\", \"suit\": \"clubs\"}, 1]]}, \"facedown_cards\": {\"deck_size\": 35}}, \"players\": [{\"public\": {\"tricks_won\": 1}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 2}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"J\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(suit: spades, rank: J)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays J-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"4\"}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(suit: spades, rank: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 4-spades.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 5-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"7\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: play-(suit: hearts, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 7-hearts.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"8\"}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(suit: clubs, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8-clubs.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"K\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"suit\": \"diamonds\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"A\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing the shared information about the current state of the game.\", \"common.num_players\": \"The total number of players participating in the game. In this instance, it is set to 4.\", \"common.current_player\": \"The index of the player whose turn it is to play. Here, the current player is player 2.\", \"common.trump_suit\": \"The suit that is designated as the trump suit for the game. It is 'hearts' in this instance.\", \"common.is_over\": \"A boolean indicating whether the game has been completed. Currently, it is 'false', which means the game is still ongoing.\", \"common.faceup_cards.current_trick\": \"A list of tuples where each tuple contains a card object and the player index who played it. Represents the cards that are part of the current trick being played.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck that have not been drawn or played yet. Here, there are 35 cards left.\", \"players\": \"A list of dictionaries, each containing the state corresponding to an individual player in the game. There are four entries here for the four players.\", \"players[n].public.tricks_won\": \"Represents the number of tricks that the player has won so far in the game. Initially, this varies for each player.\", \"players[n].facedown_cards.hand_size\": \"An integer denoting how many cards each player currently holds in their hand, but not specifying which cards they are.\", \"players[n].public.current_player\": \"A boolean attribute present only in the current player that denotes which player is currently active. True for the current player (player 2 in this context).\", \"players[n].facedown_cards.hand\": \"A detailed list of card objects, each represented by its rank and suit, that the current player holds in their hand.\", \"recent_history\": \"A chronological list of dictionaries, each capturing past actions, informational messages, and turn transitions that have transpired during the game.\", \"recent_history[].type\": \"Denotes the type of entry in the recent history. Could be 'action' indicating a player's move, 'info' for informational messages, or 'turn_end' marking the end of a player's turn.\", \"recent_history[].player_id\": \"The index of the player associated with the action or turn_end in the history. It is null for info messages.\", \"recent_history[].action\": \"A dictionary specifying the action taken by the player during their turn, capturing the action type ('play') and the card played.\", \"recent_history[].msg\": \"A string message describing the operations or events in human-readable format.\", \"legal_actions\": \"A list of dictionaries each detailing the actions legally available to the current player, providing options to play from their hand.\", \"legal_actions[].action\": \"The type of action that can be taken. In this case, it is 'play', indicating playing a card from the hand.\", \"legal_actions[].args\": \"A dictionary object within each legal action specifying the details of the card (suit and rank) that can be played.\"}",
    "policy_list": [
        "**Refined Maximize Trump Usage Strategy**\nThis refined strategy prioritizes the use of trump cards under specific conditions for better clarity and efficiency. It defines 'critical moments' as scenarios when (1) the current trick's successful completion increases the player's card count significantly based on a high trick-winning probability or (2) the player's Trump Suit Card Ratio compared to the total cards is significantly high, indicating a strong chance of winning. The strategy also considers Stock Size Impact - if the stock is large, use trump cards to win tricks and draw more cards. Conversely, if the stock is depleting, conserve trump cards for assurance of winning critical remaining tricks. Opponent Card Uncertainty is accounted for by testing aggressive trump plays when opponent hands are presumed weak.",
        "**Track Opponent Behavior**\nTo refine the strategy, the AI should dynamically adjust its play based on observed patterns in opponents' card choices. Specifically, if an opponent repeatedly avoids playing a particular suit, the AI can deduce that this opponent has few or none of those cards and adjust its risk-taking with its own cards accordingly. Additionally, the AI can prioritize playing higher-ranking cards in suits the opponent likely lacks to attempt to win tricks more confidently. This approach leverages the 'Opponent Card Uncertainty' metric by gradually reducing uncertainty through accumulated observations, thus optimizing card play in subsequent turns.",
        "**Conserve High Cards**\nTo refine 'Conserve High Cards,' the player should focus on the critical moments where opponents have already played lower cards of the same suit or when the probability of opponents holding trump cards is low. A critical moment to play such high cards is when the 'Trick Winning Probability' suggests a high chance of securing the trick by playing the high non-trump card. This moment typically occurs when the majority of players have exhausted their stronger cards in the current suit. Additionally, 'Stock Size Impact' should be considered. If the stock is low, prioritize conserving trumps and high ranks to maintain competitive hand strength for later rounds.",
        "**Refined Strategy for Optimizing Stock Drawing**\nTo optimize stock drawing effectively: (1) Prioritize acquiring trump suit cards from the stock when the 'Trump Suit Card Ratio' in your hand is below that of other suits or the stock is large enough to justify aggressive drawing. (2) If the trump ratio is already strong, focus on maximizing 'Trick Winning Probability' by drawing high-valued cards in non-trump suits that are underrepresented in your current hand. (3) Consider 'Stock Size Impact' and adjust drawing strategies: focus on aggressive drawing for quality when stock size is ample, and conserve powerful plays when stock is nearly depleted. (4) Evaluate 'Opponent Card Uncertainty' after every round to dynamically adjust the aggression or conservatism of your strategy based on opponents' potential plays."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from the state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player_index = state[\"common\"][\"current_player\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    player_hand = state[\"players\"][current_player_index][\"facedown_cards\"][\"hand\"]\n    tricks_won = state[\"players\"][current_player_index][\"public\"][\"tricks_won\"]\n    \n    # Derived metrics\n    total_hand_size = len(player_hand)\n    trump_cards_in_hand = [card for card in player_hand if card[\"suit\"] == trump_suit]\n    trump_count = len(trump_cards_in_hand)\n    trump_ratio = trump_count / total_hand_size\n    legal_actions = state[\"legal_actions\"]\n    \n    # Trump Suit Card Ratio threshold\n    high_trump_ratio_threshold = 0.5\n    significant_trump_usage_ratio = 0.6\n    \n    # Initial default score\n    result_score = 0.5\n    \n    # Calculate scores based on the strategy\n    # 1. Evaluate the action's card suit and rank\n    if action[\"args\"][\"suit\"] == trump_suit:\n        if trump_ratio > high_trump_ratio_threshold:\n            # Favorable condition: High trump suit card ratio\n            result_score += 0.2\n        elif deck_size > (num_players * 2):\n            # Winning more tricks early when the deck is large\n            result_score += 0.15\n    else:\n        # Non-trump moves\n        result_score -= 0.1 if trump_ratio > significant_trump_usage_ratio else 0.05\n    \n    # 2. Stock size impact\n    if deck_size < num_players * 2:\n        # Conserve trump if the deck is nearly exhausted\n        if action[\"args\"][\"suit\"] == trump_suit:\n            result_score -= 0.1\n    \n    # 3. Evaluate impact based on trick victory potential\n    # Check if playing the action would significantly likely win the trick\n    is_significant_trick_action = (action[\"args\"][\"suit\"] == trump_suit)\n    \n    if is_significant_trick_action:\n        result_score += 0.1 if tricks_won < num_players - 1 else 0\n        \n    # Ensure the score stays within bounds [0, 1]\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common game state information\n    num_players = state[\"common\"][\"num_players\"]\n    current_player_idx = state[\"common\"][\"current_player\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    faceup_cards = state[\"common\"][\"faceup_cards\"][\"current_trick\"]\n\n    # Get the current player's hand and the action card's details\n    current_hand = state[\"players\"][current_player_idx][\"facedown_cards\"][\"hand\"]\n    action_card = action[\"args\"]\n\n    # Analysis of the action card\n    action_card_suit = action_card[\"suit\"]\n    action_card_rank = action_card[\"rank\"]\n    \n    # Define a ranking for card values\n    ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8,\n             '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n\n    # Determine if the action card is a trump card\n    is_trump = (action_card_suit == trump_suit)\n    \n    # Determine strength of the action card compared to current trick\n    card_strength = ranks[action_card_rank] if not is_trump else ranks[action_card_rank] + 15\n\n    # Calculate current trick's highest value\n    highest_trick_strength = 0\n    for card_info, player in faceup_cards:\n        card_rank = card_info[\"rank\"]\n        card_suit = card_info[\"suit\"]\n        card_value = ranks[card_rank] if card_suit != trump_suit else ranks[card_rank] + 15\n        if card_value > highest_trick_strength:\n            highest_trick_strength = card_value\n\n    # Prioritize higher trump cards and stronger cards if not a trump\n    probability_of_winning_trick = max(0.2, min(0.8, (card_strength - highest_trick_strength) / 20.0))\n\n    # Heuristic adjustments for uncertainty and tricks won\n    tricks_won = state[\"players\"][current_player_idx][\"public\"][\"tricks_won\"]\n    num_tricks_possible = num_players  # Each player starts with a hand size equal to the number of players\n    tricks_factor = tricks_won / num_tricks_possible\n    uncertainty_factor = 0.5 + 0.5 * tricks_factor\n\n    # Final reward score calculation\n    result_score = probability_of_winning_trick * uncertainty_factor\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def card_value(card):\n        \"\"\" Helper function to assign numeric value to card rank for comparison \"\"\"\n        rank_order = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n        return rank_order.index(card['rank'])\n\n    common = state['common']\n    players = state['players']\n    current_player_index = common['current_player']\n    trump_suit = common['trump_suit']\n    deck_size = common['facedown_cards']['deck_size']\n    \n    # Extract the action card\n    action_card = action['args']\n    \n    # Determine base score based on action card\n    base_score = card_value(action_card) / 12.0\n    \n    # Boost score if it's a trump card\n    if action_card['suit'] == trump_suit:\n        base_score += 0.15\n    \n    # Consider the cards already played in the trick\n    current_trick_values = [card_value(card) for card, player_index in common['faceup_cards']['current_trick']]\n    \n    # Increase reward if action card can win the trick\n    if action_card['suit'] == trump_suit or not current_trick_values or card_value(action_card) > max(current_trick_values):\n        base_score += 0.1\n    \n    # Consider the stock size impact; if stock is low, high cards and trumps should be more valuable\n    stock_factor = 1 - (deck_size / (52 - (common['num_players'] * (len(players) - 1))))\n    base_score += stock_factor * 0.1\n\n    # Ensure the score is bounded between 0 and 1\n    result_score = max(0.0, min(1.0, base_score))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Helper function to compute trump suit ratio\n    def trump_suit_ratio(hand, trump_suit):\n        trump_count = sum(1 for card in hand if card['suit'] == trump_suit)\n        return trump_count / len(hand) if hand else 0\n\n    # Helper function to compute high card value ratio\n    def high_card_ratio(hand, trump_suit):\n        ranks = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \n                 \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}\n        non_trump_high_count = sum(1 for card in hand if card['suit'] != trump_suit and ranks[card['rank']] > 10)\n        return non_trump_high_count / len(hand) if hand else 0\n\n    # Retrieve relevant information from game state\n    common = state['common']\n    players = state['players']\n    current_player_index = common['current_player']\n    trump_suit = common['trump_suit']\n    deck_size = common['facedown_cards']['deck_size']\n    current_player = players[current_player_index]\n    hand = current_player['facedown_cards']['hand']\n    num_players = common['num_players']\n\n    # Calculate parameters for decision\n    trump_ratio = trump_suit_ratio(hand, trump_suit)\n    high_ratio = high_card_ratio(hand, trump_suit)\n\n    # Determine current action card information\n    action_card = action['args']\n    action_card_rank = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \n                        \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}[action_card['rank']]\n    is_trump_action = action_card['suit'] == trump_suit\n\n    # Calculate stock impact and opponent uncertainty\n    stock_impact = deck_size / 52.0  # Assume full deck size for scale\n    opponent_uncertainty = (52 - deck_size - len(hand)) / 52.0\n\n    # Base reward on focus strategy\n    result_score = 0.5  # Base score\n\n    # Adjust score based on refined strategy guidelines\n    if is_trump_action:\n        result_score += 0.2 * min(trump_ratio, 1 - trump_ratio)\n    else:\n        result_score += 0.2 * high_ratio\n\n    # Incorporate stock size impact and opponent uncertainty\n    result_score += 0.1 * stock_impact\n    result_score -= 0.1 * opponent_uncertainty\n\n    # Normalize score to be between 0 and 1\n    result_score = max(0, min(1, result_score))\n\n    return result_score\n"
    ]
}