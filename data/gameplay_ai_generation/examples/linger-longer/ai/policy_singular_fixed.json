{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe player who lingers longer than the rest and is the last player holding cards is the winner.\n\n### The Deal\n\nEach player receives as many cards as there are players in the game. For example, if there are five players, each player gets five cards.\n\nThe dealer shuffles the cards and deals them one at a time face down to the players. The remaining cards are placed in a stack in the center of the players. This stack becomes the stock.\n\nOnce all players have their cards, the dealer takes the last card they dealt to themselves and turns it over, showing all the other players, then places it back into their hand. The card shown is the trump suit for the game.\n\n### The Play\n\nThe player directly to the left of the dealer goes first, putting any card in the trump suit in the middle of the table. If a trump card cannot be played, the player can play any card in his hand.\n\nThe next player goes by playing the suit or a trump card. You are trying to win the trick, so play the highest ranking card possible.\n\nPlay continues to the left until every player has played their card.\n\nWhichever player played the highest card or highest trump card, if a trump card was played, wins the trick. The cards from the finished trick are placed to the side and the winner of the trick takes the top card from the stock adding it to their hand. The winner then plays the first card starting the next trick.\n\nIf at any time during the game a player runs out of cards, they immediately withdraw from the game",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"trump_suit\": \"hearts\", \"is_over\": false, \"faceup_cards\": {\"current_trick\": [[{\"rank\": \"7\", \"suit\": \"hearts\"}, 0], [{\"rank\": \"8\", \"suit\": \"clubs\"}, 1]]}, \"facedown_cards\": {\"deck_size\": 35}}, \"players\": [{\"public\": {\"tricks_won\": 1}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 2}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"J\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(suit: spades, rank: J)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays J-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"4\"}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(suit: spades, rank: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 4-spades.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 5-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"7\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: play-(suit: hearts, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 7-hearts.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"8\"}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(suit: clubs, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8-clubs.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"K\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"suit\": \"diamonds\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"A\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing the shared information about the current state of the game.\", \"common.num_players\": \"The total number of players participating in the game. In this instance, it is set to 4.\", \"common.current_player\": \"The index of the player whose turn it is to play. Here, the current player is player 2.\", \"common.trump_suit\": \"The suit that is designated as the trump suit for the game. It is 'hearts' in this instance.\", \"common.is_over\": \"A boolean indicating whether the game has been completed. Currently, it is 'false', which means the game is still ongoing.\", \"common.faceup_cards.current_trick\": \"A list of tuples where each tuple contains a card object and the player index who played it. Represents the cards that are part of the current trick being played.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck that have not been drawn or played yet. Here, there are 35 cards left.\", \"players\": \"A list of dictionaries, each containing the state corresponding to an individual player in the game. There are four entries here for the four players.\", \"players[n].public.tricks_won\": \"Represents the number of tricks that the player has won so far in the game. Initially, this varies for each player.\", \"players[n].facedown_cards.hand_size\": \"An integer denoting how many cards each player currently holds in their hand, but not specifying which cards they are.\", \"players[n].public.current_player\": \"A boolean attribute present only in the current player that denotes which player is currently active. True for the current player (player 2 in this context).\", \"players[n].facedown_cards.hand\": \"A detailed list of card objects, each represented by its rank and suit, that the current player holds in their hand.\", \"recent_history\": \"A chronological list of dictionaries, each capturing past actions, informational messages, and turn transitions that have transpired during the game.\", \"recent_history[].type\": \"Denotes the type of entry in the recent history. Could be 'action' indicating a player's move, 'info' for informational messages, or 'turn_end' marking the end of a player's turn.\", \"recent_history[].player_id\": \"The index of the player associated with the action or turn_end in the history. It is null for info messages.\", \"recent_history[].action\": \"A dictionary specifying the action taken by the player during their turn, capturing the action type ('play') and the card played.\", \"recent_history[].msg\": \"A string message describing the operations or events in human-readable format.\", \"legal_actions\": \"A list of dictionaries each detailing the actions legally available to the current player, providing options to play from their hand.\", \"legal_actions[].action\": \"The type of action that can be taken. In this case, it is 'play', indicating playing a card from the hand.\", \"legal_actions[].args\": \"A dictionary object within each legal action specifying the details of the card (suit and rank) that can be played.\"}",
    "policy_list": [
        "**Optimal Card Play Strategy**\nThis strategy focuses on playing the highest possible card in the trump suit to increase the chances of winning each trick. If no trump card is available, play the highest non-trump card. Remember which high cards have already been played through the game history and adjust tactics accordingly, to avoid playing a high card when it's less likely to win."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    common = state['common']\n    players = state['players']\n    legal_actions = state['legal_actions']\n\n    # Trump suit\n    trump_suit = common['trump_suit']\n\n    # Current player's hand\n    current_player_id = common['current_player']\n    current_player_hand = players[current_player_id]['facedown_cards']['hand']\n\n    # Determine the value of the card represented by action\n    def card_value(card):\n        rank_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n                      '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return rank_order[card['rank']]\n\n    # Check if the action is a card play or a pass\n    if action.get('card') is None:\n        # Handle pass or other non-play actions if needed\n        return 0.0\n\n    # Extract potential card to be played from the action\n    play_card = action['card']\n    play_card_value = card_value(play_card)\n    \n    # Determine if the card from action is a trump card\n    is_trump_card = play_card['suit'] == trump_suit\n\n    # Check the highest card currently in the current trick\n    current_trick = common['faceup_cards']['current_trick']\n    highest_card_value = 0\n    is_trump_in_trick = False\n    for card_info in current_trick:\n        card, player_id = card_info['card'], card_info['player_id']\n        card_val = card_value(card)\n        if card['suit'] == trump_suit:\n            is_trump_in_trick = True\n            if card_val > highest_card_value:\n                highest_card_value = card_val\n        elif not is_trump_in_trick and card_val > highest_card_value:\n            highest_card_value = card_val\n\n    # Calculate the reward\n    if is_trump_card:\n        if play_card_value > highest_card_value or not is_trump_in_trick:\n            # Strong trump play - higher chance of winning\n            result_score = 0.8 + (play_card_value / 14 * 0.2)\n        else:\n            # Weak trump play - lower chance of winning\n            result_score = 0.6 + (play_card_value / 14 * 0.2)\n    else:\n        if not is_trump_in_trick and play_card_value > highest_card_value:\n            # Strong non-trump play when no trump is in play - moderate chance of winning\n            result_score = 0.5 + (play_card_value / 14 * 0.3)\n        else:\n            # Lower chance actions\n            result_score = 0.2 + (play_card_value / 14 * 0.3)\n        \n    # Account for remaining cards in the hand and their potential power\n    hand_strength = 0\n    for card in current_player_hand:\n        if card != play_card:\n            v = card_value(card)\n            hand_strength += (v / 14)\n\n    result_score += hand_strength / (len(current_player_hand) - 1 + 1e-5) * 0.1\n\n    # Clamp result score between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n    return result_score\n"
    ]
}