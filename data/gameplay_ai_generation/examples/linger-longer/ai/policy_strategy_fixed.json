{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe player who lingers longer than the rest and is the last player holding cards is the winner.\n\n### The Deal\n\nEach player receives as many cards as there are players in the game. For example, if there are five players, each player gets five cards.\n\nThe dealer shuffles the cards and deals them one at a time face down to the players. The remaining cards are placed in a stack in the center of the players. This stack becomes the stock.\n\nOnce all players have their cards, the dealer takes the last card they dealt to themselves and turns it over, showing all the other players, then places it back into their hand. The card shown is the trump suit for the game.\n\n### The Play\n\nThe player directly to the left of the dealer goes first, putting any card in the trump suit in the middle of the table. If a trump card cannot be played, the player can play any card in his hand.\n\nThe next player goes by playing the suit or a trump card. You are trying to win the trick, so play the highest ranking card possible.\n\nPlay continues to the left until every player has played their card.\n\nWhichever player played the highest card or highest trump card, if a trump card was played, wins the trick. The cards from the finished trick are placed to the side and the winner of the trick takes the top card from the stock adding it to their hand. The winner then plays the first card starting the next trick.\n\nIf at any time during the game a player runs out of cards, they immediately withdraw from the game",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"trump_suit\": \"hearts\", \"is_over\": false, \"faceup_cards\": {\"current_trick\": [[{\"rank\": \"7\", \"suit\": \"hearts\"}, 0], [{\"rank\": \"8\", \"suit\": \"clubs\"}, 1]]}, \"facedown_cards\": {\"deck_size\": 35}}, \"players\": [{\"public\": {\"tricks_won\": 1}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 2}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"J\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(suit: spades, rank: J)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays J-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"4\"}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(suit: spades, rank: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 4-spades.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 5-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"7\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: play-(suit: hearts, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 7-hearts.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"8\"}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(suit: clubs, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8-clubs.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"K\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"suit\": \"diamonds\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"A\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing the shared information about the current state of the game.\", \"common.num_players\": \"The total number of players participating in the game. In this instance, it is set to 4.\", \"common.current_player\": \"The index of the player whose turn it is to play. Here, the current player is player 2.\", \"common.trump_suit\": \"The suit that is designated as the trump suit for the game. It is 'hearts' in this instance.\", \"common.is_over\": \"A boolean indicating whether the game has been completed. Currently, it is 'false', which means the game is still ongoing.\", \"common.faceup_cards.current_trick\": \"A list of tuples where each tuple contains a card object and the player index who played it. Represents the cards that are part of the current trick being played.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck that have not been drawn or played yet. Here, there are 35 cards left.\", \"players\": \"A list of dictionaries, each containing the state corresponding to an individual player in the game. There are four entries here for the four players.\", \"players[n].public.tricks_won\": \"Represents the number of tricks that the player has won so far in the game. Initially, this varies for each player.\", \"players[n].facedown_cards.hand_size\": \"An integer denoting how many cards each player currently holds in their hand, but not specifying which cards they are.\", \"players[n].public.current_player\": \"A boolean attribute present only in the current player that denotes which player is currently active. True for the current player (player 2 in this context).\", \"players[n].facedown_cards.hand\": \"A detailed list of card objects, each represented by its rank and suit, that the current player holds in their hand.\", \"recent_history\": \"A chronological list of dictionaries, each capturing past actions, informational messages, and turn transitions that have transpired during the game.\", \"recent_history[].type\": \"Denotes the type of entry in the recent history. Could be 'action' indicating a player's move, 'info' for informational messages, or 'turn_end' marking the end of a player's turn.\", \"recent_history[].player_id\": \"The index of the player associated with the action or turn_end in the history. It is null for info messages.\", \"recent_history[].action\": \"A dictionary specifying the action taken by the player during their turn, capturing the action type ('play') and the card played.\", \"recent_history[].msg\": \"A string message describing the operations or events in human-readable format.\", \"legal_actions\": \"A list of dictionaries each detailing the actions legally available to the current player, providing options to play from their hand.\", \"legal_actions[].action\": \"The type of action that can be taken. In this case, it is 'play', indicating playing a card from the hand.\", \"legal_actions[].args\": \"A dictionary object within each legal action specifying the details of the card (suit and rank) that can be played.\"}",
    "policy_list": [
        "**Maximize Trump Usage**\nAlways prioritize playing trump cards whenever possible to ensure winning the trick, even if it means playing a lower-ranked trump card.",
        "**Track Opponent Behavior**\nPay attention to the cards played by opponents, particularly the suits they avoid, which can indicate which suits they lack or are low in.",
        "**Conserve High Cards**\nHold onto high-ranking cards within non-trump suits for as long as possible, using them strategically when opponents have already played lower cards of the same suit.",
        "**Optimize Stock Drawing**\nWhen winning a trick, prioritize drawing cards strategically from the stock to refresh your hand with higher-ranked or trump cards if possible."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def rank_value(rank: str) -> int:\n        \"\"\"Maps card ranks to values assuming '2' is the lowest and 'A' is the highest.\"\"\"\n        values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, \n                  '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return values[rank]\n\n    # Ensure action contains 'rank' and 'suit' indicating it's a card-playing action\n    if 'rank' not in action or 'suit' not in action:\n        return 0.0  # Return a default score for non-card-playing actions\n\n    current_trick = state['common']['faceup_cards']['current_trick']\n    trump_suit = state['common']['trump_suit']\n\n    # Determine action card's trump status and rank\n    action_suit = action.get('suit')\n    action_rank = action.get('rank')\n    action_is_trump = action_suit == trump_suit\n    action_rank_value = rank_value(action_rank)\n\n    # Determine the highest card in the current trick\n    highest_card_value = -1\n    highest_card_is_trump = False\n    for card, _player in current_trick:\n        is_trump = card['suit'] == trump_suit\n        card_value = rank_value(card['rank'])\n        if is_trump and not highest_card_is_trump:\n            highest_card_value = card_value\n            highest_card_is_trump = True\n        elif is_trump == highest_card_is_trump and card_value > highest_card_value:\n            highest_card_value = card_value\n\n    # Calculate the result_score\n    result_score = 0.5  # Base score for making a play\n    if action_is_trump:\n        result_score += 0.3  # Bonus for playing a trump card\n        if action_rank_value > highest_card_value or not highest_card_is_trump:\n            result_score += 0.2  # Higher bonus if it's the highest trump\n\n    return min(max(result_score, 0), 1)  # Ensure the score is within the 0 to 1 range\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def card_value(card, trump_suit):\n        \"\"\" Assign a value to a card based on its rank and the trump suit \"\"\"\n        rank_value = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, \n                      '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        value = rank_value[card['rank']]\n        if card['suit'] == trump_suit:\n            value *= 2\n        return value\n\n    common = state['common']\n    current_player_id = common['current_player']\n    trump_suit = common['trump_suit']\n    current_trick = common['faceup_cards']['current_trick']\n    num_players = common['num_players']\n    deck_size = common['facedown_cards']['deck_size']\n\n    if action['action'] == 'pass':\n        # If the action is a 'pass', the score might be 0 or based on some different logic\n        # For simplicity, let's assume passing doesn't change the score.\n        return 0.0\n\n    # Evaluate the card being played if not 'pass'\n    card_value_action = card_value(action['args'], trump_suit)\n    \n    highest_trick_value = 0\n    for card, player_id in current_trick:\n        if player_id != current_player_id:\n            value = card_value(card, trump_suit)\n            if value > highest_trick_value:\n                highest_trick_value = value\n\n    prob_win_trick = 0.0\n    prob_win_game = 0.0\n\n    if card_value_action > highest_trick_value:\n        prob_win_trick = 1.0 / (num_players - len(current_trick))\n    \n    total_tricks_won = sum(player['public']['tricks_won'] for player in state['players'])\n    player_tricks_won = state['players'][current_player_id]['public']['tricks_won']\n    \n    if total_tricks_won > 0:\n        prob_win_game = (player_tricks_won + prob_win_trick) / total_tricks_won\n    else:\n        prob_win_game = prob_win_trick\n\n    hand_size = len(state['players'][current_player_id]['facedown_cards']['hand'])\n    if deck_size > 0:\n        prob_win_game += (hand_size / deck_size) * 0.5\n\n    result_score = min(1.0, max(0.0, prob_win_game))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    num_players = state['common']['num_players']\n    current_player = state['common']['current_player']\n    trump_suit = state['common']['trump_suit']\n    deck_size = state['common']['facedown_cards']['deck_size']\n    current_trick = state['common']['faceup_cards']['current_trick']\n    \n    # Extract player's hand, assuming player's hand holds dictionaries with 'rank' and 'suit'\n    player_hand = state['players'][current_player]['facedown_cards'].get('hand', [])\n    \n    # Check if the action is to play a card and a card is specified in the action\n    if action.get('action') == 'play_card':\n        action_card = action.get('card')\n        if not action_card:\n            raise ValueError(\"The action card details are missing in the action dictionary.\")\n        \n        if not player_hand:\n            # If the player's hand is empty, playing a card is not a valid action\n            raise ValueError(\"Invalid action: trying to play a card with an empty hand.\")\n        \n        action_card_rank = action_card['rank']\n        action_card_suit = action_card['suit']\n\n        # Rank function for cards\n        rank_values = {str(i): i for i in range(2, 11)}\n        rank_values.update({'J': 11, 'Q': 12, 'K': 13, 'A': 14})\n\n        # Calculate action card value considering trump suit\n        action_card_value = rank_values[action_card_rank]\n        is_trump = action_card_suit == trump_suit\n        if is_trump:\n            action_card_value += 14  # Enhancing trump cards value\n\n        # Calculate current trick maximum card value\n        trick_values = [\n            rank_values[card['rank']] + (14 if card['suit'] == trump_suit else 0)\n            for card, _ in current_trick\n        ]\n        max_trick_value = max(trick_values) if trick_values else 0\n\n        # Evaluate the action\n        if action_card_value > max_trick_value:\n            # Good chance to win current trick\n            trick_win_score = 0.7\n        else:\n            # Other players might win the current trick\n            trick_win_score = 0.3\n\n        # Evaluate current hand strategic conservation\n        num_high_cards = sum(1 for card in player_hand \n                             if rank_values[card['rank']] > 10 and card['suit'] != trump_suit)\n        \n        conservation_score = 0\n        if len(player_hand) > 0:\n            conservation_score = num_high_cards / len(player_hand)\n\n        # Evaluate based on the player's opportunity to draw cards\n        draw_probability = deck_size / 52\n\n        # Combine scores\n        result_score = 0.3 * trick_win_score + 0.4 * conservation_score + 0.3 * draw_probability\n\n        # Normalize the score\n        result_score = min(max(result_score, 0), 1)\n\n        return result_score\n\n    else:\n        # If the action is not to play a card (e.g., pass), return a neutral score\n        return 0.0\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from the state\n    common = state['common']\n    players = state['players']\n    current_player_idx = common['current_player']\n    trump_suit = common['trump_suit']\n    deck_size = common['facedown_cards']['deck_size']\n    current_player = players[current_player_idx]\n    hand = current_player['facedown_cards']['hand']\n    \n    # Initialize the score\n    result_score = 0.0\n\n    # Check if the action is 'pass'; no card to evaluate in this case\n    if action['action'] == 'pass':\n        return 0.0  # Define the score for a pass action if needed\n\n    # Since action isn't pass, proceed to evaluate the card in the action\n    action_card = action['args']\n\n    # Assess the value of the action\n    # 1. Check if the action card is a trump card and high-ranked\n    if action_card['suit'] == trump_suit:\n        # Assign higher score if playing a trump card\n        result_score += 0.3\n        if action_card['rank'] in ['A', 'K', 'Q', 'J']:\n            result_score += 0.2\n\n    # 2. Evaluate the strength of the hand after playing the card\n    high_value_trump_count = sum(1 for card in hand if card['suit'] == trump_suit and card['rank'] in ['A', 'K', 'Q', 'J'])\n    normal_trump_count = sum(1 for card in hand if card['suit'] == trump_suit and card['rank'] not in ['A', 'K', 'Q', 'J'])\n    non_trump_high_value_count = sum(1 for card in hand if card['suit'] != trump_suit and card['rank'] in ['A', 'K', 'Q', 'J'])\n\n    # High trump cards in hand are valuable\n    result_score += 0.1 * high_value_trump_count\n    # Other trump cards have moderate value\n    result_score += 0.05 * normal_trump_count\n    # High non-trump cards have minimal value\n    result_score += 0.02 * non_trump_high_value_count\n\n    # 3. Use the number of tricks won as a positive factor\n    tricks_won = current_player['public']['tricks_won']\n    result_score += 0.05 * tricks_won\n\n    # 4. Consider the deck size\n    if deck_size < 10:\n        result_score += 0.1  # End game boost, higher chance you might linger longer\n\n    # Ensure result_score is in range [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n\n    return result_score\n"
    ]
}