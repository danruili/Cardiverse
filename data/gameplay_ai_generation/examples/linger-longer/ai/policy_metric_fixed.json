{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe player who lingers longer than the rest and is the last player holding cards is the winner.\n\n### The Deal\n\nEach player receives as many cards as there are players in the game. For example, if there are five players, each player gets five cards.\n\nThe dealer shuffles the cards and deals them one at a time face down to the players. The remaining cards are placed in a stack in the center of the players. This stack becomes the stock.\n\nOnce all players have their cards, the dealer takes the last card they dealt to themselves and turns it over, showing all the other players, then places it back into their hand. The card shown is the trump suit for the game.\n\n### The Play\n\nThe player directly to the left of the dealer goes first, putting any card in the trump suit in the middle of the table. If a trump card cannot be played, the player can play any card in his hand.\n\nThe next player goes by playing the suit or a trump card. You are trying to win the trick, so play the highest ranking card possible.\n\nPlay continues to the left until every player has played their card.\n\nWhichever player played the highest card or highest trump card, if a trump card was played, wins the trick. The cards from the finished trick are placed to the side and the winner of the trick takes the top card from the stock adding it to their hand. The winner then plays the first card starting the next trick.\n\nIf at any time during the game a player runs out of cards, they immediately withdraw from the game",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"trump_suit\": \"hearts\", \"is_over\": false, \"faceup_cards\": {\"current_trick\": [[{\"rank\": \"7\", \"suit\": \"hearts\"}, 0], [{\"rank\": \"8\", \"suit\": \"clubs\"}, 1]]}, \"facedown_cards\": {\"deck_size\": 35}}, \"players\": [{\"public\": {\"tricks_won\": 1}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 2}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"J\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(suit: spades, rank: J)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays J-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"4\"}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(suit: spades, rank: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 4-spades.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 5-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"7\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: play-(suit: hearts, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 7-hearts.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"8\"}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(suit: clubs, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8-clubs.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"K\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"suit\": \"diamonds\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"A\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing the shared information about the current state of the game.\", \"common.num_players\": \"The total number of players participating in the game. In this instance, it is set to 4.\", \"common.current_player\": \"The index of the player whose turn it is to play. Here, the current player is player 2.\", \"common.trump_suit\": \"The suit that is designated as the trump suit for the game. It is 'hearts' in this instance.\", \"common.is_over\": \"A boolean indicating whether the game has been completed. Currently, it is 'false', which means the game is still ongoing.\", \"common.faceup_cards.current_trick\": \"A list of tuples where each tuple contains a card object and the player index who played it. Represents the cards that are part of the current trick being played.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck that have not been drawn or played yet. Here, there are 35 cards left.\", \"players\": \"A list of dictionaries, each containing the state corresponding to an individual player in the game. There are four entries here for the four players.\", \"players[n].public.tricks_won\": \"Represents the number of tricks that the player has won so far in the game. Initially, this varies for each player.\", \"players[n].facedown_cards.hand_size\": \"An integer denoting how many cards each player currently holds in their hand, but not specifying which cards they are.\", \"players[n].public.current_player\": \"A boolean attribute present only in the current player that denotes which player is currently active. True for the current player (player 2 in this context).\", \"players[n].facedown_cards.hand\": \"A detailed list of card objects, each represented by its rank and suit, that the current player holds in their hand.\", \"recent_history\": \"A chronological list of dictionaries, each capturing past actions, informational messages, and turn transitions that have transpired during the game.\", \"recent_history[].type\": \"Denotes the type of entry in the recent history. Could be 'action' indicating a player's move, 'info' for informational messages, or 'turn_end' marking the end of a player's turn.\", \"recent_history[].player_id\": \"The index of the player associated with the action or turn_end in the history. It is null for info messages.\", \"recent_history[].action\": \"A dictionary specifying the action taken by the player during their turn, capturing the action type ('play') and the card played.\", \"recent_history[].msg\": \"A string message describing the operations or events in human-readable format.\", \"legal_actions\": \"A list of dictionaries each detailing the actions legally available to the current player, providing options to play from their hand.\", \"legal_actions[].action\": \"The type of action that can be taken. In this case, it is 'play', indicating playing a card from the hand.\", \"legal_actions[].args\": \"A dictionary object within each legal action specifying the details of the card (suit and rank) that can be played.\"}",
    "policy_list": [
        "**Trump Suit Card Ratio**\nThe ratio of cards in the trump suit to the total number of cards in the player's hand. This metric evaluates how strong a player's hand is in terms of potential to win tricks, as trump cards are more likely to win.",
        "**Trick Winning Probability**\nAn estimation of the likelihood of winning the current trick, based on the cards played so far, the known trump card, and the strength of the cards remaining in the player's hand. This helps in deciding which card to play for maximizing the chance of winning the trick.",
        "**Stock Size Impact**\nA metric indicating how the size of the stock affects strategy. With a larger stock, the importance of drawing high-value cards increases, while with a depleted stock, conserving strong cards in hand may become more beneficial.",
        "**Opponent Card Uncertainty**\nA measure of uncertainty regarding the remaining cards in the opponents' hands, based on the historical play. It helps in assessing risk when deciding whether to play aggressively or conservatively in the given state of play."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary information from the state\n    current_player = state['common']['current_player']\n    trump_suit = state['common']['trump_suit']\n    player_hand = state['players'][current_player]['facedown_cards']['hand']\n    num_tricks_won_by_player = state['players'][current_player]['public']['tricks_won']\n    total_players = state['common']['num_players']\n    \n    # Calculate trump suit card ratio\n    if len(player_hand) > 0:\n        trump_cards_in_hand = [card for card in player_hand if card.get('suit') == trump_suit]\n        trump_suit_card_ratio = len(trump_cards_in_hand) / len(player_hand)\n    else:\n        trump_suit_card_ratio = 0.0\n\n    # Calculate the impact of the current action (assuming suit and rank exist for action)\n    if 'args' in action:\n        action_suit = action['args'].get('suit', '')\n        action_rank = action['args'].get('rank', '')\n        \n        is_action_trump = (action_suit == trump_suit)\n        \n        # Helper function logic within main function\n        rank_dict = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, \n                     '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        card_rank_value = rank_dict.get(action_rank, 0)\n        \n        if is_action_trump:\n            # Higher bonus for playing a trump card\n            score_from_action = 0.5 + (0.5 * card_rank_value / 14)\n        else:\n            # Lower bonus for non-trump cards\n            score_from_action = 0.2 + (0.3 * card_rank_value / 14)\n    else:\n        # In case of a pass or no card action, assume a neutral score impact\n        score_from_action = 0.0\n\n    # Define the score from trump suit card ratio\n    score_from_trump_ratio = trump_suit_card_ratio\n\n    # Integrate scores for the final result\n    result_score = (0.6 * score_from_trump_ratio) + (0.4 * score_from_action)\n    result_score = min(1.0, result_score)  # Ensure the score does not exceed 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import numpy as np\n    \n    # Constants for score weighting\n    TRUMP_ADVANTAGE = 0.2\n    MAX_TRUMP_ADVANTAGE = 0.8\n    HAND_STRENGTH_FACTOR = 0.5\n\n    # Extract information from the state\n    num_players = state[\"common\"][\"num_players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    current_trick = state[\"common\"][\"faceup_cards\"][\"current_trick\"]\n    my_hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n\n    # If there are no cards in hand, return a score of 0.0 (cannot play a card)\n    if not my_hand:\n        return 0.0\n\n    # Assume the first card as a proposed card for simplicity\n    proposed_card = my_hand[0] if my_hand else None\n    \n    # Check if we can proceed with a valid card\n    if not proposed_card:\n        return 0.0\n\n    # Helper function to compute card rank\n    def card_strength(card):\n        rank_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n                      '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return rank_order[card[\"rank\"]]\n\n    # Determine the strength of the proposed card\n    card_value = card_strength(proposed_card)\n    is_trump = proposed_card[\"suit\"] == trump_suit\n    player_strength = card_value + (TRUMP_ADVANTAGE if is_trump else 0)\n\n    # Find the current leading card\n    if current_trick:\n        leading_card = max(current_trick, key=lambda x: card_strength(x[0]) + (TRUMP_ADVANTAGE if x[0]['suit'] == trump_suit else 0))\n        leading_strength = card_strength(leading_card[0]) + (TRUMP_ADVANTAGE if leading_card[0]['suit'] == trump_suit else 0)\n    else:\n        leading_strength = 0\n\n    # Calculate the probability of winning the trick with the proposed card\n    trump_cards = [card for card in my_hand if card[\"suit\"] == trump_suit]\n    max_trump_str = max(card_strength(card) for card in trump_cards) if trump_cards else 0\n    trump_factor = (card_strength(proposed_card) / max_trump_str) * MAX_TRUMP_ADVANTAGE if is_trump and max_trump_str != 0 else 0\n\n    # Score calculation: sum of various factors\n    score = HAND_STRENGTH_FACTOR * (player_strength / (player_strength + leading_strength + 1e-6)) + trump_factor\n\n    # Ensure the score remains within bounds:\n    result_score = np.clip(score, 0.0, 1.0)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n    \n    def calculate_card_strength(card: dict, trump_suit: str) -> int:\n        \"\"\"Calculate the strength of a card based on its rank and whether it is a trump card.\"\"\"\n        rank_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\n                      'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        strength = rank_order[card['rank']]\n        if card['suit'] == trump_suit:\n            strength += 15  # Add extra strength for trump suit\n        return strength\n\n    # Extract common game info\n    num_players = state['common']['num_players']\n    current_player_index = state['common']['current_player']\n    trump_suit = state['common']['trump_suit']\n    deck_size = state['common']['facedown_cards']['deck_size']\n    current_trick = state['common']['faceup_cards']['current_trick']\n    \n    # Extract player specific info\n    player_hand = state['players'][current_player_index]['facedown_cards']['hand']\n    player_tricks_won = state['players'][current_player_index]['public']['tricks_won']\n    total_tricks_won = sum(player['public']['tricks_won'] for player in state['players'])\n\n    # Evaluate stock size impact\n    stock_size_impact = (deck_size / (52 - len(player_hand)))  # 52 cards minus those in play\n    stock_size_impact = max(0.1, min(stock_size_impact, 1.0))  # Keep it between 0.1 to 1\n\n    # Handling action cards\n    if 'args' in action:\n        chosen_card = action['args']\n        chosen_card_strength = calculate_card_strength(chosen_card, trump_suit)\n    else:\n        # In this case 'pass', assume no card is chosen thus no trick impact\n        chosen_card_strength = 0\n    \n    # Evaluate the current trick impact (players who have played lower strength cards favors current player)\n    trick_impact = 0.0\n    for card, _ in current_trick:\n        if calculate_card_strength(card, trump_suit) < chosen_card_strength:\n            trick_impact += 1\n    trick_impact /= num_players  # Normalize by number of players\n\n    # Current victory potential: Prefer winning more tricks now\n    current_victory_potential = (player_tricks_won + (1 if chosen_card_strength > 0 else 0)) / (total_tricks_won + 1)  # Assume winning if not passing\n\n    # Combine all factors to compute a reward value between 0 and 1\n    result_score = (0.4 * stock_size_impact) + (0.3 * trick_impact) + (0.3 * current_victory_potential)\n    result_score = max(0.0, min(result_score, 1.0))  # Constrain result to be between 0 and 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n    \n    # Extract common game state information\n    common = state['common']\n    num_players = common['num_players']\n    current_player = common['current_player']\n    trump_suit = common['trump_suit']\n\n    # Extract current player's state\n    player_state = state['players'][current_player]\n    hand = player_state['facedown_cards'].get('hand', [])\n    tricks_won = player_state['public']['tricks_won']\n    \n    # In this case, no specific card is given in the action to evaluate\n    action_type = action['action']\n    \n    # Initialize factors for scoring based on hypothetical card strength if action is not \"pass\"\n    # Treat the \"pass\" as a separate case or as a neutral/default decision\n    if action_type != 'pass':\n        # IMPLEMENTED based on assumption that one might need per card when non-pass actions provided\n        card_to_play = action.get('card', {}) # Hypothetical, assuming action has relevant card data\n        card_rank = card_to_play.get('rank', '2') # Default rank used if not provided\n        card_suit = card_to_play.get('suit', 'hearts') # Default suit used if not provided\n        card_strength = 1 if card_suit == trump_suit else 0.5\n        rank_order = {\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7,\n                      \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14}\n        rank_value = rank_order.get(card_rank, 0)\n    else:\n        card_strength = 0 # If the action is 'pass', there's no card strength involved\n        rank_value = 0\n    \n    # Calculate potential points from hand composition\n    trump_cards_in_hand = sum(1 for card in hand if card['suit'] == trump_suit)\n    high_cards_in_hand = sum(1 for card in hand if rank_order.get(card['rank'], 0) > 10)\n\n    # Opponent card uncertainty\n    opponent_hand_sizes = [p['facedown_cards']['hand_size'] for i, p in enumerate(state['players']) if i != current_player]\n    opponent_uncertainty = sum(1 / size for size in opponent_hand_sizes if size > 0)\n\n    # Calculate a probability-like score from weighted components\n    result_score = (tricks_won + (0.1 * trump_cards_in_hand) + (0.05 * high_cards_in_hand) + (0.1 * card_strength * rank_value))\n    result_score /= (1 + opponent_uncertainty)\n    result_score = math.tanh(result_score / 10)\n\n    return result_score\n"
    ]
}