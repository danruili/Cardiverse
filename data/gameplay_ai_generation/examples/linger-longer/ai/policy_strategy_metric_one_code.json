{
    "game_description": "### The Pack\n\nThe standard 52-card pack is used.\n\n### Object of the Game\n\nThe player who lingers longer than the rest and is the last player holding cards is the winner.\n\n### The Deal\n\nEach player receives as many cards as there are players in the game. For example, if there are five players, each player gets five cards.\n\nThe dealer shuffles the cards and deals them one at a time face down to the players. The remaining cards are placed in a stack in the center of the players. This stack becomes the stock.\n\nOnce all players have their cards, the dealer takes the last card they dealt to themselves and turns it over, showing all the other players, then places it back into their hand. The card shown is the trump suit for the game.\n\n### The Play\n\nThe player directly to the left of the dealer goes first, putting any card in the trump suit in the middle of the table. If a trump card cannot be played, the player can play any card in his hand.\n\nThe next player goes by playing the suit or a trump card. You are trying to win the trick, so play the highest ranking card possible.\n\nPlay continues to the left until every player has played their card.\n\nWhichever player played the highest card or highest trump card, if a trump card was played, wins the trick. The cards from the finished trick are placed to the side and the winner of the trick takes the top card from the stock adding it to their hand. The winner then plays the first card starting the next trick.\n\nIf at any time during the game a player runs out of cards, they immediately withdraw from the game",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"trump_suit\": \"hearts\", \"is_over\": false, \"faceup_cards\": {\"current_trick\": [[{\"rank\": \"7\", \"suit\": \"hearts\"}, 0], [{\"rank\": \"8\", \"suit\": \"clubs\"}, 1]]}, \"facedown_cards\": {\"deck_size\": 35}}, \"players\": [{\"public\": {\"tricks_won\": 1}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 2}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"K\", \"suit\": \"clubs\"}, {\"rank\": \"9\", \"suit\": \"diamonds\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}]}, \"faceup_cards\": {}}, {\"public\": {\"tricks_won\": 0}, \"facedown_cards\": {\"hand_size\": 3}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"J\"}, \"id\": 2}, \"msg\": \"Player 2 decides to: play-(suit: spades, rank: J)\"}, {\"type\": \"info\", \"msg\": \"Player 2 plays J-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"spades\", \"rank\": \"4\"}, \"id\": 1}, \"msg\": \"Player 3 decides to: play-(suit: spades, rank: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 3 plays 4-spades.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 5-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"7\"}, \"id\": 3}, \"msg\": \"Player 0 decides to: play-(suit: hearts, rank: 7)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 7-hearts.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"8\"}, \"id\": 1}, \"msg\": \"Player 1 decides to: play-(suit: clubs, rank: 8)\"}, {\"type\": \"info\", \"msg\": \"Player 1 plays 8-clubs.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"K\"}, \"id\": 0}, {\"action\": \"play\", \"args\": {\"suit\": \"diamonds\", \"rank\": \"9\"}, \"id\": 1}, {\"action\": \"play\", \"args\": {\"suit\": \"hearts\", \"rank\": \"A\"}, \"id\": 2}]}\n\nExplanation: \n{\"common\": \"A dictionary containing the shared information about the current state of the game.\", \"common.num_players\": \"The total number of players participating in the game. In this instance, it is set to 4.\", \"common.current_player\": \"The index of the player whose turn it is to play. Here, the current player is player 2.\", \"common.trump_suit\": \"The suit that is designated as the trump suit for the game. It is 'hearts' in this instance.\", \"common.is_over\": \"A boolean indicating whether the game has been completed. Currently, it is 'false', which means the game is still ongoing.\", \"common.faceup_cards.current_trick\": \"A list of tuples where each tuple contains a card object and the player index who played it. Represents the cards that are part of the current trick being played.\", \"common.facedown_cards.deck_size\": \"The number of cards remaining in the deck that have not been drawn or played yet. Here, there are 35 cards left.\", \"players\": \"A list of dictionaries, each containing the state corresponding to an individual player in the game. There are four entries here for the four players.\", \"players[n].public.tricks_won\": \"Represents the number of tricks that the player has won so far in the game. Initially, this varies for each player.\", \"players[n].facedown_cards.hand_size\": \"An integer denoting how many cards each player currently holds in their hand, but not specifying which cards they are.\", \"players[n].public.current_player\": \"A boolean attribute present only in the current player that denotes which player is currently active. True for the current player (player 2 in this context).\", \"players[n].facedown_cards.hand\": \"A detailed list of card objects, each represented by its rank and suit, that the current player holds in their hand.\", \"recent_history\": \"A chronological list of dictionaries, each capturing past actions, informational messages, and turn transitions that have transpired during the game.\", \"recent_history[].type\": \"Denotes the type of entry in the recent history. Could be 'action' indicating a player's move, 'info' for informational messages, or 'turn_end' marking the end of a player's turn.\", \"recent_history[].player_id\": \"The index of the player associated with the action or turn_end in the history. It is null for info messages.\", \"recent_history[].action\": \"A dictionary specifying the action taken by the player during their turn, capturing the action type ('play') and the card played.\", \"recent_history[].msg\": \"A string message describing the operations or events in human-readable format.\", \"legal_actions\": \"A list of dictionaries each detailing the actions legally available to the current player, providing options to play from their hand.\", \"legal_actions[].action\": \"The type of action that can be taken. In this case, it is 'play', indicating playing a card from the hand.\", \"legal_actions[].args\": \"A dictionary object within each legal action specifying the details of the card (suit and rank) that can be played.\"}",
    "policy_list": [
        "**Trump Suit Card Ratio**\nThe ratio of cards in the trump suit to the total number of cards in the player's hand. This metric evaluates how strong a player's hand is in terms of potential to win tricks, as trump cards are more likely to win.\n**Trick Winning Probability**\nAn estimation of the likelihood of winning the current trick, based on the cards played so far, the known trump card, and the strength of the cards remaining in the player's hand. This helps in deciding which card to play for maximizing the chance of winning the trick.\n**Stock Size Impact**\nA metric indicating how the size of the stock affects strategy. With a larger stock, the importance of drawing high-value cards increases, while with a depleted stock, conserving strong cards in hand may become more beneficial.\n**Opponent Card Uncertainty**\nA measure of uncertainty regarding the remaining cards in the opponents' hands, based on the historical play. It helps in assessing risk when deciding whether to play aggressively or conservatively in the given state of play.\n**Maximize Trump Usage**\nAlways prioritize playing trump cards whenever possible to ensure winning the trick, even if it means playing a lower-ranked trump card.\n**Track Opponent Behavior**\nPay attention to the cards played by opponents, particularly the suits they avoid, which can indicate which suits they lack or are low in.\n**Conserve High Cards**\nHold onto high-ranking cards within non-trump suits for as long as possible, using them strategically when opponents have already played lower cards of the same suit.\n**Optimize Stock Drawing**\nWhen winning a trick, prioritize drawing cards strategically from the stock to refresh your hand with higher-ranked or trump cards if possible."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    # Helper function to calculate trump ratio\n    def trump_suit_card_ratio(hand, trump_suit):\n        return sum(1 for card in hand if card['suit'] == trump_suit) / len(hand)\n\n    # Helper function to calculate trick winning probability\n    def trick_winning_probability(state, action):\n        current_trick = state['common']['faceup_cards']['current_trick']\n        trump_suit = state['common']['trump_suit']\n        action_rank = action['args']['rank']\n        action_suit = action['args']['suit']\n\n        # Gather played trump cards and action is trump\n        played_trump_cards = [card for card, _ in current_trick if card['suit'] == trump_suit]\n        if action_suit == trump_suit:\n            if all(card['rank'] < action_rank for card in played_trump_cards):\n                return 0.9  # High winning probability if no higher trump in current trick\n        else:\n            played_current_suit_cards = [card for card, _ in current_trick if card['suit'] == action_suit]\n            if all(card['rank'] < action_rank for card in played_current_suit_cards) and not played_trump_cards:\n                return 0.8  # High winning probability if no higher card in current suit and no trump\n        return 0.2  # Lower probability otherwise\n\n    # Helper function to calculate stock size impact\n    def stock_size_impact(deck_size):\n        if deck_size > 30:\n            return 0.2  # Early game, focus on drawing strategies\n        elif deck_size < 10:\n            return 0.8  # Late game, focus on conserving strong cards\n        return 0.5  # Neutral\n\n    # Main function calculation\n    current_player = state['common']['current_player']\n    player_state = state['players'][current_player]\n    hand = player_state['facedown_cards']['hand']\n    trump_suit = state['common']['trump_suit']\n    deck_size = state['common']['facedown_cards']['deck_size']\n\n    # Calculate metrics\n    trump_ratio = trump_suit_card_ratio(hand, trump_suit)\n    trick_prob = trick_winning_probability(state, action)\n    stock_impact = stock_size_impact(deck_size)\n\n    # Combine metrics into a continuous score\n    result_score = 0.4 * trump_ratio + 0.4 * trick_prob + 0.2 * stock_impact\n\n    # Ensure result is within [0, 1] bounds\n    result_score = max(0.0, min(result_score, 1.0))\n    \n    return result_score\n"
    ]
}