{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Central Pile:** Cards collected from challenges and normal play.\n- **Turn Order:** A dynamic sequence visible to all players, which may change based on player actions, particularly in Phase 3.\n- **Phase Tracker:** Indicates the current phase of the game (Accumulation, Exchange and Alliances, or Gem Collection and Final Moves).\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Declared Rank:** Last rank announced by each player.\n  - **Exchanged Cards:** Cards publicized during exchanges in Phase 2.\n  - **Gems and Bonuses:** Number of gems and bonuses publicly known for each player, primarily observed in Phase 3.\n- **Private:**\n  - **Player Hand:** Individual cards visible only to the player.\n  - **Suit Diversity:** Count of unique suits in a player\u2019s hand.\n  - **Chance Cards:** Effects activated from the chance card deck, known only to the owning player.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, ..., 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Abilities:** Specific cards provide strategic advantages, like altering turns or shielding challenges.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck intermixes with a deck of chance cards enabling random modifiers.\n\n#### **Initial Dealing:**\n- Cards are evenly distributed among players until depleted, initiating the starting hand for each participant.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **Phase 1: Accumulation**\n1. **Declare and Place Cards:**\n   - Declare a rank and lay 1 to 4 cards face down.\n   - Must be current player's turn based on present sequence.\n2. **Challenge Declaration:**\n   - Challenge the last declared rank by another player with \"I doubt it.\"\n   - Available to the next player in sequence.\n\n#### **Phase 2: Exchange and Alliances**\n1. **Card Exchange:**\n   - Once per game, formally swap two cards with another agreed player.\n   - Both players must consent to proceed.\n2. **Form Alliances:**\n   - Form alliances temporarily for strategic benefits, influencing both parties\u2019 interactions.\n   - Requires agreement amongst involved players.\n\n#### **Phase 3: Gem Collection and Final Moves**\n1. **Collect Gems:**\n   - Leverage gems, earned by diverse suits or actions, for ability activation.\n   - Manifest through Phase 3 actions or bonuses.\n2. **Final Moves:**\n   - Each player concludes by passing one card to the next player on the right.\n\n#### **Special and Adaptive Actions:**\n- Use special chance cards to manipulate order or influence results, especially prevalent during strategic maneuvers in Phase 3.\n\n---\n\n### 5. **Round Sequence**\n\n#### **Contact of Play:**\n1. **Phase 1: Accumulation**\n   - Proceed clockwise in usual card placing, following sequence from Aces to Kings.\n2. **Phase 2: Exchange and Alliances**\n   - Execute exchanges and alliance formations explicitly detailed through player interactions.\n3. **Phase 3: Gem Collection and Adaptive Moves**\n   - Collect gems, enact special abilities, adapt turn orders, and accomplish final hand structuring.\n\n#### **Winning Conditions:**\n- At the close, evaluation hinges primarily on suit diversity, supplemented by strategic gem use and bonus achievements.\n\n---\n\n### 6. **Additional Mechanics & Rules**\n\n- **Chance Cards:** These bring in random elements affecting the trajectory of play\u2014clarified at the point of draw or effect activation.\n- **Turn Order Dynamicity:** Phase 3 explicitly incorporates decisions that can realign player order to optimize endgame interactions.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible to All Players:**\n- Cards challenged and revealed during disputes.\n- Publicly declared numbers of gems held.\n- Established alliances, known turn sequence changes during gameplay.\n\n#### **Hidden Information:**\n- Personal hands, chance card effects known or chosen by players, influencing player-specific strategy without revealing intents to others.\n\n---\n\n### 8. **Endgame Scoring**\n\n##### **Scoring Metrics:**\n- **Suit Diversity:** Number of unique suits establishes core competitiveness.\n- **Gems and Bonuses:** Added value through gems and bonuses enhances player capabilities and scoring flexibility.\n- Decision-making, card management, and strategy adaptability define the winner, with ties resolved through a concise, final assessment or shared victory.\n\nThis refined description provides clearer paths for gameplay transition through phases, explicitly delineates objectives, and aligns strategies with the game\u2019s dynamic interactions.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"central_pile\": [{\"rank\": \"10\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"4\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"A\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"8\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"6\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}], \"turn_order\": [0, 1, 2, 3], \"phase_tracker\": \"Accumulation\", \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"challenges\": [], \"alliances\": [], \"gem_collections\": []}}, \"players\": [{\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"8\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"2\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"6\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Spades\", \"type\": \"standard\"}], \"suit_diversity\": 4, \"chance_cards\": [], \"exchange_used\": false}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 23}, \"msg\": \"Player 2 decides to: declare_and_place-(rank: K, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declares rank K and places 4 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"Q\", \"num_cards\": 3}, \"id\": 34}, \"msg\": \"Player 3 decides to: declare_and_place-(rank: Q, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declares rank Q and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, \"msg\": \"Player 0 decides to: declare_and_place-(rank: None, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 0 declares rank None and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, \"msg\": \"Player 1 decides to: declare_and_place-(rank: 6, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declares rank 6 and places 4 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 1}, \"id\": 0}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 2}, \"id\": 1}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 4}, \"id\": 3}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 1}, \"id\": 4}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 2}, \"id\": 5}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 3}, \"id\": 6}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 4}, \"id\": 7}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 1}, \"id\": 8}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 2}, \"id\": 9}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 3}, \"id\": 10}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 4}, \"id\": 11}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 1}, \"id\": 12}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 2}, \"id\": 13}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 3}, \"id\": 14}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 4}, \"id\": 15}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 1}, \"id\": 16}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 2}, \"id\": 17}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 3}, \"id\": 18}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 19}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 1}, \"id\": 20}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 2}, \"id\": 21}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 3}, \"id\": 22}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 4}, \"id\": 23}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 1}, \"id\": 24}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 2}, \"id\": 25}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 3}, \"id\": 26}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 1}, \"id\": 28}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 2}, \"id\": 29}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 3}, \"id\": 30}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 4}, \"id\": 31}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players in the game. In this case, it is 4.\", \"current_player\": \"The index of the player currently taking their turn. This is Player 2.\", \"central_pile\": \"A list of cards (standard or chance) that are currently in the central area of the game. Each card has attributes like 'rank', 'suit', and 'type'.\", \"turn_order\": \"A list representing the order in which players take turns. The players are indexed from 0 to 3.\", \"phase_tracker\": \"A string indicating the current phase of the game, which guides the actions available to players. In this snapshot, it is 'Accumulation'.\", \"is_over\": \"A boolean that indicates whether the game has concluded. Currently, it is false, which means the game is ongoing.\", \"winner\": \"If the game is over, this field would contain the index of the winning player. It is null because the game is not over.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck. In this state, it is 0 indicating the deck is depleted.\"}, \"faceup_cards\": {\"challenges\": \"A list of challenges that have been made in the game. Currently empty.\", \"alliances\": \"A list of alliances formed between players in the game. Currently empty.\", \"gem_collections\": \"A list of gem collection events in the game. Currently empty.\"}}, \"players\": [{\"public\": {\"declared_rank\": \"The current declared rank of cards by the player if they have made such a declaration. It is null for all players currently.\", \"exchanged_cards\": \"A list of cards that this player has exchanged with others. It is empty as no exchanges have been made.\", \"gems\": \"The number of gems collected by the player which contributes to their score. All players currently have 0 gems.\", \"bonuses\": \"The number of bonus points accumulated by the player which contributes to their score. All players currently have 0 bonuses.\"}, \"faceup_cards\": {\"collected_cards\": \"A list of cards that a player has collected and placed face up, though currently empty for all players.\"}}, {\"private\": {\"hand\": \"A list of cards in the player's hand, known only to that player. Each card has attributes like 'rank', 'suit', and 'type'.\", \"suit_diversity\": \"An integer representing the number of different suits present in the player's hand. Player 2 has a suit diversity of 4.\", \"chance_cards\": \"A list of chance cards the player holds, though currently empty for Player 2.\", \"exchange_used\": \"A boolean indicating if the player has used their exchange action this phase. Player 2 has false, meaning no exchange used yet.\"}}], \"recent_history\": [\"A list of recent actions and events in the game, such as player actions, info messages, and turn ends. Each entry provides details such as player_id, action details, and messages.\"], \"legal_actions\": [\"A list of actions that the current player (Player 2) is legally allowed to take on their turn. Each action includes the type, arguments needed, and an identifier.\"]}",
    "policy_list": [
        "**Bluff with Lower Cards**\nIn Phase 1, declare a high-ranking card while placing lower cards face down. This tactic can discourage opponents from challenging and help deplete low-value cards from your hand.",
        "**Strategic Alliances**\nIn Phase 2, form alliances with players who have complementary objectives. Use the alliance to strategically exchange cards and influence decision-making to your advantage.",
        "**Suit Maximization for Gems**\nIn Phase 3, focus on diversifying your suits to maximize gem collection. Use gems to activate abilities that can change turn sequences or nullify threats.",
        "**Timing of Challenges**\nDevelop a keen sense of when to challenge in Phase 1. Observing opponents' patterns and behaviors can provide insight into their bluffs, allowing you to make calculated challenges."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information\n    current_phase = state[\"common\"].get(\"phase_tracker\")\n    current_player = state[\"common\"].get(\"current_player\")\n    \n    # Ensure the current player index is within bounds\n    if current_player >= len(state[\"players\"]):\n        raise IndexError(\"current_player index out of bounds\")\n    \n    player_info = state[\"players\"][current_player][\"private\"]\n    \n    hand = player_info.get(\"hand\", [])\n    suit_diversity = player_info.get(\"suit_diversity\", 0)  # Default to 0 if not present\n\n    # Analyze the declared action\n    declared_action = action.get(\"args\", {})\n    declared_rank = declared_action.get(\"rank\")\n    num_cards = declared_action.get(\"num_cards\", 0)\n\n    # Determine action suitability\n    rank_of_interest = \"K\"  # As per the bluff strategy\n    is_declare_optimal = declared_rank == rank_of_interest and num_cards < len(hand)\n\n    # Analyze hand strength and diversity\n    low_cards = sum(1 for card in hand if card.get(\"rank\") in [\"2\", \"3\", \"4\", \"5\"])\n    has_low_cards = low_cards >= num_cards\n\n    # Initial score base\n    result_score = 0.5  # Start from a neutral probability\n\n    # Bluff strategy gives incentive\n    if is_declare_optimal and has_low_cards:\n        result_score += 0.25  # Adding weight if declaring high rank while playing lower cards\n\n    # Adjust for hand diversity\n    if suit_diversity > 3:\n        result_score += 0.1  # More diverse hands are generally better\n\n    # Ensure score stays within bounds\n    result_score = min(1.0, max(0.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Initialize basic score and weights\n    base_score = 0.5\n    \n    # Extract pertinent information from the state\n    phase = state['common']['phase_tracker']\n    player_index = state['common']['current_player']\n    player_info = state['players'][player_index]\n    \n    # Weight calculation based on phase\n    if phase == \"Accumulation\":\n        phase_weight = 0.2\n    elif phase == \"Exchange and Alliances\":\n        phase_weight = 0.5\n    else:  # Phase 3: Gem Collection and Final Moves\n        phase_weight = 0.3\n        \n    # Calculate suit diversity effect\n    suit_diversity = player_info['private']['suit_diversity']\n    suit_diversity_score = min(suit_diversity / 5, 1.0)  # Max diversity score is 1\n    \n    # Influencing factors from public elements\n    num_gems = player_info['public']['gems']\n    gem_score = min(num_gems / 5, 1.0)  # Scale gem contribution\n    \n    # Evaluate current action\n    if action['action'] == \"declare_and_place\":\n        # Assume placing a higher number of cards (risk) potentially increases player's board control\n        num_cards = action['args']['num_cards']\n        action_score = min(num_cards / 4, 1.0) * 0.25\n    elif action['action'] == \"exchange_cards\" or action['action'] == \"form_alliance\":\n        action_score = 0.3  # Assume these strategic moves have immediate high value\n    else:\n        action_score = 0\n    \n    # Combine calculated components into a result score\n    result_score = base_score + phase_weight * (0.3 * suit_diversity_score + 0.3 * gem_score + 0.4 * action_score)\n    result_score = min(max(result_score, 0), 1)  # Ensure result score is within bounds (0, 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    player_index = state['common']['current_player']\n    player_info = state['players'][player_index]['private']\n    public_info = state['players'][player_index]['public']\n\n    # Initialize scoring factors\n    suit_diversity_score = player_info['suit_diversity'] / 4  # Max diversity is 4 suits\n    gem_score = public_info['gems'] / 10  # Assuming a hypothetical max gems of 10\n    phase = state['common']['phase_tracker']\n    \n    # Action Evaluation based on phase\n    if phase == \"Accumulation\":\n        # Evaluate the number of cards being declared and placed\n        declared_cards = action.get('args', {}).get('num_cards', 0)\n        action_score = min(declared_cards / 4, 1)  # normalize to [0, 1]\n    elif phase == \"Exchange and Alliances\":\n        # Evaluate actions related to exchanging cards, alliances, etc.\n        exchange_used = player_info['exchange_used']\n        action_score = 0.8 if not exchange_used else 0.5\n    elif phase == \"Gem Collection and Final Moves\":\n        # Focus on maximizing suit diversity and gem usage\n        possible_gems_from_diversity = player_info['suit_diversity'] * 2\n        action_score = min(possible_gems_from_diversity / 10, 1)  # normalize to [0, 1]\n    else:\n        action_score = 0\n\n    # Combine scores to give an overall estimation with consideration to the phase importance\n    result_score = 0.3 * suit_diversity_score + 0.3 * gem_score + 0.4 * action_score\n    return result_score\n",
        "\nimport numpy as np\n\ndef score(state: dict, action: str) -> float:\n    # Extract current player information\n    current_player = state[\"common\"][\"current_player\"]\n    player_data = state[\"players\"][current_player]\n\n    # Assign weights for different factors contributing to winning\n    suit_diversity_weight = 0.4\n    gems_weight = 0.3\n    bonuses_weight = 0.3\n\n    # Initialize score calculation factors\n    suit_diversity = player_data[\"private\"][\"suit_diversity\"]\n    gems = player_data[\"public\"][\"gems\"]\n    bonuses = player_data[\"public\"][\"bonuses\"]\n\n    # Calculate the weighted contributions\n    diversity_score = suit_diversity / 4 * suit_diversity_weight\n    gems_score = gems / 10 * gems_weight\n    bonuses_score = bonuses / 10 * bonuses_weight\n\n    # Initial score calculation\n    result_score = diversity_score + gems_score + bonuses_score\n\n    # Adjust based on action and game history (simulated logic)\n    recent_history = state.get(\"recent_history\", [])\n    challenge_risks = 0  # Adjust for a perceived risk of challenge failure\n\n    for entry in recent_history:\n        if entry[\"type\"] == \"action\":\n            # Example simple logic: analyse action involving challenge\n            if entry[\"action\"][\"action\"] == \"declare_and_place\":\n                declared_rank = entry[\"action\"][\"args\"].get(\"rank\") \n                # Existence of declared rank, assuming potential bluff\n                if declared_rank is not None and np.random.random() < 0.2:  # Random bluff detection\n                    challenge_risks += 0.1  # Increase risk if potential bluff\n\n    # Incorporate action-based outcomes:\n    # Example: If challenging, factor in additional calculated risk\n    if action == \"challenge\":\n        potential_challenge_risk = challenge_risks or 0.1 # added realistic action risk\n        result_score = max(result_score - potential_challenge_risk, 0)\n    \n    # Ensure score is within bounds of [0, 1]\n    result_score = max(0.0, min(result_score, 1.0))\n\n    return result_score\n"
    ]
}