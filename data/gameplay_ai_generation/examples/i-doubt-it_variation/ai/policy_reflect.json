{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Central Pile:** Cards collected from challenges and normal play.\n- **Turn Order:** A dynamic sequence visible to all players, which may change based on player actions, particularly in Phase 3.\n- **Phase Tracker:** Indicates the current phase of the game (Accumulation, Exchange and Alliances, or Gem Collection and Final Moves).\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Declared Rank:** Last rank announced by each player.\n  - **Exchanged Cards:** Cards publicized during exchanges in Phase 2.\n  - **Gems and Bonuses:** Number of gems and bonuses publicly known for each player, primarily observed in Phase 3.\n- **Private:**\n  - **Player Hand:** Individual cards visible only to the player.\n  - **Suit Diversity:** Count of unique suits in a player\u2019s hand.\n  - **Chance Cards:** Effects activated from the chance card deck, known only to the owning player.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, ..., 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Abilities:** Specific cards provide strategic advantages, like altering turns or shielding challenges.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck intermixes with a deck of chance cards enabling random modifiers.\n\n#### **Initial Dealing:**\n- Cards are evenly distributed among players until depleted, initiating the starting hand for each participant.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **Phase 1: Accumulation**\n1. **Declare and Place Cards:**\n   - Declare a rank and lay 1 to 4 cards face down.\n   - Must be current player's turn based on present sequence.\n2. **Challenge Declaration:**\n   - Challenge the last declared rank by another player with \"I doubt it.\"\n   - Available to the next player in sequence.\n\n#### **Phase 2: Exchange and Alliances**\n1. **Card Exchange:**\n   - Once per game, formally swap two cards with another agreed player.\n   - Both players must consent to proceed.\n2. **Form Alliances:**\n   - Form alliances temporarily for strategic benefits, influencing both parties\u2019 interactions.\n   - Requires agreement amongst involved players.\n\n#### **Phase 3: Gem Collection and Final Moves**\n1. **Collect Gems:**\n   - Leverage gems, earned by diverse suits or actions, for ability activation.\n   - Manifest through Phase 3 actions or bonuses.\n2. **Final Moves:**\n   - Each player concludes by passing one card to the next player on the right.\n\n#### **Special and Adaptive Actions:**\n- Use special chance cards to manipulate order or influence results, especially prevalent during strategic maneuvers in Phase 3.\n\n---\n\n### 5. **Round Sequence**\n\n#### **Contact of Play:**\n1. **Phase 1: Accumulation**\n   - Proceed clockwise in usual card placing, following sequence from Aces to Kings.\n2. **Phase 2: Exchange and Alliances**\n   - Execute exchanges and alliance formations explicitly detailed through player interactions.\n3. **Phase 3: Gem Collection and Adaptive Moves**\n   - Collect gems, enact special abilities, adapt turn orders, and accomplish final hand structuring.\n\n#### **Winning Conditions:**\n- At the close, evaluation hinges primarily on suit diversity, supplemented by strategic gem use and bonus achievements.\n\n---\n\n### 6. **Additional Mechanics & Rules**\n\n- **Chance Cards:** These bring in random elements affecting the trajectory of play\u2014clarified at the point of draw or effect activation.\n- **Turn Order Dynamicity:** Phase 3 explicitly incorporates decisions that can realign player order to optimize endgame interactions.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible to All Players:**\n- Cards challenged and revealed during disputes.\n- Publicly declared numbers of gems held.\n- Established alliances, known turn sequence changes during gameplay.\n\n#### **Hidden Information:**\n- Personal hands, chance card effects known or chosen by players, influencing player-specific strategy without revealing intents to others.\n\n---\n\n### 8. **Endgame Scoring**\n\n##### **Scoring Metrics:**\n- **Suit Diversity:** Number of unique suits establishes core competitiveness.\n- **Gems and Bonuses:** Added value through gems and bonuses enhances player capabilities and scoring flexibility.\n- Decision-making, card management, and strategy adaptability define the winner, with ties resolved through a concise, final assessment or shared victory.\n\nThis refined description provides clearer paths for gameplay transition through phases, explicitly delineates objectives, and aligns strategies with the game\u2019s dynamic interactions.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"central_pile\": [{\"rank\": \"10\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"4\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"A\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"8\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"6\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}], \"turn_order\": [0, 1, 2, 3], \"phase_tracker\": \"Accumulation\", \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"challenges\": [], \"alliances\": [], \"gem_collections\": []}}, \"players\": [{\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"8\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"2\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"6\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Spades\", \"type\": \"standard\"}], \"suit_diversity\": 4, \"chance_cards\": [], \"exchange_used\": false}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 23}, \"msg\": \"Player 2 decides to: declare_and_place-(rank: K, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declares rank K and places 4 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"Q\", \"num_cards\": 3}, \"id\": 34}, \"msg\": \"Player 3 decides to: declare_and_place-(rank: Q, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declares rank Q and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, \"msg\": \"Player 0 decides to: declare_and_place-(rank: None, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 0 declares rank None and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, \"msg\": \"Player 1 decides to: declare_and_place-(rank: 6, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declares rank 6 and places 4 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 1}, \"id\": 0}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 2}, \"id\": 1}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 4}, \"id\": 3}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 1}, \"id\": 4}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 2}, \"id\": 5}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 3}, \"id\": 6}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 4}, \"id\": 7}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 1}, \"id\": 8}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 2}, \"id\": 9}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 3}, \"id\": 10}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 4}, \"id\": 11}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 1}, \"id\": 12}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 2}, \"id\": 13}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 3}, \"id\": 14}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 4}, \"id\": 15}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 1}, \"id\": 16}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 2}, \"id\": 17}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 3}, \"id\": 18}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 19}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 1}, \"id\": 20}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 2}, \"id\": 21}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 3}, \"id\": 22}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 4}, \"id\": 23}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 1}, \"id\": 24}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 2}, \"id\": 25}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 3}, \"id\": 26}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 1}, \"id\": 28}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 2}, \"id\": 29}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 3}, \"id\": 30}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 4}, \"id\": 31}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players in the game. In this case, it is 4.\", \"current_player\": \"The index of the player currently taking their turn. This is Player 2.\", \"central_pile\": \"A list of cards (standard or chance) that are currently in the central area of the game. Each card has attributes like 'rank', 'suit', and 'type'.\", \"turn_order\": \"A list representing the order in which players take turns. The players are indexed from 0 to 3.\", \"phase_tracker\": \"A string indicating the current phase of the game, which guides the actions available to players. In this snapshot, it is 'Accumulation'.\", \"is_over\": \"A boolean that indicates whether the game has concluded. Currently, it is false, which means the game is ongoing.\", \"winner\": \"If the game is over, this field would contain the index of the winning player. It is null because the game is not over.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck. In this state, it is 0 indicating the deck is depleted.\"}, \"faceup_cards\": {\"challenges\": \"A list of challenges that have been made in the game. Currently empty.\", \"alliances\": \"A list of alliances formed between players in the game. Currently empty.\", \"gem_collections\": \"A list of gem collection events in the game. Currently empty.\"}}, \"players\": [{\"public\": {\"declared_rank\": \"The current declared rank of cards by the player if they have made such a declaration. It is null for all players currently.\", \"exchanged_cards\": \"A list of cards that this player has exchanged with others. It is empty as no exchanges have been made.\", \"gems\": \"The number of gems collected by the player which contributes to their score. All players currently have 0 gems.\", \"bonuses\": \"The number of bonus points accumulated by the player which contributes to their score. All players currently have 0 bonuses.\"}, \"faceup_cards\": {\"collected_cards\": \"A list of cards that a player has collected and placed face up, though currently empty for all players.\"}}, {\"private\": {\"hand\": \"A list of cards in the player's hand, known only to that player. Each card has attributes like 'rank', 'suit', and 'type'.\", \"suit_diversity\": \"An integer representing the number of different suits present in the player's hand. Player 2 has a suit diversity of 4.\", \"chance_cards\": \"A list of chance cards the player holds, though currently empty for Player 2.\", \"exchange_used\": \"A boolean indicating if the player has used their exchange action this phase. Player 2 has false, meaning no exchange used yet.\"}}], \"recent_history\": [\"A list of recent actions and events in the game, such as player actions, info messages, and turn ends. Each entry provides details such as player_id, action details, and messages.\"], \"legal_actions\": [\"A list of actions that the current player (Player 2) is legally allowed to take on their turn. Each action includes the type, arguments needed, and an identifier.\"]}",
    "policy_list": [
        "**Bluff with Lower Cards**\nTo effectively bluff with lower cards, the AI player should consider the Declared Rank Confidence metric when deciding to bluff. This strategy is most effective when the Declared Rank Confidence is high, allowing safe bluffs with a lower risk of being challenged. To determine critical moments for bluffing, the AI should assess if previous challenges by opponents have been successful or if opponents have frequently backed down from challenges, indicating hesitation and an opportune moment for bluffing. Additionally, the strategy becomes particularly advantageous when the Suit Diversity Score is low, as discarding low-rank cards without challenge increases the potential for drawing or acquiring more diverse and higher-valued cards. The AI should balance these considerations to execute bluffs that effectively advance its card management and position in the game.",
        "**Strategic Alliances**\nIn Phase 2, prioritize forming alliances with players possessing high Alliance Potential Value. These may include players who have complementary objectives, like those aiming to enhance suit diversity akin to the AI's needs. Evaluate Declared Rank Confidence and Challenge Risk Assessment alongside Suit Diversity Score to identify moments when alliances can provide maximum mutual benefit. Specifically, aim for exchanges that bolster suit diversity and leverage alliances to deter potentially disadvantageous challenges. Critical moments for forming alliances occur when the AI's Suit Diversity Score needs improvement, or when strategic alliances can prevent challenges during the Accumulation phase.",
        "**Refined Suit Maximization Strategy**\nIn Phase 3, the strategy concentrates on maximizing suit diversity to collect as many gems as possible, which enhances potential ability activations. Adjust actions in previous phases, like exchanges in Phase 2, to bolster diversity. Critical moments for gem use include situations where altering the turn order can prevent a disadvantageous challenge, or when nullifying another player's powers directly benefits suit diversity maintenance. Throughout the game, monitor Suit Diversity Score to guide when to exchange cards and Declared Rank Confidence to determine when it's safe to make aggressive declarations.",
        "**Timing of Challenges - Refined Strategy**\nTo optimize the Timing of Challenges strategy, critical moments for challenging arise when there is a high Challenge Risk Assessment score, indicating a significant probability of the opponent bluffing with their declared rank. Monitoring these patterns, combined with a low Declared Rank Confidence in the opponent's current declaration, provides the ideal scenario to issue a challenge. It is essential to maintain a balance; frequent challenges can make you predictable, while strategic, data-driven challenges can undermine opponents' game plans by exposing their bluffs, thus potentially leading them to lose key cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary details from the state\n    common_info = state['common']\n    players = state['players']\n    current_player_index = common_info['current_player']\n    current_player = players[current_player_index]\n    phase = common_info['phase_tracker']\n    legal_actions = state['legal_actions']\n    \n    # Initialize action-value score variables\n    declared_rank_confidence = 0.5  # This simulates a base confidence in declaring ranks\n    bluffing_advantage = 0.0\n    suit_diversity_advantage = 0.0\n    \n    # Evaluate the Suit Diversity Score\n    suit_diversity = current_player['private']['suit_diversity']\n    \n    # Suit diversity impact on scoring\n    suit_diversity_score = suit_diversity / 4.0  # Normalize based on likely maximum diversity (out of 4 suits)\n    \n    # Decide on bluffing context\n    if action['action'] == \"declare_and_place\":\n        # Check the risk of declaring low rank cards\n        rank = action['args'].get('rank')\n        num_cards = action['args'].get('num_cards')\n\n        if rank and rank in ['2', '3'] and phase == \"Accumulation\":\n            # If rank is low, consider bluffing:\n            previous_successful_challenges = len([h for h in state['recent_history'] if h['type'] == 'action' and 'action' in h and h['action']['action'] == 'challenge_declaration'])\n            if previous_successful_challenges <= 1:\n                # Less risk detected from prior challenges\n                bluffing_advantage = (4 - num_cards) / 4.0  # Bluffing is safer with fewer cards claimed\n            else:\n                # Adjust confidence down if the environment suggests active challenges\n                bluffing_advantage = -0.2\n        \n        # If the player frequently backs off from being challenged, increase confidence\n        declared_ranks = [action for action in state['recent_history'] if action['type'] == 'action' and action['action']['action'] == 'declare_and_place']\n        challenge_success_rate = previous_successful_challenges / max(1, len(declared_ranks))\n        \n        # Enhance probability of bluff if challenge failures are high\n        if challenge_success_rate < 0.3:\n            bluffing_advantage += 0.2\n\n        # Assign a score for declared rank confidence\n        declared_rank_confidence += bluffing_advantage + (0.2 * suit_diversity_score)\n    \n    # Return final score\n    result_score = declared_rank_confidence\n    result_score = max(0.0, min(1.0, result_score))  # Ensure the score is within [0, 1]\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    phase = state['common']['phase_tracker']\n    current_player_index = state['common']['current_player']\n    player_state = state['players'][current_player_index]\n    suit_diversity = player_state['private']['suit_diversity']\n    num_gems = player_state['public']['gems']\n    \n    # Suit diversity importance factor\n    suit_diversity_score = suit_diversity / 4\n    \n    # Evaluate alliance potential if applicable to the phase\n    if phase == \"Exchange and Alliances\":\n        alliance_score = 0.3  # Assume some fixed potential \n    else:\n        alliance_score = 0.0\n\n    # Default card score is 0 if it's not declare_and_place\n    card_score = 0.0\n\n    # Bonus points for strategic actions\n    if action['action'] == 'declare_and_place':\n        # Translate card rank into a numerical value for scoring purposes\n        rank = action['args']['rank']\n        num_cards = action['args']['num_cards']\n        # Convert rank to a numerical value\n        if rank:\n            card_value = {'A': 1, 'J': 11, 'Q': 12, 'K': 13}.get(rank, int(rank) if rank.isdigit() else 0)\n            card_score = (card_value / 13) * (num_cards / 4)\n    \n    # If the action is legal, calculate the base reward\n    base_reward = 0.5\n    \n    # Tweak base reward depending on phase and strategic depth of action\n    if phase == \"Accumulation\":\n        base_reward += (card_score + suit_diversity_score) / 2\n    elif phase == \"Exchange and Alliances\":\n        base_reward += alliance_score\n    elif phase == \"Gem Collection and Final Moves\":\n        # Focus on gems and maintaining turn order\n        base_reward += 0.1 * num_gems\n    \n    # Normalize to be within [0, 1]\n    result_score = min(max(base_reward, 0.0), 1.0)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n\n    # Extract current phase and player details\n    phase = state['common']['phase_tracker']\n    current_player_info = state['players'][state['common']['current_player']]['private']\n    suit_diversity = current_player_info['suit_diversity']\n    gems = state['players'][state['common']['current_player']]['public']['gems']\n    declared_rank = action['args'].get('rank')\n\n    # Initialize base score influenced by the current phase:\n    if phase == \"Accumulation\":\n        base_score = 0.3\n    elif phase == \"Exchange and Alliances\":\n        base_score = 0.4\n    elif phase == \"Gem Collection and Final Moves\":\n        base_score = 0.5\n    else:\n        # Unknown phase\n        base_score = 0.2\n\n    # Boost score for high suit diversity, assuming it helps in the later phases\n    if phase == \"Gem Collection and Final Moves\":\n        diversity_factor = suit_diversity / 13.0  # Assuming max suit diversity to be 4\n        gem_factor = gems / 10.0  # Arbitrary scaling to keep within manageable range\n        base_score += 0.10 * diversity_factor + 0.15 * gem_factor\n\n    # Account for declaring a rank in phase 1 or phase 3\n    if phase in [\"Accumulation\", \"Gem Collection and Final Moves\"]:\n        if declared_rank:\n            if any(card['rank'] == declared_rank for card in current_player_info['hand']):\n                base_score += 0.05\n\n    # Use logistic function to better constrict the range of scores to [0, 1]\n    result_score = 1 / (1 + math.exp(-5 * (base_score - 0.5)))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract useful information from the state\n    num_players = state[\"common\"][\"num_players\"]\n    central_pile = state[\"common\"][\"central_pile\"]\n    current_player = state[\"common\"][\"current_player\"]\n    phase_tracker = state[\"common\"][\"phase_tracker\"]\n    legal_actions = state[\"legal_actions\"]\n\n    # Extract player-specific information\n    player_info = state[\"players\"][current_player]\n    player_hand = player_info[\"private\"][\"hand\"]\n    suit_diversity = player_info[\"private\"][\"suit_diversity\"]\n    gems = player_info[\"public\"][\"gems\"]\n    bonuses = player_info[\"public\"][\"bonuses\"]\n    \n    # Action specific parameters\n    action_type = action.get(\"action\")\n    action_args = action.get(\"args\", {})\n    \n    # Define utility functions for evaluations\n    def suit_diversity_score():\n        return suit_diversity / 4.0  # Max suit diversity is normalized\n\n    def gem_bonus_score():\n        return min((gems + bonuses) / 10.0, 1.0)  # Max gems & bonuses normalized\n\n    def central_pile_influence():\n        num_chance_cards = sum(1 for card in central_pile if card[\"type\"] == \"chance\")\n        return min(num_chance_cards / len(central_pile), 1.0) if central_pile else 0.0\n\n    def challenge_risk_assessment():\n        recent_history = state[\"recent_history\"]\n        # Calculate a simple heuristic based on recent history\n        # Assumes higher propensity to challenge if recent declared rank deviates frequently\n        recent_declares = [h for h in recent_history if h[\"action\"][\"action\"] == \"declare_and_place\"]\n        rank_changes = sum(1 for r in recent_declares if r[\"action\"][\"args\"][\"rank\"] != player_info[\"public\"][\"declared_rank\"])\n        risk_assessment = rank_changes / max(1, len(recent_declares))\n        return risk_assessment\n\n    # Calculate different components of the score based on game state and action\n    base_score = 0.2  # Base probability reflective of uncertainty\n    phase_bonus = 0.1 if phase_tracker == \"Accumulation\" else 0.05  # Bonus for phase-specific evaluations\n\n    player_strategy_score = suit_diversity_score() * 0.3 + gem_bonus_score() * 0.2 + central_pile_influence() * 0.1\n    adaptive_challenge_score = challenge_risk_assessment() * 0.2\n    action_specific_score = (1.0 / len(legal_actions)) * 0.1  # Normalize based on available legal actions\n\n    # Combine all scores\n    total_score = base_score + phase_bonus + player_strategy_score + adaptive_challenge_score + action_specific_score\n\n    result_score = min(max(total_score, 0.0), 1.0)  # Ensure the score is within 0 to 1\n    \n    return result_score\n"
    ]
}