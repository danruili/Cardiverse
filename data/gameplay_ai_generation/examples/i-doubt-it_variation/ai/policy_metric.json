{
    "game_description": "### 1. **Game State**\n\n#### **Common Information:**\n- **Central Pile:** Cards collected from challenges and normal play.\n- **Turn Order:** A dynamic sequence visible to all players, which may change based on player actions, particularly in Phase 3.\n- **Phase Tracker:** Indicates the current phase of the game (Accumulation, Exchange and Alliances, or Gem Collection and Final Moves).\n\n#### **Player-Specific Information:**\n- **Public:**\n  - **Declared Rank:** Last rank announced by each player.\n  - **Exchanged Cards:** Cards publicized during exchanges in Phase 2.\n  - **Gems and Bonuses:** Number of gems and bonuses publicly known for each player, primarily observed in Phase 3.\n- **Private:**\n  - **Player Hand:** Individual cards visible only to the player.\n  - **Suit Diversity:** Count of unique suits in a player\u2019s hand.\n  - **Chance Cards:** Effects activated from the chance card deck, known only to the owning player.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** One of {A, 2, 3, ..., 10, J, Q, K}.\n- **Suit:** One of {Hearts, Diamonds, Clubs, Spades}.\n- **Special Abilities:** Specific cards provide strategic advantages, like altering turns or shielding challenges.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck intermixes with a deck of chance cards enabling random modifiers.\n\n#### **Initial Dealing:**\n- Cards are evenly distributed among players until depleted, initiating the starting hand for each participant.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **Phase 1: Accumulation**\n1. **Declare and Place Cards:**\n   - Declare a rank and lay 1 to 4 cards face down.\n   - Must be current player's turn based on present sequence.\n2. **Challenge Declaration:**\n   - Challenge the last declared rank by another player with \"I doubt it.\"\n   - Available to the next player in sequence.\n\n#### **Phase 2: Exchange and Alliances**\n1. **Card Exchange:**\n   - Once per game, formally swap two cards with another agreed player.\n   - Both players must consent to proceed.\n2. **Form Alliances:**\n   - Form alliances temporarily for strategic benefits, influencing both parties\u2019 interactions.\n   - Requires agreement amongst involved players.\n\n#### **Phase 3: Gem Collection and Final Moves**\n1. **Collect Gems:**\n   - Leverage gems, earned by diverse suits or actions, for ability activation.\n   - Manifest through Phase 3 actions or bonuses.\n2. **Final Moves:**\n   - Each player concludes by passing one card to the next player on the right.\n\n#### **Special and Adaptive Actions:**\n- Use special chance cards to manipulate order or influence results, especially prevalent during strategic maneuvers in Phase 3.\n\n---\n\n### 5. **Round Sequence**\n\n#### **Contact of Play:**\n1. **Phase 1: Accumulation**\n   - Proceed clockwise in usual card placing, following sequence from Aces to Kings.\n2. **Phase 2: Exchange and Alliances**\n   - Execute exchanges and alliance formations explicitly detailed through player interactions.\n3. **Phase 3: Gem Collection and Adaptive Moves**\n   - Collect gems, enact special abilities, adapt turn orders, and accomplish final hand structuring.\n\n#### **Winning Conditions:**\n- At the close, evaluation hinges primarily on suit diversity, supplemented by strategic gem use and bonus achievements.\n\n---\n\n### 6. **Additional Mechanics & Rules**\n\n- **Chance Cards:** These bring in random elements affecting the trajectory of play\u2014clarified at the point of draw or effect activation.\n- **Turn Order Dynamicity:** Phase 3 explicitly incorporates decisions that can realign player order to optimize endgame interactions.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible to All Players:**\n- Cards challenged and revealed during disputes.\n- Publicly declared numbers of gems held.\n- Established alliances, known turn sequence changes during gameplay.\n\n#### **Hidden Information:**\n- Personal hands, chance card effects known or chosen by players, influencing player-specific strategy without revealing intents to others.\n\n---\n\n### 8. **Endgame Scoring**\n\n##### **Scoring Metrics:**\n- **Suit Diversity:** Number of unique suits establishes core competitiveness.\n- **Gems and Bonuses:** Added value through gems and bonuses enhances player capabilities and scoring flexibility.\n- Decision-making, card management, and strategy adaptability define the winner, with ties resolved through a concise, final assessment or shared victory.\n\nThis refined description provides clearer paths for gameplay transition through phases, explicitly delineates objectives, and aligns strategies with the game\u2019s dynamic interactions.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"central_pile\": [{\"rank\": \"10\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"4\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"A\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"8\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"4\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"6\", \"suit\": \"Diamonds\", \"type\": \"standard\"}, {\"rank\": \"7\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}], \"turn_order\": [0, 1, 2, 3], \"phase_tracker\": \"Accumulation\", \"is_over\": false, \"winner\": null, \"facedown_cards\": {\"deck_size\": 0}, \"faceup_cards\": {\"challenges\": [], \"alliances\": [], \"gem_collections\": []}}, \"players\": [{\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0, \"current_player\": true}, \"private\": {\"hand\": [{\"rank\": \"2\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"8\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"10\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"3\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"2\", \"suit\": \"Spades\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Hearts\", \"type\": \"standard\"}, {\"rank\": \"K\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"type\": \"chance\"}, {\"rank\": \"6\", \"suit\": \"Clubs\", \"type\": \"standard\"}, {\"rank\": \"9\", \"suit\": \"Spades\", \"type\": \"standard\"}], \"suit_diversity\": 4, \"chance_cards\": [], \"exchange_used\": false}, \"faceup_cards\": {\"collected_cards\": []}}, {\"public\": {\"declared_rank\": null, \"exchanged_cards\": [], \"gems\": 0, \"bonuses\": 0}, \"faceup_cards\": {\"collected_cards\": []}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 23}, \"msg\": \"Player 2 decides to: declare_and_place-(rank: K, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 2 declares rank K and places 4 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"Q\", \"num_cards\": 3}, \"id\": 34}, \"msg\": \"Player 3 decides to: declare_and_place-(rank: Q, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 3 declares rank Q and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, \"msg\": \"Player 0 decides to: declare_and_place-(rank: None, num_cards: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 0 declares rank None and places 3 cards.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, \"msg\": \"Player 1 decides to: declare_and_place-(rank: 6, num_cards: 4)\"}, {\"type\": \"info\", \"msg\": \"Player 1 declares rank 6 and places 4 cards.\", \"role\": null}], \"legal_actions\": [{\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 1}, \"id\": 0}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 2}, \"id\": 1}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 3}, \"id\": 2}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": null, \"num_cards\": 4}, \"id\": 3}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 1}, \"id\": 4}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 2}, \"id\": 5}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 3}, \"id\": 6}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"8\", \"num_cards\": 4}, \"id\": 7}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 1}, \"id\": 8}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 2}, \"id\": 9}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 3}, \"id\": 10}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"10\", \"num_cards\": 4}, \"id\": 11}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 1}, \"id\": 12}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 2}, \"id\": 13}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 3}, \"id\": 14}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"3\", \"num_cards\": 4}, \"id\": 15}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 1}, \"id\": 16}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 2}, \"id\": 17}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 3}, \"id\": 18}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"K\", \"num_cards\": 4}, \"id\": 19}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 1}, \"id\": 20}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 2}, \"id\": 21}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 3}, \"id\": 22}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"2\", \"num_cards\": 4}, \"id\": 23}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 1}, \"id\": 24}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 2}, \"id\": 25}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 3}, \"id\": 26}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"6\", \"num_cards\": 4}, \"id\": 27}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 1}, \"id\": 28}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 2}, \"id\": 29}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 3}, \"id\": 30}, {\"action\": \"declare_and_place\", \"args\": {\"rank\": \"9\", \"num_cards\": 4}, \"id\": 31}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"The number of players in the game. In this case, it is 4.\", \"current_player\": \"The index of the player currently taking their turn. This is Player 2.\", \"central_pile\": \"A list of cards (standard or chance) that are currently in the central area of the game. Each card has attributes like 'rank', 'suit', and 'type'.\", \"turn_order\": \"A list representing the order in which players take turns. The players are indexed from 0 to 3.\", \"phase_tracker\": \"A string indicating the current phase of the game, which guides the actions available to players. In this snapshot, it is 'Accumulation'.\", \"is_over\": \"A boolean that indicates whether the game has concluded. Currently, it is false, which means the game is ongoing.\", \"winner\": \"If the game is over, this field would contain the index of the winning player. It is null because the game is not over.\", \"facedown_cards\": {\"deck_size\": \"The number of cards remaining in the deck. In this state, it is 0 indicating the deck is depleted.\"}, \"faceup_cards\": {\"challenges\": \"A list of challenges that have been made in the game. Currently empty.\", \"alliances\": \"A list of alliances formed between players in the game. Currently empty.\", \"gem_collections\": \"A list of gem collection events in the game. Currently empty.\"}}, \"players\": [{\"public\": {\"declared_rank\": \"The current declared rank of cards by the player if they have made such a declaration. It is null for all players currently.\", \"exchanged_cards\": \"A list of cards that this player has exchanged with others. It is empty as no exchanges have been made.\", \"gems\": \"The number of gems collected by the player which contributes to their score. All players currently have 0 gems.\", \"bonuses\": \"The number of bonus points accumulated by the player which contributes to their score. All players currently have 0 bonuses.\"}, \"faceup_cards\": {\"collected_cards\": \"A list of cards that a player has collected and placed face up, though currently empty for all players.\"}}, {\"private\": {\"hand\": \"A list of cards in the player's hand, known only to that player. Each card has attributes like 'rank', 'suit', and 'type'.\", \"suit_diversity\": \"An integer representing the number of different suits present in the player's hand. Player 2 has a suit diversity of 4.\", \"chance_cards\": \"A list of chance cards the player holds, though currently empty for Player 2.\", \"exchange_used\": \"A boolean indicating if the player has used their exchange action this phase. Player 2 has false, meaning no exchange used yet.\"}}], \"recent_history\": [\"A list of recent actions and events in the game, such as player actions, info messages, and turn ends. Each entry provides details such as player_id, action details, and messages.\"], \"legal_actions\": [\"A list of actions that the current player (Player 2) is legally allowed to take on their turn. Each action includes the type, arguments needed, and an identifier.\"]}",
    "policy_list": [
        "**Suit Diversity Score**\nMeasures the number of unique suits in the AI player's hand. A higher value indicates a stronger potential for gem collection and endgame scoring. This metric is crucial in determining actions that maintain or enhance suit diversity.",
        "**Declared Rank Confidence**\nRepresents the confidence level in a declared rank during the Accumulation phase based on the AI's hand and historical challenges. A higher score suggests a safer declaration, decreasing the risk of being challenged.",
        "**Alliance Potential Value**\nEvaluates the strategic value and potential benefits of forming an alliance with specific players based on current game state and historical player behavior. This metric informs the decision to seek alliances in Phase 2.",
        "**Challenge Risk Assessment**\nCalculates the probability of a successful challenge against another player's declaration, based on known game state data and historical accuracy of other players' declarations. A higher score indicates a higher likelihood of successfully challenging an opponent."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract necessary components from the state\n    players = state[\"players\"]\n    current_player = state[\"common\"][\"current_player\"]\n    player_info = players[current_player]\n    private_info = player_info[\"private\"]\n    \n    # Calculate suit diversity as a percentage of the maximum possible\n    max_suit_diversity = 4  # Maximum possible suit diversity\n    current_suit_diversity = private_info[\"suit_diversity\"]\n    diversity_score = current_suit_diversity / max_suit_diversity\n\n    # Determine the game's current phase\n    current_phase = state[\"common\"][\"phase_tracker\"]\n\n    # Base score on the game's phase and action alignment\n    if current_phase == \"Accumulation\":\n        # During accumulation, prioritize actions that maintain or improve suit diversity\n        if action[\"action\"] == \"declare_and_place\" and action[\"args\"][\"rank\"] in [card[\"rank\"] for card in private_info[\"hand\"]]:\n            diversity_score *= 1.1  # Increase score if declaring aligns with actual hand strengths\n            \n    elif current_phase == \"Exchange and Alliances\":\n        # During this phase, forming exchanges or alliances can be slightly beneficial\n        if action[\"action\"] == \"card_exchange\":\n            diversity_score *= 1.05  # Slight boost for card exchange\n    \n    elif current_phase == \"Gem Collection and Final Moves\":\n        # Collecting gems or making final optimized moves should have a larger penalty if not aligned\n        if action[\"action\"] in [\"collect_gems\", \"final_moves\"]:\n            diversity_score *= 1.2  # Larger boost for strategic decisions in final moves\n\n    # Additional scoring: Adjust based on chance cards if any are used in action\n    if action[\"action\"] == \"use_chance_card\" and private_info[\"chance_cards\"]:\n        diversity_score *= 1.1  # Encourage use of beneficial chance cards\n    \n    # Ensure score is within bounds [0, 1]\n    result_score = max(0.0, min(1.0, diversity_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Calculate the confidence score of a declared rank action.\n\n    Parameters:\n    - state (dict): The current state of the game.\n    - action (dict): The action to be evaluated.\n\n    Returns:\n    - float: A score between 0 and 1 representing the confidence in the declared rank.\n    \"\"\"\n    \n    # Extract relevant information from the state\n    players = state['players']\n    current_player_index = state['common']['current_player']\n    current_player = players[current_player_index]\n    current_hand = current_player['private']['hand']\n    \n    # Calculate the frequency of each rank in the player's hand\n    rank_frequencies = {}\n    for card in current_hand:\n        rank = card['rank']\n        rank_frequencies[rank] = rank_frequencies.get(rank, 0) + 1\n    \n    # Extract the rank and number of cards from the action\n    declared_rank = action['args']['rank']\n    num_declaration = action['args']['num_cards']\n    \n    # Evaluate the score based on the player's hand\n    if declared_rank in rank_frequencies:\n        count_in_hand = rank_frequencies[declared_rank]\n    else:\n        count_in_hand = 0\n        \n    # Calculate the base confidence based on the presence of the declared rank in the hand\n    base_confidence = count_in_hand / len(current_hand)\n    \n    # Further adjustments can be made based on game state or history\n    # For now, let's add considerations like the number of cards placed\n    confidence_bonus = 0\n    if count_in_hand >= num_declaration:\n        confidence_bonus = 0.1 * num_declaration\n        \n    # Calculate a diminishing confidence if declared rank is not significantly represented\n    if count_in_hand < num_declaration:\n        confidence_penalty = 0.1 * (num_declaration - count_in_hand)\n    else:\n        confidence_penalty = 0\n    \n    # Combine components to form the final score\n    result_score = max(min(base_confidence + confidence_bonus - confidence_penalty, 1), 0)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def calculate_suit_diversity_value(suit_diversity: int) -> float:\n        # A higher suit diversity offers more flexibility in gem collection\n        return suit_diversity / 4.0\n\n    def evaluate_gems_and_bonuses(gems: int, bonuses: int) -> float:\n        # More gems and bonuses contribute positively towards winning\n        return (gems + bonuses) / 10.0\n\n    def assess_recent_behavior(history: list, current_player: int) -> float:\n        # Analyze recent actions of the player to gauge aggressiveness or strategy\n        strategy_value = 0.0\n        place_counts = sum(\n            1 for entry in history if entry['type'] == 'action' and \n            entry['player_id'] == current_player and\n            entry['action']['action'] == 'declare_and_place'\n        )\n        strategy_value += min(place_counts / 10.0, 0.2)\n        return strategy_value\n\n    def alliance_potential_value(state: dict) -> float:\n        if state['common']['phase_tracker'] != 'Exchange and Alliances':\n            return 0.0\n\n        # Check if it's strategically beneficial to form an alliance based on public information\n        player_declared_ranks = [\n            player['public']['declared_rank'] for player in state['players']\n        ]\n        same_rank_declarations = player_declared_ranks.count(\n            state['players'][current_player]['public']['declared_rank']\n        )\n        alliance_value = same_rank_declarations / len(player_declared_ranks)\n        return alliance_value\n\n    current_player = state['common']['current_player']\n    player_state = state['players'][current_player]\n\n    # Calculate various components of the score\n    suit_diversity_score = calculate_suit_diversity_value(player_state['private']['suit_diversity'])\n    gems_bonuses_score = evaluate_gems_and_bonuses(player_state['public']['gems'], player_state['public']['bonuses'])\n    behavior_score = assess_recent_behavior(state['recent_history'], current_player)\n    alliance_value_score = alliance_potential_value(state)\n\n    # Combine components into a final score, weighing them appropriately\n    result_score = 0.3 * suit_diversity_score + 0.3 * gems_bonuses_score + 0.2 * behavior_score + 0.2 * alliance_value_score\n\n    # Adjust the score based on specific actions, if any special actions logically should alter the potential\n    if action['action'] == 'declare_and_place' and action['args']['rank'] is not None:\n        # Assuming placing cards might indicate risk or strategy in place\n        placed_cards_value = min(action['args']['num_cards'] / 4.0, 0.1)\n        result_score += placed_cards_value\n\n    result_score = max(0.0, min(result_score, 1.0))\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Calculate hand strength\n    player_hand = state['players'][state['common']['current_player']]['private']['hand']\n    suit_diversity = len(set(card['suit'] for card in player_hand))\n    rank_histogram = {}\n    for card in player_hand:\n        rank_histogram[card['rank']] = rank_histogram.get(card['rank'], 0) + 1\n    max_rank_count = max(rank_histogram.values(), default=0)\n\n    # Get recent declarations\n    recent_history = state['recent_history']\n    declarations = []\n    for event in recent_history:\n        if event['type'] == 'action' and event['action']['action'] == 'declare_and_place':\n            declarations.append(event['action']['args']['rank'])\n\n    # Calculate challenge risk\n    declared_rank = state['players'][state['common']['current_player']]['public']['declared_rank']\n    challenge_risk = 0.2 if declared_rank in declarations else 0.1\n    \n    # Calculate score\n    base_chance = 0.3\n    special_card_effect = 0.5\n    score = (base_chance + 0.1 * suit_diversity + 0.1 * max_rank_count * (1 - challenge_risk) + special_card_effect) / 2.0\n\n    # Ensure the score is within [0, 1]\n    result_score = min(max(score, 0.0), 1.0)\n\n    return result_score\n"
    ]
}