{
    "game_description": "In-Between is not very popular at casinos, but is often played in home Poker games as a break from Poker itself. The rules below are for the home game, which is easily adaptable for casino play.\n\n### Rank of Cards\n\nA (high), K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n\n### Object of the Game\n\nThe goal is to be the player with the most chips at the end of the game.\n\n### The Ante\n\nChips are distributed to the players, and each players puts one chip in the center of the table to form a pool or pot.\n\n### The Draw\n\nAny player deals one card face up, to each player in turn, and the player with the highest card deals first.\n\n### The Shuffle, Cut, and Deal\n\nAny player may shuffle, and the dealer shuffles last. The player to the dealer's right cuts the cards. The dealer turns up two cards and places them in the middle of the table, positioning them so that there is ample room for a third card to fit in between.\n\n### The Betting\n\nThe player on the dealer's left may bet up to the entire pot or any portion of the number of chips in the pot, but they must always bet a minimum of one chip. When the player has placed a bet, the dealer turns up the top card from the pack and places it between the two cards already face up. If the card ranks between the two cards already face up, the player wins and takes back the amount of his bet plus an equivalent amount from the pot. If the third card is not between the face-up cards, or is of the same rank as either of them, the player loses his bet, and it is added to the pot. If the two face-up cards up are consecutive, the player automatically loses, and a third card need not be turned up. If the two face-up cards are the same, the player wins two chips and, again, no third card is turned up. (In some games, the player is paid three chips when this occurs.)\n\n\"Acey-Deucey\" (ace, 2) is the best combination, and a player tends to bet the whole pot, if they can. This is because the only way an ace-deuce combination can lose is if the third card turned up is also an ace or a deuce.\n\nAfter the first player has finished, the dealer clears away the cards and places them face down in a pile. The next player then places a bet, and the dealer repeats the same procedure until all the players, including the dealer, have had a turn.\n\nIf at any time, the pot has no more chips in it (because a player has \"bet the pot\" and won), each player again puts in one chip to restore\u00a0the pot.\n\nWhen every player has had a turn to bet, the deal passes to the player on the dealer's left, and the game continues.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 0, \"dealer\": 3, \"pot\": 7, \"community_cards\": {\"faceup_cards\": []}, \"facedown_cards\": {\"deck_size\": 38}, \"is_over\": false, \"winner\": null}, \"players\": [{\"public\": {\"chips\": 9, \"current_player\": true}}, {\"public\": {\"chips\": 7}}, {\"public\": {\"chips\": 10}}, {\"public\": {\"chips\": 7}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet\": 3}, \"id\": 2}, \"msg\": \"Player 0 decides to: bet-(bet: 3)\"}, {\"type\": \"info\", \"msg\": \"Player 0's action: {'action': 'bet', 'args': {'bet': 3}, 'id': 2}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 bets 3 chips.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Third card drawn is A-diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 loses 3 chips to the pot.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet\": 1}, \"id\": 0}, \"msg\": \"Player 1 decides to: bet-(bet: 1)\"}, {\"type\": \"info\", \"msg\": \"Player 1's action: {'action': 'bet', 'args': {'bet': 1}, 'id': 0}\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 bets 1 chips.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Third card drawn is Q-diamonds.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 loses 1 chips to the pot.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Dealer moves to player 3. Next player is 0.\", \"role\": null}], \"legal_actions\": [{\"action\": \"bet\", \"args\": {\"bet\": 1}, \"id\": 0}, {\"action\": \"bet\", \"args\": {\"bet\": 2}, \"id\": 1}, {\"action\": \"bet\", \"args\": {\"bet\": 3}, \"id\": 2}, {\"action\": \"bet\", \"args\": {\"bet\": 4}, \"id\": 3}, {\"action\": \"bet\", \"args\": {\"bet\": 5}, \"id\": 4}, {\"action\": \"bet\", \"args\": {\"bet\": 6}, \"id\": 5}, {\"action\": \"bet\", \"args\": {\"bet\": 7}, \"id\": 6}]}\n\nExplanation: \n{\"common\": \"A dictionary that holds the shared state of the game, relevant to all players.\", \"common.num_players\": \"The total number of players in the game, as an integer.\", \"common.current_player\": \"The index of the player who is currently taking their turn, as an integer.\", \"common.dealer\": \"The index of the player who is acting as the dealer, as an integer.\", \"common.pot\": \"The total number of chips currently in the pot, as an integer.\", \"common.community_cards\": \"A dictionary listing the community cards visible to all players.\", \"common.community_cards.faceup_cards\": \"A list representing the community cards that are currently face up.\", \"common.facedown_cards\": \"A dictionary that represents cards that are not visible or face down.\", \"common.facedown_cards.deck_size\": \"An integer denoting the number of cards left in the deck.\", \"common.is_over\": \"A boolean value indicating whether the game has ended. 'True' for ended, 'False' for ongoing.\", \"common.winner\": \"The index of the winner at the end of the game, or null if the game is still in progress.\", \"players\": \"A list containing a dictionary for each player, representing their individual game state.\", \"players[n].public\": \"A dictionary containing public information about the nth player.\", \"players[0].public.chips\": \"An integer representing the number of chips currently held by player 0.\", \"players[0].public.current_player\": \"A boolean indicating if this player is the current player. 'True' if yes, omitted or 'False' otherwise.\", \"recent_history\": \"A list of dictionaries representing the recent actions and events in the game.\", \"recent_history[].type\": \"A string that represents the type of event. Possible values include 'action', 'info', and 'turn_end'.\", \"recent_history[].player_id\": \"The index of the player involved in the action or event, when applicable.\", \"recent_history[].action\": \"A dictionary detailing actions taken by a player, including the action type and any arguments passed with it.\", \"recent_history[].msg\": \"A string providing a descriptive message of the event or action that took place.\", \"legal_actions\": \"A list of dictionaries representing the possible actions the current player can take.\", \"legal_actions[].action\": \"A string indicating the type of action available. The example shows 'bet'.\", \"legal_actions[].args\": \"A dictionary containing any necessary arguments related to the action, such as the bet amount.\", \"legal_actions[].id\": \"An identifier for the action, often used internally to track or apply the action later.\"}",
    "policy_list": [
        "**Betting Range Potential**\nCalculates the likelihood of the third card landing between the two face-up cards. It considers the number of ranks between the two cards and assigns a higher value for more potential outcomes that benefit the player, affecting the betting decision.\n**Pot Odds Ratio**\nAssesses the ratio of the current betting opportunity relative to the size of the pot. A higher pot relative to possible winning potential encourages riskier bets, and this metric influences whether to bet conservatively or aggressively.\n**Face Card Pair Status**\nChecks if the two face-up cards form a special pair (such as Acey-Deucey or consecutive cards). Pair status drastically changes the risk and reward dynamic and determines special betting strategies like betting the whole pot on Acey-Deucey.\n**Current Chip Advantage**\nMeasures the AI's current chip lead or disadvantage compared to other players. This encourages strategic adjustments: more aggressive bets when leading to capitalize on advantage, or conservative plays when trailing to avoid elimination.\n**Bet High on Wide Range**\nWhen the two face-up cards have a wide range between them, such as a 2 and a King, place a high bet close to the pot size.\n**Minimum Bet on Consecutive Cards**\nWhen the two face-up cards are consecutive (e.g., a 7 and an 8), bet the minimum amount required.\n**Bet Pot on Acey-Deucey**\nWhen the two face-up cards are an Ace and a Deuce, always bet the entire pot.\n**Moderate Betting on Equal Cards**\nIf the two face-up cards are of the same rank, place a moderate bet, not exceeding half the pot."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    def card_rank(card: dict) -> int:\n        # Define ranks mapping that includes all possible card values\n        ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, \n                 '7': 7, '8': 8, '9': 9, '10': 10, \n                 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return ranks[card['rank']]\n    \n    common = state['common']\n    players = state['players']\n    community_cards = common['community_cards']['faceup_cards']\n    \n    # Initialize score components\n    bet_range_score = 0.0\n    pot_odds_score = 0.0\n    face_card_pair_score = 0.0\n    chip_advantage_score = 0.0\n\n    # Evaluate Betting Range Potential\n    if len(community_cards) == 2:\n        card1_rank, card2_rank = card_rank(community_cards[0]), card_rank(community_cards[1])\n        if card1_rank > card2_rank:\n            card1_rank, card2_rank = card2_rank, card1_rank\n        range_width = card2_rank - card1_rank - 1\n        bet_range_score = range_width / 11.0  # 11 is the maximum non-Ace range width (2 through K)\n    \n    # Determine Pot Odds Ratio\n    bet_amount = action['args']['bet']\n    pot_size = common['pot']\n    if pot_size > 0:\n        pot_odds_score = min(bet_amount / pot_size, 1.0) * bet_range_score\n\n    # Check Face Card Pair Status\n    if len(community_cards) == 2:\n        if card1_rank == card2_rank:\n            # Special condition for equal face-up cards\n            face_card_pair_score = 0.5\n        elif abs(card1_rank - card2_rank) == 1:\n            # Consecutive cards, high risk\n            face_card_pair_score = 0.0\n        elif {card1_rank, card2_rank} == {14, 2}:  # Acey-Deucey situation\n            face_card_pair_score = 1.0\n    \n    # Evaluate Current Chip Advantage\n    current_chips = players[common['current_player']]['public']['chips']\n    max_other_chips = max(player['public']['chips'] for idx, player in enumerate(players) if idx != common['current_player'])\n    if current_chips > max_other_chips:\n        chip_advantage_score = 0.1\n    elif current_chips < max_other_chips:\n        chip_advantage_score = -0.1\n    \n    # Combined score\n    result_score = 0.6 * bet_range_score + 0.2 * pot_odds_score + 0.1 * face_card_pair_score + 0.1 * chip_advantage_score\n\n    # Ensure score is between 0 and 1\n    result_score = max(0.0, min(result_score, 1.0))\n    \n    return result_score\n"
    ]
}