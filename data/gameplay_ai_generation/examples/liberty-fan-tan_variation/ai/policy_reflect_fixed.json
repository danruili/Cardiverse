{
    "game_description": "## Refined Ruleset for Card Game: \"Fusion Rummy\"\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Communal Pool:** Cards that are laid down and visible to all players, used for fusion.\n- **Pot:** Number of counters in the pot visible to all players.\n- **Current Player:** The active player's turn status, with previous actions taken.\n- **Sequence Information:** Current suit being played and its sequence.\n\n#### **Player-Specific Information:**\n- **Public**:\n  - **Fusion Cards:** Displayed unique fusion cards for each player.\n  - **Chips in Front:** If additional chips are anteed due to unequal cards.\n- **Private**:\n  - **Player Hand:** Cards held by the player, visible only to them.\n  - **Special Abilities:** Any special effects granted by fusion cards.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A (with King being high).\n- **Suit:** Hearts, Diamonds, Clubs, Spades.\n\n#### **Special Values:**\n- **Fusion Cards:** Derived from sequences of three consecutive ranks that offer strategic advantages.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck, comprising 13 ranks across 4 suits.\n\n#### **Initial Dealing:**\n- Cards are dealt one at a time starting from the player to the left of the dealer until all cards are allocated. \n- Some players may have more cards than others. Players with fewer cards must ante an additional chip to the pot.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Card:**\n   - Play the next higher card in the current suit in sequence.\n   - Pre-requisite: Card must follow the current suit and sequence.\n2. **Place a Counter:**\n   - Place one counter into the pot if unable or unwilling to play.\n3. **Create a Fusion Card:**\n   - Form a sequence of three consecutive cards solely from their hand.\n   - Added Clarification: Cards used for fusion are removed from the player's hand and displayed publicly, contributing to the player's fusion count.\n4. **Use Fusion Special Ability:**\n   - Activate special abilities provided by previously formed fusion cards during the player's turn.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player to the dealer's left starts the play by playing a card of choice.\n2. Each subsequent player must follow the sequence:\n   - Play a higher rank of the same suit, OR\n   - Place a counter in the pot if unable or unwilling to play the required card.\n3. Players may form fusion cards from valid sequences purely in their hands.\n4. Continuation until the suit is exhausted, or a player fulfills the fusion card requirement.\n5. Player completing a sequence can start a new suit sequence.\n6. A player wins the game by creating the designated number of fusion cards.\n7. Rounds end when a player creates the required number of fusion cards or all card sequences are exhausted.\n\n#### **Winning Conditions:**\n- The first player to create three unique fusion cards wins the game, immediately ending the current round and ignoring leftover cards.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Reform Initiative:** Upon exhausting a suit sequence, the player may start a new suit.\n- **Fusion Abilities:** Include actions like skip-turn effects, card protection, or counter retrieval from the pot, used during the player's turn.\n- **Card Exhaustion:** If all sequences are exhausted, the round ends normally.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Their own hand.\n- Communal pool of cards.\n- Current pot chips.\n- Publicly displayed fusion cards and their effects.\n- Actions taken by every player during their turn.\n\n#### **Hidden Information:**\n- Unrevealed card sequences or strategies of other players.\n\n---\n\n### 8. **Payoffs**\n\n#### **End of Round Scoring:**\n- Scoring for rounds via card remnants is nullified if the game ends via fusion victory.\n- In games without an immediate fusion victory, traditional scoring proceeds; 1 point for each card left.\n\n#### **Fusion Bonuses:**\n- Formation of unique and strategic fusion cards that empower players with special actions and directly influence game outcomes. \n\nThis refined version maintains consistency in the rules and resolves previous ambiguities, enhancing the clarity and strategic depth of \"Fusion Rummy.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 4, \"communal_pool\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}], \"sequence_info\": {\"current_suit\": \"spades\", \"current_sequence\": [\"J\", \"Q\"]}, \"facedown_cards\": {\"stock_size\": 0}, \"is_over\": false, \"winner\": null}, \"players\": [{\"public\": {\"fusion_cards\": [], \"chips_in_front\": 1}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 2}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 1, \"current_player\": true}, \"private\": {\"player_hand\": [{\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}], \"special_abilities\": []}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 0}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 2 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 2's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 places a counter into the pot.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play_card\", \"args\": {\"card\": {\"rank\": \"Q\", \"suit\": \"spades\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play_card-(card: Q-spades)\"}, {\"type\": \"info\", \"msg\": \"Player 3's action: play_card.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays Q-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 0 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 0's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 places a counter into the pot.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 1 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 1's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 places a counter into the pot.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_card\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"spades\"}}, \"id\": 0}, {\"action\": \"create_fusion_card\", \"args\": {\"cards\": [{\"rank\": \"3\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}]}, \"id\": 1}]}\n\nExplanation: \n{\"common\": \"A dictionary holding common game-related information shared across all players.\", \"common.num_players\": \"An integer representing the total number of players participating in the game.\", \"common.current_player\": \"An integer index of the player whose turn it is currently in the game.\", \"common.pot\": \"An integer representing the total number of chips currently in the pot.\", \"common.communal_pool\": \"A list of card dictionaries representing the cards currently in the communal pool, which are visible to all players.\", \"common.sequence_info\": \"A dictionary containing information about the current card sequence that is being played.\", \"common.sequence_info.current_suit\": \"A string representing the suit of the current card sequence in play.\", \"common.sequence_info.current_sequence\": \"A list of strings representing the ranks of cards in the current sequence played.\", \"common.facedown_cards\": \"A dictionary containing information about the facedown cards remaining in the game.\", \"common.facedown_cards.stock_size\": \"An integer indicating the number of cards remaining in the facedown stock pile.\", \"common.is_over\": \"A boolean indicating whether the game has ended (true) or is still ongoing (false).\", \"common.winner\": \"An integer or null representing the index of the winning player, or null if there is no winner yet.\", \"players\": \"A list containing dictionaries of individual player state information.\", \"players[N].public\": \"A dictionary holding public information about player N that is visible to all players.\", \"players[N].public.fusion_cards\": \"A list of lists representing the fusion cards created by player N. Each sublist is a set of three cards forming a valid fusion.\", \"players[N].public.chips_in_front\": \"An integer representing the number of chips player N currently has in front of them, visible to all players.\", \"players[N].private\": \"A dictionary containing private information about player N that is only visible to this player.\", \"players[N].private.player_hand\": \"A list of card dictionaries representing the player's current hand of cards.\", \"players[N].private.special_abilities\": \"A list of strings representing the special abilities available to the player.\", \"recent_history\": \"A list of dictionaries representing actions and messages from recent turns, including actions taken by players and informational messages.\", \"recent_history[N].type\": \"A string indicating the type of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[N].player_id\": \"An integer indicating which player performed the action; used in events of type 'action' or 'turn_end'.\", \"recent_history[N].action\": \"A dictionary providing details about the action taken, present when the type of event is 'action'.\", \"recent_history[N].msg\": \"A string containing a descriptive message about the event or action.\", \"legal_actions\": \"A list of dictionaries representing the legal actions available to the current player.\", \"legal_actions[N].action\": \"A string specifying the type of action that the current player can take, such as 'play_card' or 'create_fusion_card'.\", \"legal_actions[N].args\": \"A dictionary containing arguments related to the action, such as card information for 'play_card'.\"}",
    "policy_list": [
        "**Enhanced Sequence Optimization**\nThis enhanced strategy focuses on maximizing the player's suit sequence advantage by strategically playing higher cards during critical moments when opponents\u2019 hands are likely weak in completing the sequence. It also emphasizes the importance of forming fusion cards proactively when sequences present themselves as strong opportunities, especially when nearing potential victory. The AI will use game state metrics like Fusion Formation Potential and Suit Sequence Advantage to adapt its strategy, assess when to form fusion cards, and when to prioritize sequence exhaustion over resource management.",
        "**Fusion Focus**\nRefined Strategy: Prioritize forming fusion cards by identifying three consecutive ranks in your hand. Critical moments to focus on fusion card creation include situations where the 'Fusion Formation Potential' is high, meaning there are multiple possible sequences or when opponents are visibly struggling with the sequence. However, if 'Suit Sequence Advantage' is significant and completing a sequence is viable without hindrance to fusion potential, playing into the suit might be preferable. Utilize game state metrics such as 'Resource Management' to decide between placing a chip or conserving cards for potential fusion benefits. Use 'Special Ability Utilization' strategically to disrupt opponents or protect your position, especially if the ability can immediately lead to a fusion formation or prevent an opponent's advantage.",
        "**Refined Aggressive Play**\nThe refined strategy involves the AI player consistently playing cards in the current suit sequence to force opponents into placing counters, focusing on scenarios where opponents are unlikely to have the next card. Critical moments for playing cards are when the AI player has a Suit Sequence Advantage\u2014meaning it has multiple cards that follow the current sequence\u2014and it's known or highly probable that opponents lack the required follow-up cards. To condition the strategy on the game state, the AI should regularly assess Suit Sequence Advantage to ensure it's maximizing pressure when most opportune. The AI should also assess Fusion Formation Potential at the start of a turn; if a high potential for creating a fusion is detected, the AI may prioritize executing a fusion sequence instead of an aggressive sequence play. Additionally, Resource Management should be considered when the AI's counter reserves are low, prioritizing resource conservation over aggression. Lastly, Special Ability Utilization may briefly override aggressive play if a strategic special ability can significantly disadvantage opponents or massively swing the game dynamics in the AI's favor.",
        "**Resource Management**\nThe refined strategy for Resource Management emphasizes three critical moments for decision-making: creating a fusion card, choosing to play a card or place a chip, and using special abilities. The decision to form a fusion card should be prioritized if the 'Fusion Formation Potential' is high, indicating a powerful sequence is available and imminent victory is achievable. When facing a decision to play a card or place a chip, the 'Suit Sequence Advantage' should be considered; if the advantage is low, placing a chip might be more strategically sound to reserve cards for future rounds. Special abilities should be utilized when 'Special Ability Utilization' suggests a substantial impact on the game state, such as disrupting a player's sequence or when defending one's position in the game. The overall choice between these actions should also weigh in 'Resource Management' to avoid unnecessary depletion of chips, ensuring resilience across rounds."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common information\n    current_player_id = state['common']['current_player']\n    pot_size = state['common']['pot']\n    current_suit = state['common']['sequence_info']['current_suit']\n    communal_pool = state['common']['communal_pool']\n\n    # Extract current player information\n    player_info = state['players'][current_player_id]\n    player_hand = player_info['private']['player_hand']\n    fusion_cards = player_info['public']['fusion_cards']\n\n    # Utility functions\n    def count_fusion_opportunities(hand):\n        \"\"\"\n        Count the number of potential fusions from the hand\n        \"\"\"\n        ranks = {card['rank'] for card in hand}\n        fusion_opportunities = 0\n        sequence_values = {\"A\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13}\n        sorted_ranks = sorted([sequence_values[rank] for rank in ranks])\n        for i in range(len(sorted_ranks) - 2):\n            if sorted_ranks[i] + 1 == sorted_ranks[i+1] and sorted_ranks[i] + 2 == sorted_ranks[i+2]:\n                fusion_opportunities += 1\n        return fusion_opportunities\n\n    def potential_sequence_play(hand, communal_pool, current_suit):\n        \"\"\"\n        Calculate the number of potential sequence plays available in the hand\n        \"\"\"\n        suits_in_hand = [card for card in hand if card['suit'] == current_suit]\n        plays = 0\n        ranks_on_table = {card['rank'] for card in communal_pool if card['suit'] == current_suit}\n        for card in suits_in_hand:\n            if card['rank'] not in ranks_on_table:\n                plays += 1\n        return plays\n\n    # Calculate current game state score components\n    fusion_opportunities = count_fusion_opportunities(player_hand)\n    sequence_plays = potential_sequence_play(player_hand, communal_pool, current_suit)\n    fusion_advantage = len(fusion_cards)\n\n    # Calculate action-based factors\n    action_type = action['action']\n    action_score = 0\n\n    if action_type == 'play_card':\n        # If the player plays a card, consider this as reducing the opponent's chance to expand sequence.\n        action_score = 0.2 + sequence_plays * 0.1\n    elif action_type == 'create_fusion_card':\n        # Creating a fusion card is a very strategic action with a high win potential.\n        action_score = 0.3 + fusion_opportunities * 0.15\n\n    # Combine factors to get a score\n    base_score = 0.2  # Baseline probability of winning\n    result_score = base_score + action_score + fusion_advantage * 0.2\n    \n    # Ensure the score is within bounds 0 to 1\n    result_score = min(max(result_score, 0), 1)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    current_player_index = state['common']['current_player']\n    current_player = state['players'][current_player_index]\n\n    # Initial baseline score\n    result_score = 0.5\n\n    # Evaluate Fusion Card creation\n    if action['action'] == 'create_fusion_card':\n        result_score += 0.2  # Prioritize fusion card creation\n\n    # Evaluate Playing a Card\n    elif action['action'] == 'play_card':\n        card = action['args']['card']\n        current_suit = state['common']['sequence_info']['current_suit']\n        communal_pool = state['common']['communal_pool']\n        \n        # Check if the card advances the sequence\n        if card['suit'] == current_suit and card['rank'] in [card_dict['rank'] for card_dict in communal_pool]:\n            result_score += 0.15  # Advancing the sequence\n\n    # Check Player's Fusion Card Advantage\n    fusion_card_advantage = len(current_player['public']['fusion_cards'])\n    if fusion_card_advantage > 0:\n        result_score += 0.05 * fusion_card_advantage\n\n    # Check Special Ability Usage\n    if 'special_abilities' in current_player['private']:\n        # Consider available special abilities positively\n        if len(current_player['private']['special_abilities']) > 0:\n            result_score += 0.1\n\n    # Adjust based on the pot size; try to avoid making it too large unnecessarily\n    pot_size = state['common']['pot']\n    if action['action'] == 'place_counter':\n        result_score -= 0.05 * pot_size  # Penalize unnecessary adding to pot\n\n    # Ensure result is within [0, 1]\n    result_score = max(0, min(result_score, 1))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    def evaluate_suit_sequence_advantage(player_hand, sequence_info):\n        current_suit = sequence_info['current_suit']\n        current_sequence = sequence_info['current_sequence']\n        last_card_rank = current_sequence[-1] if current_sequence else None\n        ranks_order = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n        \n        advantage_count = sum(1 for card in player_hand \n                              if card['suit'] == current_suit and \n                              ranks_order.index(card['rank']) > (ranks_order.index(last_card_rank) if last_card_rank else -1))\n        return advantage_count\n\n    def evaluate_fusion_potential(player_hand):\n        fusion_formations = set()\n        ranks_order = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n        hand_by_suit = {}\n        \n        for card in player_hand:\n            if card['suit'] not in hand_by_suit:\n                hand_by_suit[card['suit']] = []\n            hand_by_suit[card['suit']].append(card)\n        \n        for suit, cards in hand_by_suit.items():\n            cards.sort(key=lambda card: ranks_order.index(card['rank']))\n            for i in range(len(cards) - 2):\n                first_idx = ranks_order.index(cards[i]['rank'])\n                if (\n                    ranks_order[first_idx + 1] == cards[i + 1]['rank'] and \n                    ranks_order[first_idx + 2] == cards[i + 2]['rank']\n                ):\n                    # Convert card dictionaries to tuples before adding to the set\n                    fusion_formations.add((\n                        (cards[i]['rank'], cards[i]['suit']), \n                        (cards[i + 1]['rank'], cards[i + 1]['suit']), \n                        (cards[i + 2]['rank'], cards[i + 2]['suit'])\n                    ))\n        \n        return len(fusion_formations)\n\n    common = state['common']\n    players = state['players']\n    current_player_data = players[common['current_player']]['private']\n    player_hand = current_player_data['player_hand']\n    \n    # Calculate Suit Sequence Advantage\n    suit_advantage = evaluate_suit_sequence_advantage(player_hand, common['sequence_info'])\n    suit_advantage_score = suit_advantage / len(player_hand) if player_hand else 0\n\n    # Calculate Fusion Potential\n    fusion_potential = evaluate_fusion_potential(player_hand)\n    fusion_potential_score = fusion_potential / 3  # Assuming needing three fusions to win\n    \n    # Evaluate action\n    action_score = 0\n    action_type = action['action']\n    if action_type == 'play_card':\n        if suit_advantage > 0:\n            action_score = 0.7 + 0.3 * suit_advantage_score\n    elif action_type == 'create_fusion_card':\n        if fusion_potential > 0:\n            action_score = 0.5 + 0.5 * fusion_potential_score\n    elif action_type == 'use_fusion_ability':\n        action_score = 0.4\n\n    # Resource Management consideration\n    current_player_public = players[common['current_player']]['public']\n    if action_type == 'place_counter' and current_player_public['chips_in_front'] > 1:\n        action_score -= 0.2\n\n    # Adjust score based on game state pressure\n    game_winning_state = (fusion_potential_score > 0.8)\n    result_score = min(max(action_score, suit_advantage_score, fusion_potential_score), 1.0)\n    result_score = max(result_score, 0.1 if game_winning_state else 0)\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def is_action_play_card(action):\n        return action['action'] == 'play_card'\n    \n    def is_action_create_fusion_card(action):\n        return action['action'] == 'create_fusion_card'\n    \n    def calculate_fusion_formation_potential(player_hand):\n        # Find sequences of 3 consecutive cards\n        player_hand_sorted = sorted(player_hand, key=lambda x: (x['suit'], x['rank']))\n        sequences = []\n        for i in range(len(player_hand_sorted) - 2):\n            c1 = player_hand_sorted[i]\n            c2 = player_hand_sorted[i+1]\n            c3 = player_hand_sorted[i+2]\n            if (c1['suit'] == c2['suit'] == c3['suit'] and \n                abs(rank_value_map[c1['rank']] - rank_value_map[c2['rank']]) == 1 and \n                abs(rank_value_map[c2['rank']] - rank_value_map[c3['rank']]) == 1):\n                sequences.append((c1, c2, c3))\n        return len(sequences) / 10  # Normalize the potential\n    \n    def calculate_suit_sequence_advantage(sequence_info, player_hand):\n        current_suit = sequence_info['current_suit']\n        possible_cards = [card for card in player_hand if card['suit'] == current_suit]\n        max_rank_in_sequence = max(sequence_info['current_sequence'], key=lambda x: rank_value_map[x])\n        higher_cards = [card for card in possible_cards if rank_value_map[card['rank']] > rank_value_map[max_rank_in_sequence]]\n        sequence_advantage = len(higher_cards) / len(possible_cards) if possible_cards else 0\n        return sequence_advantage\n    \n    def calculate_resource_management(pot_size, chips_in_front):\n        return min(1.0, (pot_size - chips_in_front) / max(pot_size, 1))\n        \n    # Pre-calculated rank mapping for easy rank number comparison\n    rank_value_map = {\n        'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n        '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13\n    }\n    \n    # Retrieve current player hand and chips\n    current_player = state['common']['current_player']\n    player_data = state['players'][current_player]\n    player_hand = player_data['private']['player_hand']\n    chips_in_front = player_data['public']['chips_in_front']\n\n    # Calculate scores from the game state\n    fusion_potential = calculate_fusion_formation_potential(player_hand)\n    suit_advantage = calculate_suit_sequence_advantage(state['common']['sequence_info'], player_hand)\n    resource_management = calculate_resource_management(state['common']['pot'], chips_in_front)\n    \n    # Determine the base reward based on action type\n    if is_action_create_fusion_card(action):\n        base_score = 0.6 + 0.4 * fusion_potential  # Fusion cards are high impact\n    elif is_action_play_card(action):\n        base_score = 0.4 * suit_advantage  # Playing in sequence might have less impact\n    else:\n        base_score = 0.1  # Default minimum score\n    \n    # Final score incorporating resource management\n    result_score = base_score * 0.5 + resource_management * 0.5\n    return min(max(result_score, 0.0), 1.0)  # Ensure result is within [0, 1]\n\n"
    ]
}