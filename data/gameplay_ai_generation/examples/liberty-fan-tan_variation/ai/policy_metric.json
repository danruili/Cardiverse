{
    "game_description": "## Refined Ruleset for Card Game: \"Fusion Rummy\"\n\n### 1. **Game State**\n\n#### **Common Information:**\n- **Communal Pool:** Cards that are laid down and visible to all players, used for fusion.\n- **Pot:** Number of counters in the pot visible to all players.\n- **Current Player:** The active player's turn status, with previous actions taken.\n- **Sequence Information:** Current suit being played and its sequence.\n\n#### **Player-Specific Information:**\n- **Public**:\n  - **Fusion Cards:** Displayed unique fusion cards for each player.\n  - **Chips in Front:** If additional chips are anteed due to unequal cards.\n- **Private**:\n  - **Player Hand:** Cards held by the player, visible only to them.\n  - **Special Abilities:** Any special effects granted by fusion cards.\n\n---\n\n### 2. **Card**\n\n#### **Attributes:**\n- **Rank:** K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A (with King being high).\n- **Suit:** Hearts, Diamonds, Clubs, Spades.\n\n#### **Special Values:**\n- **Fusion Cards:** Derived from sequences of three consecutive ranks that offer strategic advantages.\n\n---\n\n### 3. **Deck and Initial Dealing**\n\n#### **Deck Composition:**\n- A standard 52-card deck, comprising 13 ranks across 4 suits.\n\n#### **Initial Dealing:**\n- Cards are dealt one at a time starting from the player to the left of the dealer until all cards are allocated. \n- Some players may have more cards than others. Players with fewer cards must ante an additional chip to the pot.\n\n---\n\n### 4. **Legal Action Space**\n\n#### **On a Turn, a Player May:**\n1. **Play a Card:**\n   - Play the next higher card in the current suit in sequence.\n   - Pre-requisite: Card must follow the current suit and sequence.\n2. **Place a Counter:**\n   - Place one counter into the pot if unable or unwilling to play.\n3. **Create a Fusion Card:**\n   - Form a sequence of three consecutive cards solely from their hand.\n   - Added Clarification: Cards used for fusion are removed from the player's hand and displayed publicly, contributing to the player's fusion count.\n4. **Use Fusion Special Ability:**\n   - Activate special abilities provided by previously formed fusion cards during the player's turn.\n\n---\n\n### 5. **Round**\n\n#### **Sequence of Play:**\n1. The player to the dealer's left starts the play by playing a card of choice.\n2. Each subsequent player must follow the sequence:\n   - Play a higher rank of the same suit, OR\n   - Place a counter in the pot if unable or unwilling to play the required card.\n3. Players may form fusion cards from valid sequences purely in their hands.\n4. Continuation until the suit is exhausted, or a player fulfills the fusion card requirement.\n5. Player completing a sequence can start a new suit sequence.\n6. A player wins the game by creating the designated number of fusion cards.\n7. Rounds end when a player creates the required number of fusion cards or all card sequences are exhausted.\n\n#### **Winning Conditions:**\n- The first player to create three unique fusion cards wins the game, immediately ending the current round and ignoring leftover cards.\n\n---\n\n### 6. **Other Game Mechanics & Rules**\n\n- **Reform Initiative:** Upon exhausting a suit sequence, the player may start a new suit.\n- **Fusion Abilities:** Include actions like skip-turn effects, card protection, or counter retrieval from the pot, used during the player's turn.\n- **Card Exhaustion:** If all sequences are exhausted, the round ends normally.\n\n---\n\n### 7. **Player Observation Information**\n\n#### **Visible Information to Each Player:**\n- Their own hand.\n- Communal pool of cards.\n- Current pot chips.\n- Publicly displayed fusion cards and their effects.\n- Actions taken by every player during their turn.\n\n#### **Hidden Information:**\n- Unrevealed card sequences or strategies of other players.\n\n---\n\n### 8. **Payoffs**\n\n#### **End of Round Scoring:**\n- Scoring for rounds via card remnants is nullified if the game ends via fusion victory.\n- In games without an immediate fusion victory, traditional scoring proceeds; 1 point for each card left.\n\n#### **Fusion Bonuses:**\n- Formation of unique and strategic fusion cards that empower players with special actions and directly influence game outcomes. \n\nThis refined version maintains consistency in the rules and resolves previous ambiguities, enhancing the clarity and strategic depth of \"Fusion Rummy.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 4, \"current_player\": 2, \"pot\": 4, \"communal_pool\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"spades\"}], \"sequence_info\": {\"current_suit\": \"spades\", \"current_sequence\": [\"J\", \"Q\"]}, \"facedown_cards\": {\"stock_size\": 0}, \"is_over\": false, \"winner\": null}, \"players\": [{\"public\": {\"fusion_cards\": [], \"chips_in_front\": 1}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 2}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 1, \"current_player\": true}, \"private\": {\"player_hand\": [{\"rank\": \"5\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"hearts\"}, {\"rank\": \"K\", \"suit\": \"spades\"}, {\"rank\": \"7\", \"suit\": \"diamonds\"}, {\"rank\": \"10\", \"suit\": \"spades\"}, {\"rank\": \"Q\", \"suit\": \"clubs\"}, {\"rank\": \"A\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"diamonds\"}], \"special_abilities\": []}}, {\"public\": {\"fusion_cards\": [], \"chips_in_front\": 0}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 2 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 2's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 2 places a counter into the pot.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"play_card\", \"args\": {\"card\": {\"rank\": \"Q\", \"suit\": \"spades\"}}, \"id\": 0}, \"msg\": \"Player 3 decides to: play_card-(card: Q-spades)\"}, {\"type\": \"info\", \"msg\": \"Player 3's action: play_card.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 3 plays Q-spades.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 0 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 0's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 places a counter into the pot.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"place_counter\", \"id\": 0}, \"msg\": \"Player 1 decides to: place_counter\"}, {\"type\": \"info\", \"msg\": \"Player 1's action: place_counter.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 places a counter into the pot.\", \"role\": null}], \"legal_actions\": [{\"action\": \"play_card\", \"args\": {\"card\": {\"rank\": \"K\", \"suit\": \"spades\"}}, \"id\": 0}, {\"action\": \"create_fusion_card\", \"args\": {\"cards\": [{\"rank\": \"3\", \"suit\": \"hearts\"}, {\"rank\": \"4\", \"suit\": \"hearts\"}, {\"rank\": \"5\", \"suit\": \"hearts\"}]}, \"id\": 1}]}\n\nExplanation: \n{\"common\": \"A dictionary holding common game-related information shared across all players.\", \"common.num_players\": \"An integer representing the total number of players participating in the game.\", \"common.current_player\": \"An integer index of the player whose turn it is currently in the game.\", \"common.pot\": \"An integer representing the total number of chips currently in the pot.\", \"common.communal_pool\": \"A list of card dictionaries representing the cards currently in the communal pool, which are visible to all players.\", \"common.sequence_info\": \"A dictionary containing information about the current card sequence that is being played.\", \"common.sequence_info.current_suit\": \"A string representing the suit of the current card sequence in play.\", \"common.sequence_info.current_sequence\": \"A list of strings representing the ranks of cards in the current sequence played.\", \"common.facedown_cards\": \"A dictionary containing information about the facedown cards remaining in the game.\", \"common.facedown_cards.stock_size\": \"An integer indicating the number of cards remaining in the facedown stock pile.\", \"common.is_over\": \"A boolean indicating whether the game has ended (true) or is still ongoing (false).\", \"common.winner\": \"An integer or null representing the index of the winning player, or null if there is no winner yet.\", \"players\": \"A list containing dictionaries of individual player state information.\", \"players[N].public\": \"A dictionary holding public information about player N that is visible to all players.\", \"players[N].public.fusion_cards\": \"A list of lists representing the fusion cards created by player N. Each sublist is a set of three cards forming a valid fusion.\", \"players[N].public.chips_in_front\": \"An integer representing the number of chips player N currently has in front of them, visible to all players.\", \"players[N].private\": \"A dictionary containing private information about player N that is only visible to this player.\", \"players[N].private.player_hand\": \"A list of card dictionaries representing the player's current hand of cards.\", \"players[N].private.special_abilities\": \"A list of strings representing the special abilities available to the player.\", \"recent_history\": \"A list of dictionaries representing actions and messages from recent turns, including actions taken by players and informational messages.\", \"recent_history[N].type\": \"A string indicating the type of event, such as 'action', 'info', or 'turn_end'.\", \"recent_history[N].player_id\": \"An integer indicating which player performed the action; used in events of type 'action' or 'turn_end'.\", \"recent_history[N].action\": \"A dictionary providing details about the action taken, present when the type of event is 'action'.\", \"recent_history[N].msg\": \"A string containing a descriptive message about the event or action.\", \"legal_actions\": \"A list of dictionaries representing the legal actions available to the current player.\", \"legal_actions[N].action\": \"A string specifying the type of action that the current player can take, such as 'play_card' or 'create_fusion_card'.\", \"legal_actions[N].args\": \"A dictionary containing arguments related to the action, such as card information for 'play_card'.\"}",
    "policy_list": [
        "**Fusion Formation Potential**\nEvaluates the potential to form a fusion card from the player's current hand. High potential encourages prioritizing the creation of a fusion card. The metric considers the number of potential sequences in hand and weighs their formation value.",
        "**Suit Sequence Advantage**\nMeasures the advantage within the current suit sequence. It takes into account the number of playable cards in the player's hand that can follow the current sequence and the likelihood of opponents not having the required cards to continue.",
        "**Resource Management**\nConsiders the number of remaining chips and weighs the potential costs/benefits of placing a chip versus playing a card. It reflects the player's ability to manage resources effectively for the overall game strategy.",
        "**Special Ability Utilization**\nAssesses the strategic value of using a special ability from the player's fusion cards during their turn. It calculates potential game dynamics shifts as a result of the ability, like impacting opponent turns or safeguarding the player's position."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    import itertools\n\n    def rank_value(rank: str) -> int:\n        \"\"\"Convert card rank into a numerical value for easier comparison.\"\"\"\n        rank_order = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, \n                      '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13}\n        return rank_order[rank]\n    \n    current_player = state['common']['current_player']\n    player_hand = state['players'][current_player]['private']['player_hand']\n    \n    # Inline evaluate_fusion_potential logic\n    suits = {'hearts': [], 'diamonds': [], 'clubs': [], 'spades': []}\n    for card in player_hand:\n        suits[card['suit']].append(rank_value(card['rank']))\n    \n    fusion_potential = 0\n    # Check each suit for consecutive sequences\n    for suit_ranks in suits.values():\n        suit_ranks.sort()\n        if len(suit_ranks) < 3:\n            continue\n        for i in range(len(suit_ranks) - 2):\n            if suit_ranks[i+1] == suit_ranks[i] + 1 and suit_ranks[i+2] == suit_ranks[i] + 2:\n                fusion_potential += 1\n\n    fusion_potential = fusion_potential / len(player_hand) if player_hand else 0\n    \n    # Inline evaluate_action_score logic\n    if action['action'] == 'create_fusion_card':\n        action_score = 0.8 + 0.2 * fusion_potential\n    elif action['action'] == 'play_card':\n        action_score = 0.3\n    elif action['action'] == 'place_counter':\n        action_score = 0.1\n    else:\n        action_score = 0.0\n\n    # Combine both estimates to produce a final score [0,1]\n    result_score = fusion_potential * 0.5 + action_score * 0.5\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    from collections import Counter\n\n    # Extract common info\n    current_suit = state[\"common\"][\"sequence_info\"][\"current_suit\"]\n    current_sequence = state[\"common\"][\"sequence_info\"][\"current_sequence\"]\n    current_player_index = state[\"common\"][\"current_player\"]\n    \n    # Extract player-specific info\n    current_player = state[\"players\"][current_player_index]\n    player_hand = current_player[\"private\"][\"player_hand\"]\n    \n    # Determine the rank value order\n    rank_values = {str(i): i for i in range(2, 11)}\n    rank_values.update({\"J\": 11, \"Q\": 12, \"K\": 13, \"A\": 14})\n    \n    # Calculate Suit Sequence Advantage\n    def calculate_suit_advantage(hand, current_suit, current_sequence):\n        if not current_sequence:\n            return 0\n        \n        # Find the highest rank of the current sequence\n        highest_rank = current_sequence[-1]\n        highest_value = rank_values[highest_rank]\n        \n        # Determine playable cards following the current sequence\n        playable_cards = [card for card in hand if card['suit'] == current_suit and rank_values[card['rank']] > highest_value]\n        n_playable_cards = len(playable_cards)\n        \n        # Calculate advantage based on number of playable cards\n        advantage_score = n_playable_cards / (len(hand) + 1)  # +1 to avoid division by zero\n        return advantage_score\n    \n    # Calculate Fusion Advantage (how close the player is to forming a fusion card)\n    def calculate_fusion_advantage(hand):\n        if len(hand) < 3:\n            return 0\n        \n        # Count suits and ranks\n        rank_counter = Counter([card['rank'] for card in hand])\n        sorted_ranks = sorted(rank_values.keys(), key=lambda rank: rank_values[rank])\n        \n        # Find possible fusions\n        possible_fusions = 0\n        for i in range(len(sorted_ranks) - 2):\n            if rank_counter[sorted_ranks[i]] > 0 and \\\n               rank_counter[sorted_ranks[i+1]] > 0 and \\\n               rank_counter[sorted_ranks[i+2]] > 0:\n                possible_fusions += 1\n        \n        # Normalize fusion potential\n        potential_fusion_score = possible_fusions / (len(hand) + 1)\n        return potential_fusion_score\n\n    # Based on the planned action, calculate a reward score\n    if action[\"action\"] == \"play_card\":\n        card_to_play = action[\"args\"][\"card\"]\n        if card_to_play[\"suit\"] == current_suit:\n            # If the play is advancing the sequence\n            suit_advantage = calculate_suit_advantage(player_hand, current_suit, current_sequence)\n            score = 0.5 + suit_advantage  # Playing a card contributes directly to sequence\n        else:\n            score = 0.5  # Playing off-suit but allowed due to other conditions\n    elif action[\"action\"] == \"create_fusion_card\":\n        # Creating a fusion card\n        fusion_advantage = calculate_fusion_advantage(player_hand)\n        score = 0.5 + fusion_advantage  # Creating a fusion card is significant\n    else:\n        # Placing a counter or other actions\n        score = 0.3  # Non-direct advancement of the game state\n\n    # Ensure the score is within [0, 1]\n    result_score = min(1.0, max(0.0, score))\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    player_id = state['common']['current_player']\n    player_state = state['players'][player_id]\n    player_hand = player_state['private']['player_hand']\n    pot = state['common']['pot']\n    num_players = state['common']['num_players']\n    fusion_cards = player_state['public']['fusion_cards']\n    \n    # Helper function logic integrated for next_in_sequence\n    rank_order = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\n    def next_in_sequence(current_sequence, rank):\n        if not current_sequence:\n            return rank_order[0]  # Start with the lowest rank if no sequence yet\n        current_index = rank_order.index(current_sequence[-1])\n        if current_index + 1 < len(rank_order):\n            return rank_order[current_index + 1]\n        return None\n    \n    # Evaluate the action\n    if action['action'] == 'play_card':\n        card = action['args']['card']\n        # Assess benefit of playing the card in terms of progressing the sequence\n        if card['suit'] == state['common']['sequence_info']['current_suit'] and \\\n           card['rank'] == next_in_sequence(state['common']['sequence_info']['current_sequence'], card['rank']):\n            card_value = 0.5  # Base score for playing a valid sequence card\n        else:\n            card_value = 0.2  # Lesser score for playing a card out of sequence\n    elif action['action'] == 'create_fusion_card':\n        cards = action['args']['cards']\n        card_value = 0.7  # Base score for creating a fusion due to strategic advantages\n        fusion_bonus = 0.1 * len(cards)  # Slight additional value for each card involved in fusion\n    else:\n        card_value = 0.1  # Default base score for other actions\n\n    # Consider resource management of chips\n    if len(fusion_cards) >= 3:\n        win_bonus = 0.4  # High reward if the action results in a win\n    else:\n        win_bonus = 0\n\n    # Base scoring model for resource management\n    chips_factor = 1 / (1 + pot / num_players)  # Encourages chip conservation\n\n    # Calculate total reward with emphasis on continuity\n    result_score = min(1.0, card_value + fusion_bonus + win_bonus + chips_factor)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import math\n\n    # Helper dictionary for rank conversions\n    card_ranks = {\n        'A': 1, '2': 2, '3': 3, '4': 4, '5': 5,\n        '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,\n        'J': 11, 'Q': 12, 'K': 13\n    }\n    \n    # Extracting common and player-specific data from the state\n    common_info = state['common']\n    players_info = state['players']\n    current_player_id = common_info['current_player']\n    current_player = players_info[current_player_id]\n    player_abilities = current_player['private'].get('special_abilities', [])\n    player_hand = current_player['private']['player_hand']\n\n    # Factors that can influence the winning probability\n    num_players = common_info['num_players']\n    pot_value = common_info['pot']\n    fusion_cards_count = len(current_player['public']['fusion_cards'])\n    \n    # Base score on the number of existing fusion cards (goal is 3)\n    fusion_card_score = fusion_cards_count / 3.0\n\n    # If action involves creating a new fusion card, increase probability\n    if action['action'] == 'create_fusion_card':\n        fusion_bonus_score = 0.3  # Arbitrarily chosen benefit for creating a fusion card\n        fusion_card_score = min(1, fusion_card_score + fusion_bonus_score)\n\n    # Use any beneficial player abilities\n    ability_score = 0\n    if action['action'] == 'use_special_ability' and action['args']['ability'] in player_abilities:\n        ability_score = 0.2  # An arbitrary value to indicate the strategic benefit of using an ability\n\n    # Contribution from hand strength: More higher-ranking cards means more opportunities\n    hand_strength_score = sum([math.sqrt(card_ranks[card['rank']]) for card in player_hand]) / len(player_hand) / math.sqrt(13)\n    \n    # Adjust score based on pot; more chips potentially means more cautious play\n    pot_influence = 0.1 if pot_value >= num_players else 0.0\n\n    # Aggregate the score components, ensuring it remains within 0 and 1\n    result_score = min(max(fusion_card_score + ability_score + hand_strength_score - pot_influence, 0), 1)\n\n    return result_score\n"
    ]
}