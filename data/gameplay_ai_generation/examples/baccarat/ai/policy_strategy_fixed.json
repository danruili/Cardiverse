{
    "game_description": "Perhaps the most glamorous of all casino games, Baccarat's trappings are what made it so popular. The lure of the game? It requires no skill - it is a game of pure luck! Baccarat is played for very high stakes, and the gaming table for it is placed in a special alcove, blocked off from the masses and the rest of the casino action. In American casinos, Baccarat tends to be played with real cash - $100-bills are spread all around. European casinos use chips, but the high-denomination chips are oblong \"plaques,\" which make the game look just as exciting as the American version when they are stacked in front of a winning player.\n\n### The Pack\n\nEight 52-card packs are shuffled together and dealt by the croupier (dealer) from a dealing box, called a shoe, which releases one card at a time, face down. In some games, six packs are used.\n\n### The Layout\n\nThe very large Baccarat table has 12 seats, six on either side of the dealer, who only banks the game and does not otherwise participate. Green felt covers the entire table, and the numbers 1 to 12 are marked on it. These numbered areas are where the players keep their money (or chips, as the case may be). A player may bet on the Bank or the Player, and the layout indicates where such bets are placed.\n\nBaccarat is known in some areas as Punto Banco. The only difference is that the word \"Bank\" is replaced by \"Banco,\" and the word \"Player\" is replaced by \"Punto.\" While in most casino games, the dealer stands, in Baccarat, the dealer is seated between players \"1\" and \"12.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 7, \"current_player\": 6, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 416}, \"faceup_cards\": {\"player_hand\": [], \"banker_hand\": []}, \"bets\": {\"Player\": {\"0\": 10, \"1\": 10, \"3\": 20, \"4\": 20}, \"Banker\": {\"5\": 10}, \"Tie\": {\"2\": 20}}, \"betting_complete\": false}, \"players\": [{\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Tie\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Banker\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 0, \"current_bet\": null, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"info\", \"msg\": \"Deck initialized and shuffled with 8 decks.\", \"role\": null}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 0 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 1 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 1 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, \"msg\": \"Player 2 decides to: bet-(bet_type: Tie, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 2 bets 20 on Tie.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 3 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 3 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 4 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 4 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 5, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, \"msg\": \"Player 5 decides to: bet-(bet_type: Banker, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 5 bets 10 on Banker.\", \"role\": null}], \"legal_actions\": [{\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 30}}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"indicates the total number of players participating in the game.\", \"current_player\": \"the ID of the player whose turn it is to place a bet.\", \"winner\": \"indicates the outcome of the game. It can be 'Player', 'Banker', 'Tie', or null if the game is still ongoing.\", \"is_over\": \"a boolean indicating whether the game has concluded or not.\", \"facedown_cards\": {\"deck_size\": \"number of cards remaining in the deck, initially started with 8 decks, a total of 416 cards.\"}, \"faceup_cards\": {\"player_hand\": \"the list of cards that have been dealt face-up to the player.\", \"banker_hand\": \"the list of cards that have been dealt face-up to the banker.\"}, \"bets\": {\"Player\": \"stores the amounts bet by each player on the Player's hand. The keys are player IDs and the values are bet amounts.\", \"Banker\": \"stores the amounts bet by each player on the Banker's hand. The keys are player IDs and the values are bet amounts.\", \"Tie\": \"stores the amounts bet by each player on a Tie outcome. The keys are player IDs and the values are bet amounts.\"}, \"betting_complete\": \"a boolean indicating whether all players have placed their bets and the betting phase is over.\"}, \"players\": [\"contains information about each player including their public betting status and any cards they may have (though not used in this version of the game).\"], \"recent_history\": [\"an array of recent actions and messages that represent the activity and flow of the game, such as player actions, informative messages, and turn endings.\"], \"legal_actions\": [\"a list of actions that the current player can legally take at this moment in the game, typically bets with different amounts and types.\"]}",
    "policy_list": [
        "**Consistent Bank Bet**\nAlways place a bet on the Bank (Banco) area for each round of Baccarat.",
        "**Card Counting Awareness**\nTrack the cards that have been dealt to gauge when to bet on the Player (Punto) or Bank (Banco).",
        "**Trend Betting Strategy**\nObserve trends in the game for streaks or patterns to decide when to bet on the Player or Bank.",
        "**Martingale System**\nUse the Martingale betting system which involves doubling the bet after every loss."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract important information from the state\n    common_info = state['common']\n    num_players = common_info['num_players']\n    current_player_id = common_info['current_player']\n    \n    # Extract the bet type and amount from the action\n    bet_type = action['args']['bet_type']\n    bet_amount = action['args']['amount']\n    \n    # Extract the current betting amounts on Banker (Bank)\n    total_bank_bet = sum(common_info['bets'].get('Banker', {}).values())\n    \n    # Determine the relative bet contribution for Banker\n    player_bet_on_bank = common_info['bets'].get('Banker', {}).get(str(current_player_id), 0)\n    total_bet = sum(sum(bets.values()) for bets in common_info['bets'].values())\n    \n    # Calculate the reward, boosting it based on betting on Banker\n    if total_bet > 0:\n        # If player is betting on Banker, give some positive weight\n        if bet_type == \"Banker\":\n            reward = 0.51 + (bet_amount / total_bet) * 0.49\n        else:\n            # Else, slightly penalize\n            reward = 0.50\n    else:\n        # Default case if total_bet is zero\n        reward = 0.50\n    \n    # Normalize reward by ensuring it's capped within 0 and 1\n    result_score = min(max(reward, 0), 1)\n    \n    return result_score\n\n# Example usage:\n# Given the game state and a proposed action, determine the score\nstate_example = {\n    \"common\": {\n        \"num_players\": 7,\n        \"current_player\": 6,\n        \"winner\": None,\n        \"is_over\": False,\n        \"facedown_cards\": {\"deck_size\": 416},\n        \"faceup_cards\": {\"player_hand\": [], \"banker_hand\": []},\n        \"bets\": {\n            \"Player\": {\"0\": 10, \"1\": 10, \"3\": 20, \"4\": 20},\n            \"Banker\": {\"5\": 10},\n            \"Tie\": {\"2\": 20}\n        },\n        \"betting_complete\": False\n    },\n    \"players\": [\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Tie\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Banker\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 0, \"current_bet\": None, \"current_player\": True}, \"private\": {}, \"facedown_cards\": {}, \"faceup_cards\": {}}\n    ],\n    \"recent_history\": [\n        {\"type\": \"info\", \"msg\": \"Deck initialized and shuffled with 8 decks.\", \"role\": None},\n        {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 0 decides to: bet-(bet_type: Player, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 0 bets 10 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 1 decides to: bet-(bet_type: Player, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 1 bets 10 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, \"msg\": \"Player 2 decides to: bet-(bet_type: Tie, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 2 bets 20 on Tie.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 3 decides to: bet-(bet_type: Player, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 3 bets 20 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 4 decides to: bet-(bet_type: Player, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 4 bets 20 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 5, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, \"msg\": \"Player 5 decides to: bet-(bet_type: Banker, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 5 bets 10 on Banker.\", \"role\": None}\n    ],\n    \"legal_actions\": [\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 30}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 30}}\n    ]\n}\n\naction_example = {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}}\n\n# Test the function\n#print(score(state_example, action_example))  # Expected output: should be slightly above 0.5 as we're betting on Banker\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Define a simplistic card counting system\n    cards_remaining = state['common']['facedown_cards']['deck_size']  # Number of cards left in the deck\n    player_hand = state['common']['faceup_cards']['player_hand']\n    banker_hand = state['common']['faceup_cards']['banker_hand']\n    \n    # Assumed fixed chances for simplicity in a standard game scenario\n    if cards_remaining <= 0:\n        cards_remaining = 416  # Reset to max if no cards are counted\n    \n    prob_player_wins = 0.446  # Average baccarat odds for player winning\n    prob_banker_wins = 0.458  # Average baccarat odds for banker winning\n    prob_tie = 0.095          # Average baccarat odds for a tie\n\n    # Adjust probabilities based on the cards count or the game state, as an exercise\n    # Influence based on remaining cards, although this is a placeholder logic for the card counting awareness\n    if cards_remaining < 104:  # One-quarter of the deck\n        prob_player_wins += 0.01\n        prob_banker_wins -= 0.01\n    \n    if cards_remaining < 52:  # Lesser cards, adjust further\n        prob_player_wins += 0.01\n        prob_banker_wins -= 0.01\n    \n    # Normalizing to make sure they add to 1\n    prob_sum = prob_player_wins + prob_banker_wins + prob_tie\n    prob_player_wins /= prob_sum\n    prob_banker_wins /= prob_sum\n    prob_tie /= prob_sum\n    \n    # Determine bet type based on the action\n    bet_type = action['args']['bet_type']\n\n    # Calculate the reward score based on the expected probability\n    if bet_type == \"Player\":\n        result_score = prob_player_wins\n    elif bet_type == \"Banker\":\n        result_score = prob_banker_wins\n    elif bet_type == \"Tie\":\n        result_score = prob_tie\n    else:\n        result_score = 0  # Default to 0 if invalid bet type\n    \n    return float(result_score)\n",
        "\ndef score(state: dict, action: dict) -> float:\n    import itertools\n    \n    # Extracting recent history and legal actions\n    recent_history = state.get('recent_history', [])\n    current_bets = state['common']['bets']\n    legal_actions = state.get('legal_actions', [])\n\n    # Analyzing betting trends - counts recent wins for Player/Banker\n    def recent_trend(history):\n        player_wins = 0\n        banker_wins = 0\n        for record in history:\n            if record['type'] == 'turn_end':\n                continue\n            if record['type'] == 'info' and \"Player wins\" in record['msg']:\n                player_wins += 1\n            elif record['type'] == 'info' and \"Banker wins\" in record['msg']:\n                banker_wins += 1\n        return player_wins, banker_wins\n    \n    # Count recent winning streaks\n    player_wins, banker_wins = recent_trend(recent_history)\n\n    # Dynamic weight calculation based on recent trends\n    player_trend_weight = player_wins / (player_wins + banker_wins + 1) # avoids division by zero\n    banker_trend_weight = banker_wins / (player_wins + banker_wins + 1)\n    \n    # Extract action details\n    action_bet_type = action['args']['bet_type']\n    action_amount = action['args']['amount']\n    \n    # Initial base reward\n    base_reward = 0.1  # A base score for doing an action\n\n    # Reward adjusting strategies\n    if player_wins > banker_wins:  # Stronger trend on Player\n        if action_bet_type == \"Player\":\n            trend_bonus = 0.3\n        else:\n            trend_bonus = -0.1\n    else:  # Stronger trend on Banker\n        if action_bet_type == \"Banker\":\n            trend_bonus = 0.3\n        else:\n            trend_bonus = -0.1\n\n    action_popularity_bonus = 0\n    \n    # Calculate popularity of the betting option chosen in current cycle\n    if action_bet_type in current_bets:\n        total_current_bets = sum(current_bets[action_bet_type].values())\n        action_popularity_bonus = total_current_bets / sum(itertools.chain(*[v.values() for v in current_bets.values()]))\n\n    # Calculate final reward\n    result_score = base_reward + trend_bonus + action_popularity_bonus\n    \n    # Ensure the result is between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    num_decks = 8\n    cards_in_deck = num_decks * 52  # Total cards initially in the deck\n    facedown_cards = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    faceup_cards = cards_in_deck - facedown_cards\n    \n    # Determine how risky the bet is\n    if action[\"action\"] == \"bet\":\n        action_bet_type = action[\"args\"][\"bet_type\"]\n        action_bet_amount = action[\"args\"][\"amount\"]\n    else:\n        return 0.0\n\n    # Finding the bet history for the current player\n    current_player_id = state[\"common\"][\"current_player\"]\n    player_bets_history = state[\"common\"][\"bets\"]\n    current_player_public = state[\"players\"][current_player_id][\"public\"]\n\n    # Calculate Martingale risk based on current and past bets\n    historical_loss_factor = 1\n    if current_player_public[\"current_bet\"]:\n        current_bet_type = current_player_public[\"current_bet\"]\n        if current_bet_type in player_bets_history:\n            for pid, amount in player_bets_history[current_bet_type].items():\n                if int(pid) == current_player_id:\n                    historical_loss_factor *= (action_bet_amount / amount)\n    \n    # Consider faceup card count as part of the game progress (higher faceup implies nearing end of game)\n    game_progress_factor = (1 - (facedown_cards / cards_in_deck))\n\n    # Calculate base winning chance of a bet\n    if action_bet_type == \"Player\" or action_bet_type == \"Banker\":\n        base_probability = 0.45  # Basic winning odds without deep analysis\n    elif action_bet_type == \"Tie\":\n        base_probability = 0.10  # Ties are less likely\n\n    # Calculate the final score as a product of base probability, loss factor, and game progress significance\n    result_score = base_probability * historical_loss_factor * (1 + game_progress_factor)\n\n    # Normalize result score between 0 and 1\n    result_score = max(0.0, min(1.0, result_score))\n    return result_score\n"
    ]
}