{
    "game_description": "Perhaps the most glamorous of all casino games, Baccarat's trappings are what made it so popular. The lure of the game? It requires no skill - it is a game of pure luck! Baccarat is played for very high stakes, and the gaming table for it is placed in a special alcove, blocked off from the masses and the rest of the casino action. In American casinos, Baccarat tends to be played with real cash - $100-bills are spread all around. European casinos use chips, but the high-denomination chips are oblong \"plaques,\" which make the game look just as exciting as the American version when they are stacked in front of a winning player.\n\n### The Pack\n\nEight 52-card packs are shuffled together and dealt by the croupier (dealer) from a dealing box, called a shoe, which releases one card at a time, face down. In some games, six packs are used.\n\n### The Layout\n\nThe very large Baccarat table has 12 seats, six on either side of the dealer, who only banks the game and does not otherwise participate. Green felt covers the entire table, and the numbers 1 to 12 are marked on it. These numbered areas are where the players keep their money (or chips, as the case may be). A player may bet on the Bank or the Player, and the layout indicates where such bets are placed.\n\nBaccarat is known in some areas as Punto Banco. The only difference is that the word \"Bank\" is replaced by \"Banco,\" and the word \"Player\" is replaced by \"Punto.\" While in most casino games, the dealer stands, in Baccarat, the dealer is seated between players \"1\" and \"12.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 7, \"current_player\": 6, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 416}, \"faceup_cards\": {\"player_hand\": [], \"banker_hand\": []}, \"bets\": {\"Player\": {\"0\": 10, \"1\": 10, \"3\": 20, \"4\": 20}, \"Banker\": {\"5\": 10}, \"Tie\": {\"2\": 20}}, \"betting_complete\": false}, \"players\": [{\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Tie\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Banker\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 0, \"current_bet\": null, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"info\", \"msg\": \"Deck initialized and shuffled with 8 decks.\", \"role\": null}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 0 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 1 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 1 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, \"msg\": \"Player 2 decides to: bet-(bet_type: Tie, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 2 bets 20 on Tie.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 3 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 3 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 4 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 4 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 5, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, \"msg\": \"Player 5 decides to: bet-(bet_type: Banker, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 5 bets 10 on Banker.\", \"role\": null}], \"legal_actions\": [{\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 30}}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"indicates the total number of players participating in the game.\", \"current_player\": \"the ID of the player whose turn it is to place a bet.\", \"winner\": \"indicates the outcome of the game. It can be 'Player', 'Banker', 'Tie', or null if the game is still ongoing.\", \"is_over\": \"a boolean indicating whether the game has concluded or not.\", \"facedown_cards\": {\"deck_size\": \"number of cards remaining in the deck, initially started with 8 decks, a total of 416 cards.\"}, \"faceup_cards\": {\"player_hand\": \"the list of cards that have been dealt face-up to the player.\", \"banker_hand\": \"the list of cards that have been dealt face-up to the banker.\"}, \"bets\": {\"Player\": \"stores the amounts bet by each player on the Player's hand. The keys are player IDs and the values are bet amounts.\", \"Banker\": \"stores the amounts bet by each player on the Banker's hand. The keys are player IDs and the values are bet amounts.\", \"Tie\": \"stores the amounts bet by each player on a Tie outcome. The keys are player IDs and the values are bet amounts.\"}, \"betting_complete\": \"a boolean indicating whether all players have placed their bets and the betting phase is over.\"}, \"players\": [\"contains information about each player including their public betting status and any cards they may have (though not used in this version of the game).\"], \"recent_history\": [\"an array of recent actions and messages that represent the activity and flow of the game, such as player actions, informative messages, and turn endings.\"], \"legal_actions\": [\"a list of actions that the current player can legally take at this moment in the game, typically bets with different amounts and types.\"]}",
    "policy_list": [
        "**Refined Consistent Bank Bet**\nRefining the 'Consistent Bank Bet' strategy involves understanding and incorporating game state conditions into its framework. Key improvements include:\n\n1. **Win Probability Difference**: Regularly monitor the probability difference between Bank and Player bets. If real-time data suggests an unusually high difference due to recent game patterns, adjust bets slightly to capitalize on this metric if it favors the Bank significantly.\n\n2. **Bank Edge**: Acknowledge and utilize the inherent Bank advantage, but also account for any subtle shifts in edge due to ongoing outcomes. While this doesn't usually change, player psychology and rare card distributions could influence perceived value slightly.\n\n3. **Card Counting Impact**: Although Baccarat isn't conducive to traditional card counting, observe any skew in the probability distribution due to observed high-impact cards being dealt. Adjusting in rare scenarios where data indicates a notable shift can refine the strategy.\n\n4. **Betting History Influence**: While Baccarat is a game of luck, streaks can sometimes impact player psychology, leading to overbets or underbets by participants. Recognize these patterns to ensure balancing bet sizes and maintaining the Bank focus, without succumbing to gambler's fallacy.\n\nThe refined strategy still upholds the principle of leveraging Bank's statistical edge, but incorporates responsive adjustments based on observed game metrics. This keeps the essence of the strategy intact while allowing for more calculated positioning in variance-driven situations. This reflection covers coherent and actionable steps to integrate real-time insights without straying from the core advantage of Bank bets in Baccarat.",
        "**Card Counting Awareness Refined Strategy**\nThe refined strategy involves using card counting to adjust betting choices based on pragmatic game state assessments. Here's how it can be made more actionable:\n\n1. **Win Probability Difference:** Track historical data to estimate probabilities. If the difference favors Player bets by a threshold of 2% based on historical data and card distribution, consider betting on the Player. The same applies for Bank bets if the probability swings in favor of the Bank with a similar threshold.\n\n2. **Betting History Influence:** Keep a running tally of outcomes. A significant streak (5 or more consecutive rounds) for either side should prompt a re-evaluation of betting positions. If these streaks are accompanied by supportive card counting data, adjust bets accordingly.\n\n3. **Bank Edge:** Always consider the slight advantage the Bank holds. This should be the default bet unless significant evidence from ends like Card Counting Impact or Win Probability Difference indicates a materially better chance for the Player.\n\n4. **Card Counting Impact:** Monitor dealt cards to check the remaining ratios of high-value vs. low-value cards. Noticing an uncommon skew (e.g., an excess of low-value cards remaining) could mention a marginal improved state for Player bets if uncommon, high-impact cards have predominantly appeared.\n\nWhile Baccarat remains a game of chance, these refined strategies introduce a structured response to perceived patterns or statistical deviations that might suggest slight advantages.",
        "**Refined Trend Betting Strategy**\n1. Clarified Critical Moments: In the Trend Betting Strategy, critical moments would be identified when there is a noticeable streak of outcomes (e.g., three or more consecutive wins for either Bank or Player). These moments are when the AI determines whether a pattern might be emerging. If Bank wins three times in a row, a 'critical moment' would be the next round to decide whether the AI will bet on Bank, anticipating the streak to continue.\n\n2. Conditioning Strategy on Game State Metrics:\n   - **Win Probability Difference**: The AI will monitor the win probability difference, which provides insights based on historical data and trends. If the probability significantly favors one side, the AI may choose to follow that trend, assuming the odds suggest a beneficial outcome.\n   - **Betting History Influence**: By tracking the recent streaks (e.g., last 10 rounds), the AI can use a statistical approach to determine whether the present streak seems significant. If the recent trend (e.g., 7 out of 10 wins for Bank) suggests a momentum, the AI will condition its next bet based on this metric.\n   - **Bank Edge**: Given the house edge inherent in Bank bets, the AI may choose to slightly favor Bank bets. However, this decision will always consider the potential loss streak or unusual trends on the Player side.\n   - **Card Counting Impact**: Though Baccarat has a strong element of luck, any notable deviation in dealt cards (such as a higher count of low cards left) might subtly influence betting decisions, allowing the AI to adjust its bets accordingly if such a trend impacts outcome likelihood, albeit this impact is minimal in Baccarat.",
        "**Refined Martingale System Strategy**\nThe refined Martingale System strategy for Baccarat should incorporate several layers of decision-making to enhance its effectiveness while minimizing risk. The steps are as follows:\n\n1. **Conditional Reset Point:** Establish a threshold for consecutive losses after which the system resets regardless of the current streak\u2014this will limit cumulative losses. For instance, a player might set a rule to reset after a 5-loss streak.\n\n2. **Dynamic Betting Adjustment:** Rather than strictly doubling the bet after each loss, adjust subsequent bets based on Win Probability Difference and Betting History Influence. If there's a noticeable trend or streak favoring one side (Player or Bank) based on recent rounds (Betting History Influence), consider placing a higher bet on that side while applying the Martingale doubling for losses.\n\n3. **Bank Edge Consideration:** Factor the inherent Bank Edge into decisions. Given that the Bank typically has a slight advantage, prioritize Bank bets unless there's a statistically significant prompt otherwise from the Betting History Influence.\n\n4. **Strategic Bankroll Management:** Before entering a table, determine a maximum bankroll allocation for the session, and do not exceed it. Clearly define sections of the bankroll for different Martingale cycles.\n\n5. **Card Counting Impact Incorporation:** While challenging due to the nature of the game, utilize any accessible historical card distribution data to influence bets. For example, if analysis suggests that high-impact cards like aces or faces are due, this could sway the decision towards betting on Player if prior outcomes showed a greater probability of such a scenario causing Player wins.\n\nBy implementing these refined elements into the Martingale System, players can better manage risk while still leveraging the theoretical advantage of recouping losses through a win in a series."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract the necessary information from the state\n    common_state = state['common']\n    current_player_id = common_state['current_player']\n    legal_actions = state['legal_actions']\n    \n    # Ensure the action is legal\n    if action not in legal_actions:\n        return 0.0\n\n    # Initialize base probabilities for each outcome\n    prob_bank = 0.5  # General assumption of Banker win since it often has a statistical edge\n    prob_player = 0.48\n    prob_tie = 0.02  # Lower chance for a Tie\n\n    # Adjust the probabilities based on game state\n    # 1. Assess recent betting patterns\n    bets = common_state['bets']\n    total_bets_bank = sum(bets['Banker'].values())\n    total_bets_player = sum(bets['Player'].values())\n    total_bets_tie = sum(bets['Tie'].values())\n    \n    # Checking for betting trend and adjusting win probability\n    if total_bets_bank > total_bets_player:  # More bets on Bank could reflect confidence\n        prob_bank += 0.01\n    \n    if total_bets_player > total_bets_bank:\n        prob_bank -= 0.01\n    \n    if total_bets_tie > 0:  # Tie bets reflect a possible shift; however, they stay low\n        prob_tie += 0.01\n        prob_bank -= 0.005\n        prob_player -= 0.005\n    \n    # 2. Check for betting streaks or recent game patterns in history\n    recent_history = state.get('recent_history', [])\n    bank_wins = sum(1 for record in recent_history if record.get('msg', '').startswith('Banker wins'))\n    player_wins = sum(1 for record in recent_history if record.get('msg', '').startswith('Player wins'))\n    ties = sum(1 for record in recent_history if record.get('msg', '').startswith('Tie'))\n\n    if bank_wins > player_wins:\n        prob_bank += 0.01 * (bank_wins - player_wins)\n    \n    if player_wins > bank_wins:\n        prob_bank -= 0.01 * (player_wins - bank_wins)\n    \n    # Normalize probabilities due to adjustments\n    total = prob_bank + prob_player + prob_tie\n    prob_bank /= total\n    prob_player /= total\n    prob_tie /= total\n\n    # 3. Account for specific action planned\n    action_bet_type = action['args']['bet_type']\n    bet_amount = action['args']['amount']\n\n    if action_bet_type == 'Banker':\n        # Increase reward for betting on Banker given adjustments\n        result_score = prob_bank\n    elif action_bet_type == 'Player':\n        result_score = prob_player\n    elif action_bet_type == 'Tie':\n        result_score = prob_tie\n    else:\n        result_score = 0.0  # Invalid action type should technically not occur due to legality check\n\n    return result_score\n\n# Example function call\nstate = {\n    \"common\": {\n        \"num_players\": 7,\n        \"current_player\": 6,\n        \"winner\": None,\n        \"is_over\": False,\n        \"facedown_cards\": {\"deck_size\": 416},\n        \"faceup_cards\": {\"player_hand\": [], \"banker_hand\": []},\n        \"bets\": {\"Player\": {\"0\": 10, \"1\": 10, \"3\": 20, \"4\": 20}, \"Banker\": {\"5\": 10}, \"Tie\": {\"2\": 20}},\n        \"betting_complete\": False\n    },\n    \"players\": [\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Tie\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Banker\"}, \"facedown_cards\": {}, \"faceup_cards\": {}},\n        {\"public\": {\"bet_amount\": 0, \"current_bet\": None, \"current_player\": True}, \"private\": {}, \"facedown_cards\": {}, \"faceup_cards\": {}}\n    ],\n    \"recent_history\": [\n        {\"type\": \"info\", \"msg\": \"Deck initialized and shuffled with 8 decks.\", \"role\": None},\n        {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 0 decides to: bet-(bet_type: Player, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 0 bets 10 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 1 decides to: bet-(bet_type: Player, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 1 bets 10 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, \"msg\": \"Player 2 decides to: bet-(bet_type: Tie, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 2 bets 20 on Tie.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 3 decides to: bet-(bet_type: Player, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 3 bets 20 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 4 decides to: bet-(bet_type: Player, amount: 20)\"},\n        {\"type\": \"info\", \"msg\": \"Player 4 bets 20 on Player.\", \"role\": None},\n        {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"},\n        {\"type\": \"action\", \"player_id\": 5, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, \"msg\": \"Player 5 decides to: bet-(bet_type: Banker, amount: 10)\"},\n        {\"type\": \"info\", \"msg\": \"Player 5 bets 10 on Banker.\", \"role\": None}\n    ],\n    \"legal_actions\": [\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 30}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 10}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}},\n        {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 30}}\n    ]\n}\n\naction = {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}}\n#print(score(state, action))\n",
        "\ndef score(state: dict, action: dict) -> float:\n    if state['common']['is_over']:\n        return 0.0  # Game over, so there's no chance of winning further.\n\n    # Extract information from the input state\n    num_players = state['common']['num_players']\n    facedown_cards = state['common']['facedown_cards']['deck_size']\n    player_hand = state['common']['faceup_cards']['player_hand']\n    banker_hand = state['common']['faceup_cards']['banker_hand']\n    current_bet_type = action['args']['bet_type']\n    bets = state['common']['bets']\n    \n    # Calculate the proportion of favorable events in card distribution\n    high_card_value = [10, 11, 12, 13]  # Representing Tens and face cards\n    low_card_value = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # Representing numbered cards\n    remaining_cards = facedown_cards\n   \n    # Count the cards in play (faceup)\n    cards_in_play = player_hand + banker_hand\n    \n    # Counting high and low cards remaining\n    high_cards_in_play = sum(card in high_card_value for card in cards_in_play)\n    low_cards_in_play = sum(card in low_card_value for card in cards_in_play)\n    \n    high_card_ratio = (16 * 8 - high_cards_in_play) / remaining_cards\n    low_card_ratio = (88 * 8 - low_cards_in_play) / remaining_cards\n    \n    # Current bets dominance by players\n    player_streak = len([bet for bet in bets['Player'].values() if bet > 0])\n    banker_streak = len([bet for bet in bets['Banker'].values() if bet > 0])\n\n    # Base probabilities (Note: This is a simplification based on provided policy)\n    base_prob_player = 0.442\n    base_prob_banker = 0.458\n    base_prob_tie = 0.1\n\n    # Adjust base probabilities based on card assessment\n    if high_card_ratio > low_card_ratio:\n        player_bias = 0.02  # favor player if there are more high cards\n    else:\n        player_bias = -0.02\n\n    # Adjust base probabilities based on sequence & player/banker streak\n    if current_bet_type == \"Player\":\n        prob_win = base_prob_player + player_bias\n        if player_streak >= 5:\n            prob_win += 0.01  # slight boost in win chance for player\n    elif current_bet_type == \"Banker\":\n        prob_win = base_prob_banker - 0.01  # inherent house advantage\n        if banker_streak >= 5:\n            prob_win += 0.01  # slight increase for banker bet due to streak\n    elif current_bet_type == \"Tie\":\n        prob_win = base_prob_tie\n\n    # Clamp the probability to [0, 1]\n    result_score = max(0.0, min(1.0, prob_win))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Default baseline scores\n    result_score = 0.5\n    \n    recent_history = state['recent_history']\n    \n    # Determine win streaks from recent history\n    bank_streak = 0\n    player_streak = 0\n    recent_bets = []\n    \n    for event in recent_history:\n        if event['type'] == 'action' and event['action']['action'] == 'bet':\n            recent_bets.append(event['action']['args']['bet_type'])\n    \n    if len(recent_bets) >= 3:\n        if all(bet == 'Banker' for bet in recent_bets[-3:]):\n            bank_streak = 3\n        elif all(bet == 'Player' for bet in recent_bets[-3:]):\n            player_streak = 3\n    \n    player_bet_count = len([x for x in recent_bets if x == 'Player'])\n    banker_bet_count = len([x for x in recent_bets if x == 'Banker'])\n    total_bets = len(recent_bets)\n    \n    probability_player = (player_bet_count / total_bets) if total_bets else 0.5\n    probability_banker = (banker_bet_count / total_bets) if total_bets else 0.5\n\n    bet_type = action['args']['bet_type']\n    \n    if bank_streak >= 3 and bet_type == 'Banker':\n        result_score = min(1.0, probability_banker + 0.1)\n    elif player_streak >= 3 and bet_type == 'Player':\n        result_score = min(1.0, probability_player + 0.1)\n    elif bet_type == 'Banker':\n        result_score = probability_banker + 0.02\n    elif bet_type == 'Player':\n        result_score = probability_player\n    elif bet_type == 'Tie':\n        result_score = 0.05\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Estimate the probability of winning based on the game state and a planned game action.\n    \n    :param state: A dictionary representing the current state of the game.\n    :param action: A dictionary representing the planned game action.\n                   Example: {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}\n    :return: A float representing the estimated probability of winning (between 0 and 1).\n    \"\"\"\n    # Extract common game state attributes\n    num_players = state['common']['num_players']\n    current_player_id = state['common']['current_player']\n    is_game_over = state['common']['is_over']\n    \n    # If the game is over, return 0 as there is no action to score\n    if is_game_over:\n        return 0.0\n    \n    # Extract betting details from the action\n    bet_type = action['args']['bet_type']\n    bet_amount = action['args']['amount']\n    \n    # Extract the recent history and calculate trends\n    recent_history = state.get('recent_history', [])\n    player_wins = sum(1 for entry in recent_history if entry.get('action', {}).get('args', {}).get('bet_type') == 'Player')\n    banker_wins = sum(1 for entry in recent_history if entry.get('action', {}).get('args', {}).get('bet_type') == 'Banker')\n    ties = sum(1 for entry in recent_history if entry.get('action', {}).get('args', {}).get('bet_type') == 'Tie')\n    \n    # Total actions for win_probability calculation\n    total_actions = player_wins + banker_wins + ties + 1e-5  # Avoid division by zero\n\n    # Calculate win likelihood based on historical trend and bank edge\n    player_win_probability = (player_wins / total_actions) * 0.44\n    banker_win_probability = (banker_wins / total_actions) * 0.46  # Banker has a slight edge\n    tie_probability = (ties / total_actions) * 0.10\n    \n    if bet_type == 'Player':\n        win_probability = player_win_probability\n    elif bet_type == 'Banker':\n        win_probability = banker_win_probability\n    elif bet_type == 'Tie':\n        win_probability = tie_probability\n    else:\n        win_probability = 0.0\n    \n    # Adjust probability based on the bet amount and distribution of current hand\n    # Implement a simplistic card analysis - here is a placeholder\n    num_faceup_cards = len(state['common']['faceup_cards']['player_hand']) + len(state['common']['faceup_cards']['banker_hand'])\n    \n    # Use dynamic bet adjustment influence for high bet amounts\n    if bet_amount > 20:\n        win_probability *= 1.1  # Slightly up the probability for larger bets\n\n    # Normalize the score within the range [0, 1]\n    result_score = min(max(win_probability, 0.0), 1.0)\n\n    return result_score\n"
    ]
}