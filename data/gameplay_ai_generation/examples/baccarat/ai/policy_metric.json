{
    "game_description": "Perhaps the most glamorous of all casino games, Baccarat's trappings are what made it so popular. The lure of the game? It requires no skill - it is a game of pure luck! Baccarat is played for very high stakes, and the gaming table for it is placed in a special alcove, blocked off from the masses and the rest of the casino action. In American casinos, Baccarat tends to be played with real cash - $100-bills are spread all around. European casinos use chips, but the high-denomination chips are oblong \"plaques,\" which make the game look just as exciting as the American version when they are stacked in front of a winning player.\n\n### The Pack\n\nEight 52-card packs are shuffled together and dealt by the croupier (dealer) from a dealing box, called a shoe, which releases one card at a time, face down. In some games, six packs are used.\n\n### The Layout\n\nThe very large Baccarat table has 12 seats, six on either side of the dealer, who only banks the game and does not otherwise participate. Green felt covers the entire table, and the numbers 1 to 12 are marked on it. These numbered areas are where the players keep their money (or chips, as the case may be). A player may bet on the Bank or the Player, and the layout indicates where such bets are placed.\n\nBaccarat is known in some areas as Punto Banco. The only difference is that the word \"Bank\" is replaced by \"Banco,\" and the word \"Player\" is replaced by \"Punto.\" While in most casino games, the dealer stands, in Baccarat, the dealer is seated between players \"1\" and \"12.\"",
    "input_description": "Example: \n{\"common\": {\"num_players\": 7, \"current_player\": 6, \"winner\": null, \"is_over\": false, \"facedown_cards\": {\"deck_size\": 416}, \"faceup_cards\": {\"player_hand\": [], \"banker_hand\": []}, \"bets\": {\"Player\": {\"0\": 10, \"1\": 10, \"3\": 20, \"4\": 20}, \"Banker\": {\"5\": 10}, \"Tie\": {\"2\": 20}}, \"betting_complete\": false}, \"players\": [{\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Tie\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 20, \"current_bet\": \"Player\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 10, \"current_bet\": \"Banker\"}, \"facedown_cards\": {}, \"faceup_cards\": {}}, {\"public\": {\"bet_amount\": 0, \"current_bet\": null, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {}, \"faceup_cards\": {}}], \"recent_history\": [{\"type\": \"info\", \"msg\": \"Deck initialized and shuffled with 8 decks.\", \"role\": null}, {\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 0 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 0, \"msg\": \"---------- End of Player 0's turn ----------\"}, {\"type\": \"action\", \"player_id\": 1, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, \"msg\": \"Player 1 decides to: bet-(bet_type: Player, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 1 bets 10 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 1, \"msg\": \"---------- End of Player 1's turn ----------\"}, {\"type\": \"action\", \"player_id\": 2, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, \"msg\": \"Player 2 decides to: bet-(bet_type: Tie, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 2 bets 20 on Tie.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 2, \"msg\": \"---------- End of Player 2's turn ----------\"}, {\"type\": \"action\", \"player_id\": 3, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 3 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 3 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 3, \"msg\": \"---------- End of Player 3's turn ----------\"}, {\"type\": \"action\", \"player_id\": 4, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, \"msg\": \"Player 4 decides to: bet-(bet_type: Player, amount: 20)\"}, {\"type\": \"info\", \"msg\": \"Player 4 bets 20 on Player.\", \"role\": null}, {\"type\": \"turn_end\", \"player_id\": 4, \"msg\": \"---------- End of Player 4's turn ----------\"}, {\"type\": \"action\", \"player_id\": 5, \"action\": {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, \"msg\": \"Player 5 decides to: bet-(bet_type: Banker, amount: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 5 bets 10 on Banker.\", \"role\": null}], \"legal_actions\": [{\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Player\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Banker\", \"amount\": 30}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 10}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 20}}, {\"action\": \"bet\", \"args\": {\"bet_type\": \"Tie\", \"amount\": 30}}]}\n\nExplanation: \n{\"common\": {\"num_players\": \"indicates the total number of players participating in the game.\", \"current_player\": \"the ID of the player whose turn it is to place a bet.\", \"winner\": \"indicates the outcome of the game. It can be 'Player', 'Banker', 'Tie', or null if the game is still ongoing.\", \"is_over\": \"a boolean indicating whether the game has concluded or not.\", \"facedown_cards\": {\"deck_size\": \"number of cards remaining in the deck, initially started with 8 decks, a total of 416 cards.\"}, \"faceup_cards\": {\"player_hand\": \"the list of cards that have been dealt face-up to the player.\", \"banker_hand\": \"the list of cards that have been dealt face-up to the banker.\"}, \"bets\": {\"Player\": \"stores the amounts bet by each player on the Player's hand. The keys are player IDs and the values are bet amounts.\", \"Banker\": \"stores the amounts bet by each player on the Banker's hand. The keys are player IDs and the values are bet amounts.\", \"Tie\": \"stores the amounts bet by each player on a Tie outcome. The keys are player IDs and the values are bet amounts.\"}, \"betting_complete\": \"a boolean indicating whether all players have placed their bets and the betting phase is over.\"}, \"players\": [\"contains information about each player including their public betting status and any cards they may have (though not used in this version of the game).\"], \"recent_history\": [\"an array of recent actions and messages that represent the activity and flow of the game, such as player actions, informative messages, and turn endings.\"], \"legal_actions\": [\"a list of actions that the current player can legally take at this moment in the game, typically bets with different amounts and types.\"]}",
    "policy_list": [
        "**Win Probability Difference**\nThe difference in the estimated probability of winning between betting on the Bank (Banco) and the Player (Punto). This metric helps assess the potential value of each betting option based on historical outcomes and odds.",
        "**Betting History Influence**\nA statistical measure of the past outcomes for Bank and Player bets. It evaluates streaks or patterns in recent rounds to determine if there appears to be any influence in outcomes, despite the nature of the game being luck-based.",
        "**Bank Edge**\nThe built-in mathematical house advantage (edge) for Bank bets. This measures the long-term expected return from consistently betting on Bank compared to Player, which typically has a slightly better edge in most versions of Baccarat.",
        "**Card Counting Impact**\nA calculated effect based on the cards dealt so far, factoring in any changes to standard odds if certain high-impact cards (like aces or face cards) are more or less likely to appear in forthcoming rounds."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant data from the state\n    num_players = state['common']['num_players']\n    current_player = state['common']['current_player']\n    bank_bets = state['common']['bets'].get(\"Banker\", {})\n    player_bets = state['common']['bets'].get(\"Player\", {})\n    \n    # Calculate the current bet sums for Bank and Player\n    total_bet_on_banker = sum(bank_bets.values())\n    total_bet_on_player = sum(player_bets.values())\n    \n    # Define odds typically used in Baccarat\n    banker_win_prob = 0.458\n    player_win_prob = 0.446\n\n    # Estimate win probabilities modified by current bets as a simple heuristic adjustment\n    bank_bet_ratio = total_bet_on_banker / (total_bet_on_banker + total_bet_on_player + 1e-5)  # Avoid division by zero\n    player_bet_ratio = total_bet_on_player / (total_bet_on_banker + total_bet_on_player + 1e-5)\n    \n    if action['args']['bet_type'] == \"Banker\":\n        effective_win_prob = banker_win_prob * (1 + bank_bet_ratio)\n    elif action['args']['bet_type'] == \"Player\":\n        effective_win_prob = player_win_prob * (1 + player_bet_ratio)\n    else:  # Tie\n        effective_win_prob = 1 - (banker_win_prob + player_win_prob)  # Use complementary to define tie\n\n    # Normalize the result score to fall between 0 and 1\n    result_score = min(1.0, max(0.0, effective_win_prob))\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    \"\"\"\n    Calculates an estimated probability of winning for a given action in a Baccarat game state.\n    \n    Parameters:\n    state (dict): The current game state.\n    action (dict): The planned action to evaluate, containing bet type and amount.\n\n    Returns:\n    float: A score between 0 and 1 indicating the estimated probability of winning.\n    \"\"\"\n    # Extract necessary parts of the state\n    recent_history = state.get('recent_history', [])\n    \n    # Count streaks or patterns in recent history\n    player_streak = 0\n    banker_streak = 0\n\n    # Analyze recent history for outcomes of Player and Banker\n    for record in recent_history:\n        if record.get('type') == \"info\":\n            msg = record.get('msg', \"\").lower()\n            if \"player\" in msg and \"wins\" in msg:\n                player_streak += 1\n                banker_streak = 0\n            elif \"banker\" in msg and \"wins\" in msg:\n                banker_streak += 1\n                player_streak = 0\n\n    # Calculate action-based weight based on trending history\n    if action['args']['bet_type'] == 'Player':\n        base_score = 0.45  # Base winning chance for player\n        streak_influence = min(player_streak * 0.02, 0.1)  # Streak adds up to 0.1 in score\n    elif action['args']['bet_type'] == 'Banker':\n        base_score = 0.5  # Base winning chance for banker\n        streak_influence = min(banker_streak * 0.02, 0.1)  # Streak adds up to 0.1 in score\n    else:\n        # Tie case historically has less probability, adjust accordingly\n        base_score = 0.1\n        streak_influence = 0\n\n    # Calculate the reward score\n    result_score = base_score + streak_influence\n\n    # Ensure the result is max 1.0 and rounded for better approximation\n    result_score = min(round(result_score, 3), 1.0)\n\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Base win probabilities for Baccarat based on typical house edge\n    base_probabilities = {\n        \"Player\": 0.446,  # roughly 44.6% probability\n        \"Banker\": 0.458,  # roughly 45.8% probability\n        \"Tie\": 0.095      # roughly 9.5% probability\n    }\n    \n    # Extract relevant parts of state and action\n    current_bet_type = action['args']['bet_type']\n    current_bet_amount = action['args']['amount']\n    common_state = state['common']\n    legal_actions = state['legal_actions']\n    \n    # Calculate the total amount bet currently on each outcome\n    total_bets = {\n        \"Player\": sum(common_state['bets'].get(\"Player\", {}).values()),\n        \"Banker\": sum(common_state['bets'].get(\"Banker\", {}).values()),\n        \"Tie\": sum(common_state['bets'].get(\"Tie\", {}).values())\n    }\n\n    # Add the current bet to the respective total\n    total_bets[current_bet_type] += current_bet_amount\n    \n    # Calculate a weighted probability factor based on current total bets on each outcome\n    total_pool = sum(total_bets.values())\n    if total_pool == 0:\n        weighted_factor = 1  # no bets placed yet\n    else:\n        weighted_probabilities = {key: value / total_pool for key, value in total_bets.items()}\n        weighted_factor = weighted_probabilities[current_bet_type]\n    \n    # Progressive calculation of reward based on base probabilities and the influence of bets\n    estimated_probability = base_probabilities[current_bet_type]\n    bet_influence_factor = 0.5  # This is a scaling factor to adjust how much the bet distribution influences the score\n\n    result_score = (estimated_probability * (1 - bet_influence_factor)) + (weighted_factor * bet_influence_factor)\n    \n    # Ensure the result is between 0 and 1\n    result_score = max(0, min(1, result_score))\n    \n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract information from state and action\n    num_decks = 8\n    deck_size = state['common']['facedown_cards']['deck_size']\n    total_cards = num_decks * 52\n    faceup_cards = state['common']['faceup_cards']\n    player_hand = faceup_cards['player_hand']\n    banker_hand = faceup_cards['banker_hand']\n    \n    # Calculate number of high cards (10, J, Q, K, A) in player/banker hands\n    high_cards = {'10', 'J', 'Q', 'K', 'A'}\n    high_card_count_player = sum(card in high_cards for card in player_hand)\n    high_card_count_banker = sum(card in high_cards for card in banker_hand)\n    total_high_cards_played = high_card_count_player + high_card_count_banker\n    \n    # Estimate proportion of remaining high cards in the deck\n    estimated_high_cards_remaining = 4 * len(high_cards) * num_decks - total_high_cards_played\n    estimated_remaining_high_card_proportion = estimated_high_cards_remaining / (deck_size + len(player_hand) + len(banker_hand))\n    \n    # Focus on action's impact based on expected benefit\n    # - Bet on Banker has slightly better odds especially with lower high-card proportion\n    # - Bet on Player or Tie when high cards are more likely\n    \n    bet_type = action['args']['bet_type']\n    bet_amount = action['args']['amount']\n    \n    # Determine impact of high card concentration on strategy\n    if bet_type == \"Banker\":\n        base_score = 0.45  # Banker generally has about 45% chance of winning\n        high_card_impact = -0.05  # Less favor when high-card likelihood increases\n    elif bet_type == \"Player\":\n        base_score = 0.44  # The Player has around 44% winning chance\n        high_card_impact = 0.05  # More favor with more high cards\n    elif bet_type == \"Tie\":\n        base_score = 0.09  # Tie has around 9% probability\n        high_card_impact = 0.01  # Slightly better when high cards are possible\n    \n    # Calculating resulting probability estimation with scaling\n    estimated_influence = (estimated_remaining_high_card_proportion - 0.16) * high_card_impact\n    result_score = base_score + estimated_influence\n    \n    # Ensure result_score is bounded between 0 and 1\n    result_score = max(0, min(1, result_score))\n\n    return result_score\n"
    ]
}