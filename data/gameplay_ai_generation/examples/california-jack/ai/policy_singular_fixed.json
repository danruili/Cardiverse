{
    "game_description": "Rank of Cards\n\nA (high), K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n\nDeal cards either one or three at a time, beginning with the opponent, until each player has six cards. The remaining cards are squared and turned face up in the center of the table, serving as a stock. The top card is the trump suit for that deal.\n\n### The Play\n\nThe player on the dealer's left leads. The card led loses the trick to a higher card of the same suit or to a trump, but wins the trick otherwise. The winner of each trick leads next. The second player to each trick must either follow suit or trump, if possible. If unable to follow suit or trump, they may play any card.\n\nThe winner of each trick draws the top card of the stock, and the loser takes the next card. Since the top card of the stock is always exposed, an object of play frequently is to win or lose a trick depending on whether the player wishes to draw the top card of the stock or take a chance on what the next card will be. When the stock is exhausted, the last six cards of each player's hand are played out until all cards have been played.\n\n### How to Keep Score\n\nOne point each is scored for taking the tricks that contain: High (ace of trumps), Low (deuce of trumps), Jack of trumps, and Game (the greatest number of points in counting cards, each ten counting 10 points, each ace 4, each king 3, each queen 2, each jack 1).\n\nThe first player to score 10 points wins the game. If both players reach 10 in the same hand, the points count in order: High, Low, Jack, Game.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 0, \"current_leader\": 0, \"current_winner\": null, \"is_over\": true, \"winner\": 0, \"trump_suit\": \"clubs\", \"facedown_cards\": {\"deck_size\": 34}, \"faceup_cards\": {\"trump_card\": {\"rank\": \"8\", \"suit\": \"clubs\"}, \"current_trick\": []}}, \"players\": [{\"public\": {\"trick_points\": 10, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"trick_points\": 4, \"final_showdown\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"10\"}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(suit: clubs, rank: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete: ['6-clubs', '10-clubs']\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 leads the next trick.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the game with 10 points. Collected cards: ['6-clubs', '10-clubs']\", \"role\": null}], \"legal_actions\": []}\n\nExplanation: \n{\"common\": \"This section contains data shared by all players, such as game configurations and the state of the deck and game.\", \"num_players\": \"The number of players in the game, which is 2.\", \"current_player\": \"The index of the player whose turn it is currently, starting from 0.\", \"current_leader\": \"The index of the player who led the current or most recent trick.\", \"current_winner\": \"Initially null, this would hold the index of the current winner if a trick is in progress.\", \"is_over\": \"A boolean indicating whether the game is over. True means the game has ended.\", \"winner\": \"The index of the player who won the game; null if the game isn't over yet. Here, it's player 0.\", \"trump_suit\": \"The trump suit of the game, which was determined during initialization. Here, it's 'clubs'.\", \"facedown_cards\": \"Cards specific to the player that are not visible to the opponents.\", \"deck_size\": \"The number of cards remaining in the deck. Here it is 34.\", \"faceup_cards\": \"Cards specific to the player that have been played or laid down openly.\", \"trump_card\": \"The card from the deck that determines the trump suit. Here it's the 8 of clubs.\", \"current_trick\": \"A list of cards that have been played in the current trick. It is empty here.\", \"players\": \"A list of player-specific data, each entry corresponding to a player.\", \"public\": \"Data about a player that is visible to all, such as their score or indicators if it's their turn.\", \"trick_points\": \"The total points the player has scored from tricks, based on game rules. Player 0 has 10.\", \"private\": \"This would hold player-specific information hidden from other players. It's empty in this context.\", \"hand\": \"Current cards in the player's hand. For player 0, this includes six identified cards.\", \"collected_cards\": \"A list of cards collected by a player, which have been won in tricks.\", \"recent_history\": \"A list of actions and events that have occurred in the game, in order.\", \"type\": \"Indicates the nature of the entry in the history, such as 'action' or 'info'.\", \"player_id\": \"The index of the player associated with a particular action entry.\", \"action\": \"Details of an action a player took, including the action type and any applicable arguments.\", \"msg\": \"Descriptive text explaining the action or event.\", \"roles\": \"Context or participation in the action/event, although null in this dataset.\", \"legal_actions\": \"A list of actions currently allowed for the current player, empty here, indicating there are none as the game is over.\"}",
    "policy_list": [
        "**Opponent Hand Inference**\nUse played cards and trick outcomes to infer the possible cards remaining in the opponent's hand, adjusting strategy accordingly to exploit weaknesses or avoid their strong plays."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def rank_value(rank: str) -> int:\n        rank_order = {'2': 1, '3': 2, '4': 3, '5': 4, '6': 5, '7': 6, '8': 7, '9': 8,\n                      '10': 9, 'J': 10, 'Q': 11, 'K': 12, 'A': 13}\n        return rank_order.get(rank, 0)\n\n    def calculate_card_strength(card: dict, trump_suit: str) -> float:\n        strength = rank_value(card['rank'])\n        if card['suit'] == trump_suit:\n            strength += 5  # Bonus for trump card\n        return strength / 18  # Normalize between 0 and 1\n\n    def evaluate_hand_strength(hand: list, trump_suit: str) -> float:\n        return sum(calculate_card_strength(card, trump_suit) for card in hand) / len(hand)\n\n    def evaluate_trick_lead_ability(state: dict) -> float:\n        leader_strength = 0\n        if state['common']['current_leader'] == state['common']['current_player']:\n            leader_hand = state['players'][state['common']['current_player']]['facedown_cards']['hand']\n            leader_strength = evaluate_hand_strength(leader_hand, state['common']['trump_suit'])\n        return leader_strength\n\n    current_player = state['common']['current_player']\n    current_hand = state['players'][current_player]['facedown_cards']['hand']\n    trump_suit = state['common']['trump_suit']\n    player_score = state['players'][current_player]['public']['trick_points']\n    \n    base_score = player_score / 10.0\n    hand_strength = evaluate_hand_strength(current_hand, trump_suit)\n    trick_lead_ability = evaluate_trick_lead_ability(state)\n\n    result_score = 0.6 * base_score + 0.2 * hand_strength + 0.2 * trick_lead_ability\n    return result_score\n"
    ]
}