{
    "game_description": "Rank of Cards\n\nA (high), K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n\nDeal cards either one or three at a time, beginning with the opponent, until each player has six cards. The remaining cards are squared and turned face up in the center of the table, serving as a stock. The top card is the trump suit for that deal.\n\n### The Play\n\nThe player on the dealer's left leads. The card led loses the trick to a higher card of the same suit or to a trump, but wins the trick otherwise. The winner of each trick leads next. The second player to each trick must either follow suit or trump, if possible. If unable to follow suit or trump, they may play any card.\n\nThe winner of each trick draws the top card of the stock, and the loser takes the next card. Since the top card of the stock is always exposed, an object of play frequently is to win or lose a trick depending on whether the player wishes to draw the top card of the stock or take a chance on what the next card will be. When the stock is exhausted, the last six cards of each player's hand are played out until all cards have been played.\n\n### How to Keep Score\n\nOne point each is scored for taking the tricks that contain: High (ace of trumps), Low (deuce of trumps), Jack of trumps, and Game (the greatest number of points in counting cards, each ten counting 10 points, each ace 4, each king 3, each queen 2, each jack 1).\n\nThe first player to score 10 points wins the game. If both players reach 10 in the same hand, the points count in order: High, Low, Jack, Game.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 0, \"current_leader\": 0, \"current_winner\": null, \"is_over\": true, \"winner\": 0, \"trump_suit\": \"clubs\", \"facedown_cards\": {\"deck_size\": 34}, \"faceup_cards\": {\"trump_card\": {\"rank\": \"8\", \"suit\": \"clubs\"}, \"current_trick\": []}}, \"players\": [{\"public\": {\"trick_points\": 10, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"trick_points\": 4, \"final_showdown\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"10\"}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(suit: clubs, rank: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete: ['6-clubs', '10-clubs']\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 leads the next trick.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the game with 10 points. Collected cards: ['6-clubs', '10-clubs']\", \"role\": null}], \"legal_actions\": []}\n\nExplanation: \n{\"common\": \"This section contains data shared by all players, such as game configurations and the state of the deck and game.\", \"num_players\": \"The number of players in the game, which is 2.\", \"current_player\": \"The index of the player whose turn it is currently, starting from 0.\", \"current_leader\": \"The index of the player who led the current or most recent trick.\", \"current_winner\": \"Initially null, this would hold the index of the current winner if a trick is in progress.\", \"is_over\": \"A boolean indicating whether the game is over. True means the game has ended.\", \"winner\": \"The index of the player who won the game; null if the game isn't over yet. Here, it's player 0.\", \"trump_suit\": \"The trump suit of the game, which was determined during initialization. Here, it's 'clubs'.\", \"facedown_cards\": \"Cards specific to the player that are not visible to the opponents.\", \"deck_size\": \"The number of cards remaining in the deck. Here it is 34.\", \"faceup_cards\": \"Cards specific to the player that have been played or laid down openly.\", \"trump_card\": \"The card from the deck that determines the trump suit. Here it's the 8 of clubs.\", \"current_trick\": \"A list of cards that have been played in the current trick. It is empty here.\", \"players\": \"A list of player-specific data, each entry corresponding to a player.\", \"public\": \"Data about a player that is visible to all, such as their score or indicators if it's their turn.\", \"trick_points\": \"The total points the player has scored from tricks, based on game rules. Player 0 has 10.\", \"private\": \"This would hold player-specific information hidden from other players. It's empty in this context.\", \"hand\": \"Current cards in the player's hand. For player 0, this includes six identified cards.\", \"collected_cards\": \"A list of cards collected by a player, which have been won in tricks.\", \"recent_history\": \"A list of actions and events that have occurred in the game, in order.\", \"type\": \"Indicates the nature of the entry in the history, such as 'action' or 'info'.\", \"player_id\": \"The index of the player associated with a particular action entry.\", \"action\": \"Details of an action a player took, including the action type and any applicable arguments.\", \"msg\": \"Descriptive text explaining the action or event.\", \"roles\": \"Context or participation in the action/event, although null in this dataset.\", \"legal_actions\": \"A list of actions currently allowed for the current player, empty here, indicating there are none as the game is over.\"}",
    "policy_list": [
        "**Trump Suit Control**\nMeasures the number of trump cards in the AI player's hand, giving higher values to higher-ranked trump cards. This metric reflects the player's ability to win tricks with trumps and control the flow of the game.\n**Card Advantage**\nEvaluates the expected value of winning a trick based on the visible top card of the stock. The metric weighs the likelihood of beneficial card acquisition, such as acquiring high-value cards or critical trumps.\n**Suit Strength**\nQuantifies the strength of the AI player's cards in each non-trump suit based on card rank distribution. This informs the decision of when to lead or avoid certain suits, balancing the risk of losing control against the potential gain of winning more non-trump tricks.\n**Score Progression Potential**\nAssesses the potential to achieve scoring milestones (High, Low, Jack, and Game) given the current state of the hand and known cards. This metric prioritizes card plays that increase the chance of reaching the cumulative points needed to win.\n**Control Trump Flow**\nStrategically manage when to use trump cards to gain an advantage, while also trying to suppress the opponent's ability to win tricks with their trump cards.\n**Stock Card Manipulation**\nWin or lose specific tricks to draw desired cards from the stock based on the information about the top card and the cards you have.\n**High Card Reservation**\nHold onto high cards until later in the round to ensure winning the crucial last few tricks, particularly when the stock is exhausted.\n**Identify and Target Weaknesses**\nMonitor the cards played by the opponent to identify weak suits or lack of trumps, and subsequently lead these suits to force them to play disadvantageous cards."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    def card_value(card):\n        \"\"\"Assign values to cards for ranking comparison.\"\"\"\n        if card[\"rank\"].isdigit():\n            return int(card[\"rank\"])\n        elif card[\"rank\"] == \"J\":\n            return 11\n        elif card[\"rank\"] == \"Q\":\n            return 12\n        elif card[\"rank\"] == \"K\":\n            return 13\n        elif card[\"rank\"] == \"A\":\n            return 14\n        else:\n            return 0\n\n    def evaluate_trump_control(player_hand, trump_suit):\n        \"\"\"Evaluate the player's control over the trump suit in the hand.\"\"\"\n        trump_value = sum(card_value(card) for card in player_hand if card[\"suit\"] == trump_suit)\n        return trump_value / (4 * 14)  # assuming a max of 4 trump cards each with value up to 14\n\n    def evaluate_card_advantage(visible_card, player_hand):\n        \"\"\"Determine the advantage based on visible cards in the stock.\"\"\"\n        is_favorable = any(card_value(c) > card_value(visible_card) for c in player_hand)\n        return 0.8 if is_favorable else 0.2\n\n    def evaluate_suit_strength(player_hand, trump_suit):\n        \"\"\"Evaluate the strength of other suits in player's hand.\"\"\"\n        non_trump_cards = [card for card in player_hand if card[\"suit\"] != trump_suit]\n        suit_strength = sum(card_value(card) for card in non_trump_cards) / (10 * 14)\n        return suit_strength\n\n    def evaluate_score_progression(current_score):\n        \"\"\"Evaluate potential to win by checking score progression.\"\"\"\n        return min(current_score / 10, 1.0)  # gauge potential to reach or exceed 10 points\n    \n    # Extracting necessary data\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    player = 0  # AI Player\n    current_player_data = state[\"players\"][player]\n    player_hand = current_player_data[\"facedown_cards\"][\"hand\"]\n    current_points = current_player_data[\"public\"][\"trick_points\"]\n    visible_trump_card = state[\"common\"][\"faceup_cards\"][\"trump_card\"]\n\n    # Evaluate different aspects\n    trump_control_score = evaluate_trump_control(player_hand, trump_suit)\n    card_advantage_score = evaluate_card_advantage(visible_trump_card, player_hand)\n    suit_strength_score = evaluate_suit_strength(player_hand, trump_suit)\n    score_progression_score = evaluate_score_progression(current_points)\n\n    # Calculate overall action value\n    result_score = (\n        0.3 * trump_control_score +\n        0.2 * card_advantage_score +\n        0.2 * suit_strength_score +\n        0.3 * score_progression_score\n    )\n\n    return result_score\n"
    ]
}