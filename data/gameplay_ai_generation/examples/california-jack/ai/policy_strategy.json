{
    "game_description": "Rank of Cards\n\nA (high), K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n\nDeal cards either one or three at a time, beginning with the opponent, until each player has six cards. The remaining cards are squared and turned face up in the center of the table, serving as a stock. The top card is the trump suit for that deal.\n\n### The Play\n\nThe player on the dealer's left leads. The card led loses the trick to a higher card of the same suit or to a trump, but wins the trick otherwise. The winner of each trick leads next. The second player to each trick must either follow suit or trump, if possible. If unable to follow suit or trump, they may play any card.\n\nThe winner of each trick draws the top card of the stock, and the loser takes the next card. Since the top card of the stock is always exposed, an object of play frequently is to win or lose a trick depending on whether the player wishes to draw the top card of the stock or take a chance on what the next card will be. When the stock is exhausted, the last six cards of each player's hand are played out until all cards have been played.\n\n### How to Keep Score\n\nOne point each is scored for taking the tricks that contain: High (ace of trumps), Low (deuce of trumps), Jack of trumps, and Game (the greatest number of points in counting cards, each ten counting 10 points, each ace 4, each king 3, each queen 2, each jack 1).\n\nThe first player to score 10 points wins the game. If both players reach 10 in the same hand, the points count in order: High, Low, Jack, Game.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 0, \"current_leader\": 0, \"current_winner\": null, \"is_over\": true, \"winner\": 0, \"trump_suit\": \"clubs\", \"facedown_cards\": {\"deck_size\": 34}, \"faceup_cards\": {\"trump_card\": {\"rank\": \"8\", \"suit\": \"clubs\"}, \"current_trick\": []}}, \"players\": [{\"public\": {\"trick_points\": 10, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"trick_points\": 4, \"final_showdown\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"10\"}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(suit: clubs, rank: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete: ['6-clubs', '10-clubs']\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 leads the next trick.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the game with 10 points. Collected cards: ['6-clubs', '10-clubs']\", \"role\": null}], \"legal_actions\": []}\n\nExplanation: \n{\"common\": \"This section contains data shared by all players, such as game configurations and the state of the deck and game.\", \"num_players\": \"The number of players in the game, which is 2.\", \"current_player\": \"The index of the player whose turn it is currently, starting from 0.\", \"current_leader\": \"The index of the player who led the current or most recent trick.\", \"current_winner\": \"Initially null, this would hold the index of the current winner if a trick is in progress.\", \"is_over\": \"A boolean indicating whether the game is over. True means the game has ended.\", \"winner\": \"The index of the player who won the game; null if the game isn't over yet. Here, it's player 0.\", \"trump_suit\": \"The trump suit of the game, which was determined during initialization. Here, it's 'clubs'.\", \"facedown_cards\": \"Cards specific to the player that are not visible to the opponents.\", \"deck_size\": \"The number of cards remaining in the deck. Here it is 34.\", \"faceup_cards\": \"Cards specific to the player that have been played or laid down openly.\", \"trump_card\": \"The card from the deck that determines the trump suit. Here it's the 8 of clubs.\", \"current_trick\": \"A list of cards that have been played in the current trick. It is empty here.\", \"players\": \"A list of player-specific data, each entry corresponding to a player.\", \"public\": \"Data about a player that is visible to all, such as their score or indicators if it's their turn.\", \"trick_points\": \"The total points the player has scored from tricks, based on game rules. Player 0 has 10.\", \"private\": \"This would hold player-specific information hidden from other players. It's empty in this context.\", \"hand\": \"Current cards in the player's hand. For player 0, this includes six identified cards.\", \"collected_cards\": \"A list of cards collected by a player, which have been won in tricks.\", \"recent_history\": \"A list of actions and events that have occurred in the game, in order.\", \"type\": \"Indicates the nature of the entry in the history, such as 'action' or 'info'.\", \"player_id\": \"The index of the player associated with a particular action entry.\", \"action\": \"Details of an action a player took, including the action type and any applicable arguments.\", \"msg\": \"Descriptive text explaining the action or event.\", \"roles\": \"Context or participation in the action/event, although null in this dataset.\", \"legal_actions\": \"A list of actions currently allowed for the current player, empty here, indicating there are none as the game is over.\"}",
    "policy_list": [
        "**Control Trump Flow**\nStrategically manage when to use trump cards to gain an advantage, while also trying to suppress the opponent's ability to win tricks with their trump cards.",
        "**Stock Card Manipulation**\nWin or lose specific tricks to draw desired cards from the stock based on the information about the top card and the cards you have.",
        "**High Card Reservation**\nHold onto high cards until later in the round to ensure winning the crucial last few tricks, particularly when the stock is exhausted.",
        "**Identify and Target Weaknesses**\nMonitor the cards played by the opponent to identify weak suits or lack of trumps, and subsequently lead these suits to force them to play disadvantageous cards."
    ],
    "code": [
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract relevant information from the state\n    common_info = state['common']\n    player_info = state['players'][common_info['current_player']]\n    opponent_info = state['players'][1 - common_info['current_player']]\n    \n    # Get the current player's hand and collected cards\n    hand = player_info['facedown_cards']['hand']\n    collected_cards = player_info['faceup_cards']['collected_cards']\n    \n    # Get trump suit and faceup trump card\n    trump_suit = common_info['trump_suit']\n    trump_card = common_info['faceup_cards']['trump_card']\n    \n    # Get player points\n    current_points = player_info['public']['trick_points']\n    opponent_points = opponent_info['public']['trick_points']\n    \n    # Analyze the action to be taken\n    # The action is represented with its 'action' name like 'play' and 'args' containing 'suit' and 'rank'\n    action_suit = action['args']['suit']\n    action_rank = action['args']['rank']\n\n    # Calculate factors influencing the score\n    # - Possession of trump cards\n    # - Card rank in the context of the trick\n    # - Current and potential points vs the opponent\n    trump_cards_in_hand = [card for card in hand if card['suit'] == trump_suit]\n    high_trump_cards = [card for card in trump_cards_in_hand if card['rank'] in ['A', 'K', 'Q', 'J']]\n    has_high_trumps = any(high_trump_cards)\n    \n    # Points estimate - This is a simple function to give insight into scoring opportunity.\n    # 4 Points for aces and 10 of trumps\n    potential_points, potential_high = 0, 0\n    for card in hand + collected_cards:\n        if card['suit'] == trump_suit and card['rank'] in ['A', '10']:\n            potential_points += 4\n        elif card['rank'] in ['A', 'K', 'Q', 'J']:\n            potential_high += 1\n    \n    # Placeholder for continuous estimation\n    result_score = 0.5\n    \n    # Weight Factors (These are exemplary, can be fine-tuned after testing)\n    result_score += 0.2 * (current_points / 10.0)  # Current trick points weight\n    result_score += 0.1 * len(trump_cards_in_hand) / 6.0  # Normalized trump cards count\n    result_score += 0.1 * len(high_trump_cards) / 4.0  # High trump card possession weight\n    result_score += 0.2 if has_high_trumps else 0  # Advantage of having high trumps\n    result_score += 0.3 * potential_points / 10.0  # Expectation based on potential points\n    result_score += 0.05 * potential_high / 4.0  # Expectation based on high ranking cards\n\n    # Ensure the score estimate stays between 0 and 1\n    result_score = min(max(result_score, 0), 1)\n    \n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    import numpy as np\n\n    # Game constants\n    MAX_POINTS = 10\n    MAX_CARDS_IN_HAND = 6\n    DECK_SIZE = 40  # Total cards in a standard deck for this game\n    \n    # Extract common game state information\n    common_state = state.get(\"common\", {})\n    is_game_over = common_state.get(\"is_over\", False)\n    trump_suit = common_state.get(\"trump_suit\", None)\n    faceup_cards = common_state.get(\"faceup_cards\", {})\n    trump_card = faceup_cards.get(\"trump_card\", {})\n    \n    # Extract player-specific information\n    players_state = state.get(\"players\", [])\n    current_player_index = common_state.get(\"current_player\", 0)\n    current_player_state = players_state[current_player_index]\n    current_player_trick_points = current_player_state[\"public\"].get(\"trick_points\", 0)\n    current_player_hand = current_player_state[\"facedown_cards\"].get(\"hand\", [])\n    current_player_collected = current_player_state.get(\"faceup_cards\", {}).get(\"collected_cards\", [])\n\n    # Calculate the probability of winning\n    potential_points = current_player_trick_points\n    reward = 0.0\n\n    # Consider collected trump cards for points\n    for card in current_player_collected:\n        if card[\"suit\"] == trump_suit and (card[\"rank\"] == \"A\" or card[\"rank\"] == \"2\" or card[\"rank\"] == \"J\"):\n            potential_points += 1\n    \n    # Estimate potential extra points based on current hand cards\n    trump_in_hand = any(card[\"suit\"] == trump_suit for card in current_player_hand)\n    if trump_in_hand:\n        potential_points += 0.5  # Arbitrary small boost if holding trump\n    \n    # Consider similarity of hand vs trump for more sophisticated estimation\n    high_cards = [\"A\", \"K\", \"Q\", \"J\", \"10\"]\n    for card in current_player_hand:\n        if card[\"suit\"] == trump_suit and card[\"rank\"] in high_cards:\n            potential_points += 1\n\n    # Base reward probability on potential points and game state\n    reward = potential_points / MAX_POINTS\n\n    # Normalizing score between 0 and 1\n    result_score = np.clip(reward, 0, 1)\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def card_value(card, trump_suit):\n        # Assign values to cards for scoring based on rank\n        values = {'2': 0, '3': 1, '4': 2, '5': 3, '6': 4, '7': 5, \n                  '8': 6, '9': 7, '10': 8, 'J': 9, 'Q': 10, 'K': 11, 'A': 12}\n        value = values[card['rank']]\n        \n        # Increase value if card is a trump\n        if card['suit'] == trump_suit:\n            value += 13  # trump cards have an edge over non-trump cards\n        return value\n\n    def evaluate_hand(cards, trump_suit):\n        # Evaluate the overall strength of a hand\n        total_value = sum(card_value(card, trump_suit) for card in cards)\n        return total_value\n\n    current_player = state[\"common\"][\"current_player\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    hand = state[\"players\"][current_player][\"facedown_cards\"][\"hand\"]\n    current_winner_points = state[\"players\"][current_player][\"public\"][\"trick_points\"]\n\n    # Evaluate the hand of the current player\n    hand_strength = evaluate_hand(hand, trump_suit)\n\n    # Evaluate the score that takes into account current standing and hand strength\n    max_possible_points = 40  # Based on the maximum value of all cards\n    normalized_hand_score = hand_strength / max_possible_points\n\n    # Consider current points towards the player's probability of winning\n    current_score_factor = current_winner_points / 10  # since 10 points needed to win\n\n    # Combine factors into final score; emphasize current scoring opportunity and hand strength\n    blend_factor = 0.5  # weight more on the hand strength due to High Card Reservation policy\n    final_score = blend_factor * normalized_hand_score + (1 - blend_factor) * current_score_factor\n\n    # Ensure the result score lies between 0 and 1\n    result_score = min(max(final_score, 0), 1)\n    return result_score\n",
        "\ndef score(state: dict, action: dict) -> float:\n    # Extract common game elements\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_id = common[\"current_player\"]\n    trump_suit = common[\"trump_suit\"]\n    \n    # Define factors to base our score on\n    trick_points_weight = 0.4\n    hand_strength_weight = 0.4\n    trump_strength_weight = 0.2\n    \n    # Calculate current player's trick points ratio\n    current_player_points = players[current_player_id][\"public\"][\"trick_points\"]\n    total_points_possible = 10  # As 10 points is the winning threshold\n    trick_points_score = current_player_points / total_points_possible\n    \n    # Calculate hand strength\n    current_player_hand = players[current_player_id][\"facedown_cards\"][\"hand\"]\n    hand_value = 0\n    \n    # Assign values based on card ranks (A=14, K=13, Q=12, J=11, etc.)\n    card_values = {\n        \"A\": 14, \"K\": 13, \"Q\": 12, \"J\": 11,\n        \"10\": 10, \"9\": 9, \"8\": 8, \"7\": 7,\n        \"6\": 6, \"5\": 5, \"4\": 4, \"3\": 3, \"2\": 2\n    }\n    \n    for card in current_player_hand:\n        hand_value += card_values[card[\"rank\"]]\n    max_hand_value = len(current_player_hand) * 14  # all Aces scenario\n    hand_strength_score = hand_value / max_hand_value\n    \n    # Assess trump card strength\n    trump_cards_count = len([card for card in current_player_hand if card[\"suit\"] == trump_suit])\n    hand_size = len(current_player_hand)\n    trump_strength_score = trump_cards_count / hand_size\n    \n    # Calculate the overall score as a probability estimate\n    result_score = (trick_points_score * trick_points_weight +\n                    hand_strength_score * hand_strength_weight +\n                    trump_strength_score * trump_strength_weight)\n    \n    # Ensure result is constrained between 0 and 1\n    result_score = max(0, min(1, result_score))\n    return result_score\n"
    ]
}