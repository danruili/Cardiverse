{
    "game_description": "Rank of Cards\n\nA (high), K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n\nDeal cards either one or three at a time, beginning with the opponent, until each player has six cards. The remaining cards are squared and turned face up in the center of the table, serving as a stock. The top card is the trump suit for that deal.\n\n### The Play\n\nThe player on the dealer's left leads. The card led loses the trick to a higher card of the same suit or to a trump, but wins the trick otherwise. The winner of each trick leads next. The second player to each trick must either follow suit or trump, if possible. If unable to follow suit or trump, they may play any card.\n\nThe winner of each trick draws the top card of the stock, and the loser takes the next card. Since the top card of the stock is always exposed, an object of play frequently is to win or lose a trick depending on whether the player wishes to draw the top card of the stock or take a chance on what the next card will be. When the stock is exhausted, the last six cards of each player's hand are played out until all cards have been played.\n\n### How to Keep Score\n\nOne point each is scored for taking the tricks that contain: High (ace of trumps), Low (deuce of trumps), Jack of trumps, and Game (the greatest number of points in counting cards, each ten counting 10 points, each ace 4, each king 3, each queen 2, each jack 1).\n\nThe first player to score 10 points wins the game. If both players reach 10 in the same hand, the points count in order: High, Low, Jack, Game.",
    "input_description": "Example: \n{\"common\": {\"num_players\": 2, \"current_player\": 0, \"current_leader\": 0, \"current_winner\": null, \"is_over\": true, \"winner\": 0, \"trump_suit\": \"clubs\", \"facedown_cards\": {\"deck_size\": 34}, \"faceup_cards\": {\"trump_card\": {\"rank\": \"8\", \"suit\": \"clubs\"}, \"current_trick\": []}}, \"players\": [{\"public\": {\"trick_points\": 10, \"current_player\": true}, \"private\": {}, \"facedown_cards\": {\"hand\": [{\"rank\": \"8\", \"suit\": \"hearts\"}, {\"rank\": \"7\", \"suit\": \"hearts\"}, {\"rank\": \"3\", \"suit\": \"spades\"}, {\"rank\": \"10\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"clubs\"}, {\"rank\": \"5\", \"suit\": \"clubs\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"6\", \"suit\": \"clubs\"}, {\"rank\": \"10\", \"suit\": \"clubs\"}]}}, {\"public\": {\"trick_points\": 4, \"final_showdown\": true}, \"facedown_cards\": {\"hand\": [{\"rank\": \"J\", \"suit\": \"spades\"}, {\"rank\": \"A\", \"suit\": \"spades\"}, {\"rank\": \"K\", \"suit\": \"diamonds\"}, {\"rank\": \"7\", \"suit\": \"spades\"}, {\"rank\": \"3\", \"suit\": \"diamonds\"}, {\"rank\": \"8\", \"suit\": \"diamonds\"}]}, \"faceup_cards\": {\"collected_cards\": [{\"rank\": \"K\", \"suit\": \"hearts\"}, {\"rank\": \"2\", \"suit\": \"clubs\"}, {\"rank\": \"6\", \"suit\": \"diamonds\"}, {\"rank\": \"5\", \"suit\": \"diamonds\"}]}}], \"recent_history\": [{\"type\": \"action\", \"player_id\": 0, \"action\": {\"action\": \"play\", \"args\": {\"suit\": \"clubs\", \"rank\": \"10\"}, \"id\": 1}, \"msg\": \"Player 0 decides to: play-(suit: clubs, rank: 10)\"}, {\"type\": \"info\", \"msg\": \"Player 0 plays 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Trick complete: ['6-clubs', '10-clubs']\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the trick with 10-clubs.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 1 draws a card from the deck.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 leads the next trick.\", \"role\": null}, {\"type\": \"info\", \"msg\": \"Player 0 wins the game with 10 points. Collected cards: ['6-clubs', '10-clubs']\", \"role\": null}], \"legal_actions\": []}\n\nExplanation: \n{\"common\": \"This section contains data shared by all players, such as game configurations and the state of the deck and game.\", \"num_players\": \"The number of players in the game, which is 2.\", \"current_player\": \"The index of the player whose turn it is currently, starting from 0.\", \"current_leader\": \"The index of the player who led the current or most recent trick.\", \"current_winner\": \"Initially null, this would hold the index of the current winner if a trick is in progress.\", \"is_over\": \"A boolean indicating whether the game is over. True means the game has ended.\", \"winner\": \"The index of the player who won the game; null if the game isn't over yet. Here, it's player 0.\", \"trump_suit\": \"The trump suit of the game, which was determined during initialization. Here, it's 'clubs'.\", \"facedown_cards\": \"Cards specific to the player that are not visible to the opponents.\", \"deck_size\": \"The number of cards remaining in the deck. Here it is 34.\", \"faceup_cards\": \"Cards specific to the player that have been played or laid down openly.\", \"trump_card\": \"The card from the deck that determines the trump suit. Here it's the 8 of clubs.\", \"current_trick\": \"A list of cards that have been played in the current trick. It is empty here.\", \"players\": \"A list of player-specific data, each entry corresponding to a player.\", \"public\": \"Data about a player that is visible to all, such as their score or indicators if it's their turn.\", \"trick_points\": \"The total points the player has scored from tricks, based on game rules. Player 0 has 10.\", \"private\": \"This would hold player-specific information hidden from other players. It's empty in this context.\", \"hand\": \"Current cards in the player's hand. For player 0, this includes six identified cards.\", \"collected_cards\": \"A list of cards collected by a player, which have been won in tricks.\", \"recent_history\": \"A list of actions and events that have occurred in the game, in order.\", \"type\": \"Indicates the nature of the entry in the history, such as 'action' or 'info'.\", \"player_id\": \"The index of the player associated with a particular action entry.\", \"action\": \"Details of an action a player took, including the action type and any applicable arguments.\", \"msg\": \"Descriptive text explaining the action or event.\", \"roles\": \"Context or participation in the action/event, although null in this dataset.\", \"legal_actions\": \"A list of actions currently allowed for the current player, empty here, indicating there are none as the game is over.\"}",
    "policy_list": [
        "**Control Trump Flow**\nTo refine the strategy, consider the following steps: 1) Use trump cards to win tricks during 'critical moments', such as when the visible stock card is of high value or when winning helps to complete a scoring milestone. 2) Monitor 'Trump Suit Control' to decide when to lead with trumps, aiming to force the opponent into less favorable plays. 3) Evaluate 'Card Advantage' and adjust the use of trumps based on potential stock gains. 4) Consider the opponent's likely strength in non-trump suits and adapt the trump usage strategy to suppress their ability to take control. 5) Use 'Suit Strength' to identify when to maintain suit control or capitalize on weak moments to change the momentum with a trump. 6) Keep 'Score Progression Potential' in mind, ensuring that trump plays support reaching or denying scoring milestones.",
        "**Stock Card Manipulation**\nStock Card Manipulation should involve evaluating the visible top card of the stock and considering its potential to strengthen the hand, based on the current composition and future strategic goals. The strategy should be contextualized through dynamically assessing 'Trump Suit Control' to determine whether acquiring non-trump cards could improve the hand, 'Card Advantage' to decide if winning the current trick would yield a better card than losing, and 'Score Progression Potential' to align the immediate benefit of drawing a specific card with long-term scoring benefits.",
        "**Refined High Card Reservation Strategy**\nIncorporate a refined 'High Card Reservation' strategy where the AI player explicitly holds high cards for situations when (1) the stock is nearly or completely exhausted, increasing the importance of winning each remaining trick, and (2) the AI has less control over the trump suit or equal trump potential with the opponent as inferred from previous plays. Evaluate 'Trump Suit Control' to hold onto high trump cards if the player can win critical points (High, Low, Jack) when opponents' trump potential is minimized. Use 'Suit Strength' to decide on leading or holding high non-trump cards by balancing the risk of losing control. The strategy should dynamically adapt to 'Score Progression Potential' to maximize points, ensuring these high cards are used to secure scoring milestones when feasible.",
        "**Refined Strategy for Exploiting Opponent's Weaknesses**\nThe strategy, 'Identify and Target Weaknesses,' is refined to: Monitor the opponent's play history to detect their lack of certain suits or trumps. Key moments to exploit these weaknesses are when the opponent uses trump cards excessively to win low-value tricks or visibly struggles to follow a suit. During these moments, the AI should lead with the opponent's weak suit until they are forced to play disadvantageous cards. This approach leverages 'Trump Suit Control' for dominance when trumps are in hand and 'Suit Strength' to decide which weak suits to target. Additionally, the AI should consider 'Card Advantage' by evaluating the top stock card, aiming to strategically win or lose based on the potential value acquisition of upcoming cards."
    ],
    "code": [
        "\ndef score(state: dict, action: str) -> float:\n    \"\"\"\n    Estimate the probability of winning the game based on the current game state and a planned game action.\n    \n    Parameters:\n    state (dict): The current game state.\n    action (str): The planned game action.\n    \n    Returns:\n    float: A reward value representing the estimated probability of winning.\n    \"\"\"\n    \n    # Initialize scores for evaluation\n    score_progression = 0.0\n    trump_flow = 0.0\n    potential_gain = 0.0\n    opponent_constraint = 0.0\n\n    # Constants for score computation\n    MAX_POINTS = 10\n    TRUMP_ADVANTAGE = 0.3\n    CARD_ADVANTAGE = 0.1\n\n    # Unpack the game state for easier access\n    common = state[\"common\"]\n    players = state[\"players\"]\n    current_player_index = common[\"current_player\"]\n    opponent_player_index = 1 - current_player_index\n\n    player = players[current_player_index]\n    opponent = players[opponent_player_index]\n\n    # Evaluate Score Progression\n    player_points = player['public']['trick_points']\n    opponent_points = opponent['public']['trick_points']\n    points_gained = player_points - opponent_points\n    score_progression = max(0, points_gained / MAX_POINTS)\n\n    # Evaluate Trump's Suit Control\n    trump_suit = common['trump_suit']\n    trump_cards = [card for card in player['facedown_cards']['hand'] if card['suit'] == trump_suit]\n\n    if action in trump_cards:\n        trump_flow = TRUMP_ADVANTAGE * (player_points / MAX_POINTS)\n\n    # Card Advantage Potential\n    for card in player['facedown_cards']['hand']:\n        if card['rank'] == 'A':\n            potential_gain += CARD_ADVANTAGE\n        elif card['rank'] == 'K':\n            potential_gain += CARD_ADVANTAGE * 0.75\n    \n    if state[\"common\"][\"facedown_cards\"][\"deck_size\"] == 0:  # No stock cards left\n        potential_gain *= 0.5  # Less potential since no new cards to gain\n\n    # Opponent restriction factor\n    opponent_has_trumps = any(card['suit'] == trump_suit for card in opponent['facedown_cards']['hand'])\n    if player_points > opponent_points and not opponent_has_trumps:\n        opponent_constraint = 0.2  # Opponent is constrained if we lead with trump\n\n    # Aggregate assessments to calculate a continuous scoring estimate\n    result_score = score_progression + trump_flow + potential_gain + opponent_constraint\n\n    # Normalize result_score to fall within 0 to 1\n    result_score = min(1.0, max(0.0, result_score))  # Clamping between 0 and 1\n\n    return result_score\n",
        "\ndef score(state: dict, action: str) -> float:\n    def card_value(card):\n        \"\"\"Assigns a numerical value to a card based on its rank, for point calculation purposes.\"\"\"\n        rank_value = {'A': 4, 'K': 3, 'Q': 2, 'J': 1}\n        card_rank = card['rank']\n        if card_rank.isdigit():\n            return int(card_rank) if int(card_rank) == 10 else 0\n        return rank_value.get(card_rank, 0)\n    \n    def evaluate_hand(hand, trump_suit):\n        \"\"\"Evaluates the quality of a hand, giving more weight to trump cards.\"\"\"\n        total_value = 0\n        trump_count = 0\n\n        for card in hand:\n            total_value += card_value(card)\n            if card['suit'] == trump_suit:\n                total_value += 2  # Additional weight for trump cards\n                trump_count += 1\n        \n        return total_value, trump_count\n\n    common = state['common']\n    players = state['players']\n    current_player_index = common['current_player']\n    current_player = players[current_player_index]\n    opponent_player = players[1 - current_player_index]\n    \n    trump_suit = common['trump_suit']\n    trump_card = common['faceup_cards']['trump_card']\n    \n    # Evaluate the current player's hand\n    current_hand_value, current_trump_count = evaluate_hand(current_player['facedown_cards']['hand'], trump_suit)\n    opponent_hand_value, opponent_trump_count = evaluate_hand(opponent_player['facedown_cards']['hand'], trump_suit)\n\n    # Heuristically estimating the score\n    score_progression_potential = current_player['public']['trick_points'] / 10.0\n    trump_control_potential = current_trump_count / (current_trump_count + opponent_trump_count) if (current_trump_count + opponent_trump_count) > 0 else 0.5\n    hand_strength_potential = current_hand_value / (current_hand_value + opponent_hand_value) if (current_hand_value + opponent_hand_value) > 0 else 0.5\n\n    # Combine different aspects to estimate winning probability\n    result_score = (0.5 * score_progression_potential + \n                    0.3 * trump_control_potential +\n                    0.2 * hand_strength_potential)\n\n    return min(max(result_score, 0), 1)\n\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Extract relevant game information\n    num_tricks_won = state[\"players\"][state[\"common\"][\"current_player\"]][\"public\"][\"trick_points\"]\n    num_tricks_won_opponent = state[\"players\"][(state[\"common\"][\"current_player\"] + 1) % 2][\"public\"][\"trick_points\"]\n    hand = state[\"players\"][state[\"common\"][\"current_player\"]][\"facedown_cards\"][\"hand\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    is_game_over = state[\"common\"][\"is_over\"]\n    facedown_deck_size = state[\"common\"][\"facedown_cards\"][\"deck_size\"]\n    \n    # Define scoring weight factors\n    score_weight = 0.4     # Weights the importance of current score\n    trump_control_weight = 0.3   # Weights the control of trump cards\n    high_card_reservation_weight = 0.3   # Weights value for holding high cards when the stock is nearly exhausted\n    \n    # Calculate score based on current trick points\n    score_based_on_points = num_tricks_won / (num_tricks_won + num_tricks_won_opponent) if num_tricks_won + num_tricks_won_opponent > 0 else 0.5\n    \n    # Evaluate trump suit control\n    trump_cards = [card for card in hand if card[\"suit\"] == trump_suit]\n    trump_control_score = (len(trump_cards) / len(hand)) if hand else 0\n    \n    # Value high card reservation\n    high_ranks = [\"A\", \"K\", \"Q\", \"J\", \"10\"]\n    high_cards = [card for card in hand if card[\"rank\"] in high_ranks]\n    high_card_reservation_score = len(high_cards) / len(hand) if hand else 0\n    \n    # Combine scores to calculate total score\n    result_score = (score_based_on_points * score_weight +\n                    trump_control_score * trump_control_weight +\n                    high_card_reservation_score * high_card_reservation_weight)\n    \n    # Adjust score if the game is over\n    if is_game_over:\n        if state[\"common\"][\"winner\"] == state[\"common\"][\"current_player\"]:\n            result_score = 1.0\n        else:\n            result_score = 0.0\n    \n    return result_score\n\n",
        "\ndef score(state: dict, action: str) -> float:\n    # Data extraction\n    player_index = state[\"common\"][\"current_player\"]\n    trump_suit = state[\"common\"][\"trump_suit\"]\n    player_hand = state[\"players\"][player_index][\"facedown_cards\"][\"hand\"]\n    player_points = state[\"players\"][player_index][\"public\"][\"trick_points\"]\n    \n    # Inline evaluation of hand strength\n    hand_strength = 0\n    trump_count = 0\n    for card in player_hand:\n        card_value = 0\n        if card['rank'] == 'A':\n            card_value = 4\n        elif card['rank'] == 'K':\n            card_value = 3\n        elif card['rank'] == 'Q':\n            card_value = 2\n        elif card['rank'] == 'J':\n            card_value = 1\n        elif card['rank'].isdigit():\n            card_value = int(card['rank']) / 10  # Lesser value for number cards\n\n        if card['suit'] == trump_suit:\n            trump_count += 1\n            card_value *= 1.5  # Boost value for trump cards\n        hand_strength += card_value\n    \n    # Evaluate opponent's played and collected cards to detect weaknesses\n    opponent_index = 1 - player_index\n    opponent_hand_size = len(state[\"players\"][opponent_index][\"facedown_cards\"][\"hand\"])\n    opponent_points = state[\"players\"][opponent_index][\"public\"][\"trick_points\"]\n    \n    # Opponent weaknesses - basic check if they have fewer trumps\n    opponent_trump_present = any(card['suit'] == trump_suit for card in state[\"players\"][opponent_index][\"facedown_cards\"]['hand'])\n    opponent_weakness_exploiting_factor = 0.0 if opponent_trump_present else 0.3\n    \n    # Estimate probability of winning\n    point_advantage = (player_points - opponent_points) / 10.0   # normalize based on 10 point win condition\n    stock_factor = (state[\"common\"][\"facedown_cards\"][\"deck_size\"] / 34) if not state[\"common\"][\"is_over\"] else 0.0\n    hand_strength_factor = hand_strength / 30.0\n    \n    result_score = 0.5 + point_advantage + hand_strength_factor + stock_factor / 2 + opponent_weakness_exploiting_factor\n    \n    # Ensure result_score is within bounds [0, 1]\n    result_score = max(0.0, min(1.0, result_score))\n    \n    return result_score\n"
    ]
}